This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  settings.local.json
home/
  core/
    appearance.nix
    default.nix
    defaults.nix
    directories.nix
    packages.nix
    user.nix
  dev/
    nvim/
      appearance.nix
      default.nix
      neovide.nix
      options.nix
      packages.nix
      plugins.nix
      settings.nix
    claude-code.nix
    cursor-ide.nix
    default.nix
    docker.nix
    latex.nix
    mcp.nix
    npm.nix
    nvim.nix
    python.nix
    repomix.nix
  gaming/
    balatro/
      npins/
        default.nix
        sources.json
      default.nix
      installation.nix
    emulation/
      cemu.nix
      default.nix
      dolphin.nix
    marvel-rivals/
      default.nix
      engine.nix
      gameusersettings.nix
      marvelusersettings.nix
    wukong/
      default.nix
      engine.nix
    controllers.nix
    core.nix
    default.nix
    shader-cache.nix
  programs/
    firefox/
      config.nix
      default.nix
      packages.nix
      performance.nix
      policies.nix
      ui-chrome.nix
    android.nix
    bambu.nix
    bluetooth.nix
    creative.nix
    default.nix
    discord.nix
    imv.nix
    media.nix
    mpv.nix
    obs.nix
    obsidian.nix
    pcmanfm.nix
    qbittorrent.nix
    sway-launcher-desktop.nix
    vesktop.nix
    webapps.nix
  services/
    default.nix
    format-nix.nix
    hyprland-config-watcher.nix
    nixos-git-sync.nix
    polkit-agent.nix
    polkit-gnome.nix
    ssh.nix
    syncthing.nix
  session/
    default.nix
    xdg.nix
  shell/
    cat-fetch.nix
    default.nix
    zellij.nix
    zsh.nix
  tools/
    7z.nix
    default.nix
    file-roller.nix
    git.nix
    jujutsu.nix
    nh.nix
    spotdl.nix
    yt-dlp.nix
  ui/
    hyprland/
      ags-integration.nix
      config.nix
      core.nix
      default.nix
      keybindings.nix
      monitors.nix
      options.nix
      quickshell-integration.nix
      window-rules.nix
    ags.nix
    cursor.nix
    default.nix
    fonts.nix
    foot.nix
    gtk.nix
    mako.nix
    quickshell.nix
    wallust.nix
    wayland.nix
  default.nix
hosts/
  y0usaf-desktop/
    default.nix
    disko.nix
    hardware-configuration.nix
lib/
  flake/
    outputs/
      default.nix
    default.nix
    maid.nix
    shared.nix
    system.nix
  generators/
    default.nix
    toHyprconf.nix
  scripts/
    cattree.sh
    shutdown-tracker.sh
  default.nix
  template-default.nix
  template.nix
system/
  boot/
    default.nix
    kernel.nix
    loader.nix
  core/
    cachix.nix
    default.nix
    lix.nix
    nix-ld.nix
    nix-package-management.nix
    nix-tools.nix
    system.nix
  hardware/
    amd.nix
    bluetooth.nix
    default.nix
    graphics.nix
    i2c.nix
    input.nix
    nvidia.nix
    video.nix
  networking/
    default.nix
    firewall.nix
    networkmanager.nix
    xdg-portal.nix
  programs/
    default.nix
    hyprland.nix
    obs.nix
  security/
    default.nix
    polkit.nix
    rtkit.nix
    sudo.nix
  services/
    audio.nix
    dbus.nix
    default.nix
    mediamtx.nix
    scx.nix
  users/
    accounts.nix
    default.nix
  virtualization/
    android.nix
    containers.nix
    default.nix
  default.nix
.gitignore
flake.lock
flake.nix
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".claude/settings.local.json">
{
  "permissions": {
    "allow": [
      "mcp__Filesystem__search_files",
      "mcp__Filesystem__list_directory",
      "mcp__Filesystem__directory_tree",
      "mcp__Filesystem__read_file",
      "mcp__Nixos_MCP__nixos_search",
      "mcp__Filesystem__write_file",
      "Bash(alejandra:*)",
      "Bash(git add:*)",
      "Bash(nh os switch:*)",
      "Bash(sudo systemctl status:*)",
      "Bash(sudo ss:*)",
      "Bash(sudo journalctl:*)",
      "Bash(curl:*)",
      "Bash(sudo cat:*)",
      "mcp__Filesystem__edit_file",
      "Bash(timeout 5 curl -I http://localhost:8888/test/index.m3u8)",
      "Bash(echo:*)",
      "Bash(git clone:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "mcp__Filesystem__read_multiple_files",
      "Bash(journalctl:*)",
      "Bash(ffmpeg:*)",
      "Bash(pkill:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(nvim:*)",
      "Bash(timeout 10s nvim:*)",
      "Bash(tree-sitter:*)",
      "mcp__Filesystem__move_file",
      "mcp__GitHub_Repo_MCP__getRepoFile",
      "mcp__Filesystem__create_directory",
      "Bash(nix-prefetch-github:*)",
      "Bash(git checkout:*)",
      "Bash(systemctl:*)",
      "Bash(nix flake show:*)",
      "Bash(systemd-tmpfiles:*)",
      "Bash(cat:*)",
      "Bash(mkdir:*)",
      "Bash(hostname)",
      "Bash(discord-canary:*)",
      "Bash(source:*)",
      "Bash(alias ytmp3)",
      "Bash(sudo:*)",
      "Bash(ln:*)",
      "Bash(hyprctl:*)",
      "Bash(git ls-tree:*)",
      "mcp__Nixos_MCP__nixos_info",
      "Bash(rm:*)",
      "mcp__Filesystem__list_allowed_directories",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(coredumpctl info:*)",
      "Bash(mako:*)",
      "Bash(export XCURSOR_SIZE=24)",
      "Bash(cp:*)",
      "Bash(quickshell:*)",
      "Bash(timeout:*)",
      "Bash(QT_LOGGING_RULES=\"*=true\" quickshell 2 >& 1)",
      "WebFetch(domain:codeberg.org)",
      "Bash(nix-instantiate:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(claude mcp add:*)",
      "mcp__Gemini_MCP__ask-gemini",
      "Bash(gemini config:*)",
      "Bash(npx:*)",
      "mcp__Gemini_MCP__Ping",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(claude config --help)",
      "Bash(true)",
      "Bash(strace:*)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(xdg-mime query default:*)",
      "Bash(claude --version)",
      "Bash(update-alternatives:*)",
      "Bash(update-desktop-database:*)",
      "Bash(claude)",
      "Bash(readlink:*)",
      "Bash(declare:*)",
      "Bash(cursor:*)",
      "Bash(env)",
      "Bash(temprun xdg-ninja:*)",
      "Bash(mv:*)",
      "Bash(git rm:*)",
      "Bash(exec zsh)",
      "Bash(ytm4a:*)",
      "Bash(nix search:*)"
    ],
    "deny": []
  }
}
</file>

<file path="home/core/appearance.nix">
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üé® APPEARANCE MODULE üé® ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê#
{
  config,
  lib,
  ...
}: let
  inherit (config.modules) options;
  cfg = config.home.core.appearance;
  t = lib.types;
in {
  options.home.core.appearance = {
    enable = lib.mkEnableOption "appearance settings";

    # Font configuration using a submodule; supports both main and fallback fonts.
    fonts = lib.mkOption {
      type = t.submodule {
        options = {
          # 'main': Primary fonts specified as a list of attribute sets with 'package' and 'name' fields.
          main = lib.mkOption {
            type = t.listOf (t.submodule {
              options = {
                package = lib.mkOption {
                  type = t.package;
                  description = "Font package";
                };
                name = lib.mkOption {
                  type = t.str;
                  description = "Font name";
                };
              };
            });
            description = "List of font configurations for main fonts";
          };
          # 'fallback': Fallback fonts if the main fonts are unavailable, defaults to an empty list.
          fallback = lib.mkOption {
            type = t.listOf (t.submodule {
              options = {
                package = lib.mkOption {
                  type = t.package;
                  description = "Font package";
                };
                name = lib.mkOption {
                  type = t.str;
                  description = "Font name";
                };
              };
            });
            default = [];
            description = "List of font configurations for fallback fonts";
          };
        };
      };
      description = "System font configuration";
    };

    # Base font size used as the reference for scaling other UI elements.
    baseFontSize = lib.mkOption {
      type = t.int;
      default = 12;
      description = "Base font size that other UI elements should scale from";
    };

    # The size of the mouse/system cursor.
    cursorSize = lib.mkOption {
      type = t.int;
      default = 24;
      description = "Size of the system cursor";
    };

    # The system's Display DPI setting to determine scaling and clarity.
    dpi = lib.mkOption {
      type = t.int;
      default = 96;
      description = "Display DPI setting for the system";
    };

    # Global animation settings for all applications
    animations = lib.mkOption {
      type = t.submodule {
        options = {
          enable = lib.mkOption {
            type = t.bool;
            default = true;
            description = "Whether to enable animations globally across all applications";
          };
        };
      };
      default = {};
      description = "Global animation configuration for the system";
    };
  };

  config = lib.mkIf cfg.enable {
    # You can add any implementation details here if needed
  };
}
</file>

<file path="home/core/defaults.nix">
###############################################################################
# Default Applications Module
# Default application settings for desktop integration
###############################################################################
{
  config,
  lib,
  ...
}: {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.core.defaults = {
    browser = lib.mkOption {
      type = lib.types.str;
      default = "firefox";
      description = "Default web browser";
    };

    editor = lib.mkOption {
      type = lib.types.str;
      default = "nvim";
      description = "Default text editor";
    };

    ide = lib.mkOption {
      type = lib.types.str;
      default = "cursor";
      description = "Default IDE";
    };

    terminal = lib.mkOption {
      type = lib.types.str;
      default = "foot";
      description = "Default terminal emulator";
    };

    fileManager = lib.mkOption {
      type = lib.types.str;
      default = "pcmanfm";
      description = "Default file manager";
    };

    launcher = lib.mkOption {
      type = lib.types.str;
      default = "foot -a 'launcher' $HOME/.config/scripts/sway-launcher-desktop.sh";
      description = "Default application launcher";
    };

    discord = lib.mkOption {
      type = lib.types.str;
      default = "discord-canary";
      description = "Default Discord client";
    };

    archiveManager = lib.mkOption {
      type = lib.types.str;
      default = "7z";
      description = "Default archive manager";
    };

    imageViewer = lib.mkOption {
      type = lib.types.str;
      default = "imv";
      description = "Default image viewer";
    };

    mediaPlayer = lib.mkOption {
      type = lib.types.str;
      default = "mpv";
      description = "Default media player";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = {
    # No packages or files needed - this is just option definitions
  };
}
</file>

<file path="home/core/packages.nix">
###############################################################################
# Core Packages Module (Maid Version)
# Provides essential packages and default application configurations
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.core.packages;

  # Base packages all users should have
  basePackages = with pkgs; [
    # Essential CLI tools
    git
    curl
    wget
    cachix
    unzip
    bash
    lsd
    alejandra
    tree
    bottom
    psmisc
    kitty
    # System interaction
    dconf
    lm_sensors
    networkmanager
  ];
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.core.packages = {
    enable = lib.mkEnableOption "core packages and base system tools";
    extraPackages = lib.mkOption {
      type = lib.types.listOf lib.types.package;
      default = [];
      description = "Additional packages to install";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid.packages = basePackages ++ cfg.extraPackages;
  };
}
</file>

<file path="home/core/user.nix">
###############################################################################
# User Configuration Module
# User-specific packages and settings
###############################################################################
{
  config,
  lib,
  ...
}: let
  cfg = config.home.core.user;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.core.user = {
    enable = lib.mkEnableOption "user configuration (packages and bookmarks)";

    packages = lib.mkOption {
      type = lib.types.listOf lib.types.package;
      default = [];
      description = "List of additional user-specific packages";
    };

    bookmarks = lib.mkOption {
      type = lib.types.listOf lib.types.str;
      default = [];
      description = "GTK bookmarks for file manager";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    # No packages or files needed - this is just option definitions
  };
}
</file>

<file path="home/dev/nvim/options.nix">
###############################################################################
# Neovim Module Options
###############################################################################
{lib, ...}: {
  options.home.dev.nvim = {
    enable = lib.mkEnableOption "Enhanced Neovim with MNW wrapper";
    neovide = lib.mkEnableOption "Neovide GUI for Neovim";
  };
}
</file>

<file path="home/dev/cursor-ide.nix">
###############################################################################
# Cursor IDE Development Module (Maid Version)
# Installs Cursor IDE using nix-maid package management
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.dev.cursor-ide;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.dev.cursor-ide = {
    enable = lib.mkEnableOption "Cursor IDE";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      code-cursor
    ];
  };
}
</file>

<file path="home/dev/docker.nix">
###############################################################################
# Docker Development Environment (Maid Version)
# Installs Docker tools and provides convenient aliases
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.dev.docker;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.dev.docker = {
    enable = lib.mkEnableOption "docker development environment";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = with pkgs; [
        docker
        docker-compose
        docker-buildx
        docker-credential-helpers
      ];

      ###########################################################################
      # Configuration Files
      ###########################################################################
      file.home = {
        # Docker configuration
        ".docker/config.json".text = builtins.toJSON {
          credsStore = "pass";
          currentContext = "default";
          plugins = {};
        };
      };
    };
  };
}
</file>

<file path="home/dev/latex.nix">
###############################################################################
# LaTeX Development Module (Maid Version)
# Provides LaTeX development environment with essential packages and editors
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.dev.latex;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.dev.latex = {
    enable = lib.mkEnableOption "LaTeX development environment";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      # LaTeX Distribution
      texliveFull # Comprehensive TeX Live distribution

      # LaTeX Editors
      texstudio # Feature-rich LaTeX editor

      # Additional Tools
      tectonic
    ];
  };
}
</file>

<file path="home/dev/npm.nix">
###############################################################################
# Node.js & NPM Configuration (Maid Version)
# Configures Node.js runtime and NPM package management
# - XDG compliance for NPM directories
# - Global package installation support
# - Proper environment variable configuration
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.dev.npm;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.dev.npm = {
    enable = lib.mkEnableOption "Node.js and NPM configuration";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = with pkgs; [
        nodejs_20
      ];

      ###########################################################################
      # Configuration Files
      ###########################################################################
      file = {
        # NPM global config - use XDG directories
        xdg_config.".config/npm/npmrc".text = ''
          prefix=$HOME/.local/share/npm
          cache={{xdg_cache_home}}/npm
          init-module=$HOME/.config/npm/config/npm-init.js
          store-dir={{xdg_cache_home}}/pnpm/store
        '';

        # NPM setup script
        home.".local/share/bin/npm-setup" = {
          text = ''
            #!/bin/bash
            # Set up NPM directories
            mkdir -p $HOME/.local/share/npm
            mkdir -p {{xdg_cache_home}}/npm
            mkdir -p $HOME/.config/npm/config
            mkdir -p {{xdg_cache_home}}/pnpm/store
            mkdir -p "$XDG_RUNTIME_DIR/npm"
          '';
          executable = true;
        };
      };

      ###########################################################################
      # Directory Setup via tmpfiles
      ###########################################################################
      systemd.tmpfiles.dynamicRules = [
        "d {{home}}/.local/share/npm 0755 {{user}} {{group}} - -"
        "d {{xdg_cache_home}}/npm 0755 {{user}} {{group}} - -"
        "d {{home}}/.config/npm/config 0755 {{user}} {{group}} - -"
        "d {{xdg_cache_home}}/pnpm/store 0755 {{user}} {{group}} - -"
        "d {{xdg_runtime_dir}}/npm 0755 {{user}} {{group}} - -"
      ];
    };
  };
}
</file>

<file path="home/dev/nvim.nix">
###############################################################################
# Enhanced Neovim Configuration with MNW + nix-maid
# Modular configuration for modern Neovim development environment
###############################################################################
{...}: {
  imports = [./nvim];
}
</file>

<file path="home/gaming/balatro/npins/default.nix">
/*
This file is provided under the MIT licence:

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
# Generated by npins. Do not modify; will be overwritten regularly
let
  data = builtins.fromJSON (builtins.readFile ./sources.json);
  inherit (data) version;

  # https://github.com/NixOS/nixpkgs/blob/0258808f5744ca980b9a1f24fe0b1e6f0fecee9c/lib/lists.nix#L295
  range = first: last:
    if first > last
    then []
    else builtins.genList (n: first + n) (last - first + 1);

  # https://github.com/NixOS/nixpkgs/blob/0258808f5744ca980b9a1f24fe0b1e6f0fecee9c/lib/strings.nix#L257
  stringToCharacters = s: map (p: builtins.substring p 1 s) (range 0 (builtins.stringLength s - 1));

  # https://github.com/NixOS/nixpkgs/blob/0258808f5744ca980b9a1f24fe0b1e6f0fecee9c/lib/strings.nix#L269
  stringAsChars = f: s: concatStrings (map f (stringToCharacters s));

  concatStrings = builtins.concatStringsSep "";

  # If the environment variable NPINS_OVERRIDE_${name} is set, then use
  # the path directly as opposed to the fetched source.
  # (Taken from Niv for compatibility)
  mayOverride = name: path: let
    envVarName = "NPINS_OVERRIDE_${saneName}";
    saneName = stringAsChars (c:
      if (builtins.match "[a-zA-Z0-9]" c) == null
      then "_"
      else c)
    name;
    ersatz = builtins.getEnv envVarName;
  in
    if ersatz == ""
    then path
    else
      # this turns the string into an actual Nix path (for both absolute and
      # relative paths)
      builtins.trace "Overriding path of \"${name}\" with \"${ersatz}\" due to set \"${envVarName}\"" (
        if builtins.substring 0 1 ersatz == "/"
        then /. + ersatz
        else /. + builtins.getEnv "PWD" + "/${ersatz}"
      );

  mkSource = name: spec:
    assert spec ? type; let
      path =
        if spec.type == "Git"
        then mkGitSource spec
        else if spec.type == "GitRelease"
        then mkGitSource spec
        else if spec.type == "PyPi"
        then mkPyPiSource spec
        else if spec.type == "Channel"
        then mkChannelSource spec
        else if spec.type == "Tarball"
        then mkTarballSource spec
        else builtins.throw "Unknown source type ${spec.type}";
    in
      spec // {outPath = mayOverride name path;};

  mkGitSource = {
    repository,
    revision,
    url ? null,
    submodules,
    hash,
    ...
  }:
    assert repository ? type;
    # At the moment, either it is a plain git repository (which has an url), or it is a GitHub/GitLab repository
    # In the latter case, there we will always be an url to the tarball
      if url != null && !submodules
      then
        builtins.fetchTarball {
          inherit url;
          sha256 = hash; # FIXME: check nix version & use SRI hashes
        }
      else let
        url =
          if repository.type == "Git"
          then repository.url
          else if repository.type == "GitHub"
          then "https://github.com/${repository.owner}/${repository.repo}.git"
          else if repository.type == "GitLab"
          then "${repository.server}/${repository.repo_path}.git"
          else throw "Unrecognized repository type ${repository.type}";
        urlToName = url: rev: let
          matched = builtins.match "^.*/([^/]*)(\\.git)?$" url;

          short = builtins.substring 0 7 rev;

          appendShort =
            if (builtins.match "[a-f0-9]*" rev) != null
            then "-${short}"
            else "";
        in "${
          if matched == null
          then "source"
          else builtins.head matched
        }${appendShort}";
        name = urlToName url revision;
      in
        builtins.fetchGit {
          rev = revision;
          inherit name;
          # hash = hash;
          inherit url submodules;
        };

  mkPyPiSource = {
    url,
    hash,
    ...
  }:
    builtins.fetchurl {
      inherit url;
      sha256 = hash;
    };

  mkChannelSource = {
    url,
    hash,
    ...
  }:
    builtins.fetchTarball {
      inherit url;
      sha256 = hash;
    };

  mkTarballSource = {
    url,
    locked_url ? url,
    hash,
    ...
  }:
    builtins.fetchTarball {
      url = locked_url;
      sha256 = hash;
    };
in
  if version == 5
  then builtins.mapAttrs mkSource data.pins
  else throw "Unsupported format version ${toString version} in sources.json. Try running `npins upgrade`"
</file>

<file path="home/gaming/balatro/npins/sources.json">
{
  "pins": {
    "Aura": {
      "type": "Git",
      "repository": {
        "type": "GitHub",
        "owner": "SpectralPack",
        "repo": "Aura"
      },
      "branch": "main",
      "submodules": false,
      "revision": "dbb6496d163d15e86b0afb6879d32b891164af05",
      "url": "https://github.com/SpectralPack/Aura/archive/dbb6496d163d15e86b0afb6879d32b891164af05.tar.gz",
      "hash": "1414yivy6rgwgl9mpkps6pnm5mzl2wj7j2fczia6n7020m2dnqg1"
    },
    "Balatro-Stickers-Always-Shown": {
      "type": "GitRelease",
      "repository": {
        "type": "GitHub",
        "owner": "SirMaiquis",
        "repo": "Balatro-Stickers-Always-Shown"
      },
      "pre_releases": false,
      "version_upper_bound": null,
      "release_prefix": null,
      "submodules": false,
      "version": "v1.4.0",
      "revision": "8bc6d74796aee5e78e817591ea42575099519964",
      "url": "https://api.github.com/repos/SirMaiquis/Balatro-Stickers-Always-Shown/tarball/v1.4.0",
      "hash": "0gsdbn02yg87msvxalz5znpznws6x5n81gyfl5ir29ivn41sr85d"
    },
    "HandyBalatro": {
      "type": "GitRelease",
      "repository": {
        "type": "GitHub",
        "owner": "SleepyG11",
        "repo": "HandyBalatro"
      },
      "pre_releases": false,
      "version_upper_bound": null,
      "release_prefix": null,
      "submodules": false,
      "version": "v1.4.2",
      "revision": "65572c5c54162944d55671358adbbebff58c4699",
      "url": "https://api.github.com/repos/SleepyG11/HandyBalatro/tarball/v1.4.2",
      "hash": "080qhrqp7bh7ckxwhvkrpiqpzq41qijn92swvqp423cr558iwjv3"
    },
    "cardsleeves": {
      "type": "Git",
      "repository": {
        "type": "Git",
        "url": "https://github.com/larswijn/CardSleeves.git"
      },
      "branch": "main",
      "submodules": false,
      "revision": "4250089ca52d4cb2d3cf6c2fd7d0d6ae66428650",
      "url": null,
      "hash": "0szl3b5j7zcjq4kh95prxnc34x0b6bgva244zbshcxd49yf6xfjp"
    },
    "cryptid": {
      "type": "Git",
      "repository": {
        "type": "Git",
        "url": "https://github.com/SpectralPack/Cryptid.git"
      },
      "branch": "main",
      "submodules": false,
      "revision": "1da26300f239d77be0a9ffd24a75a9f7b6af724a",
      "url": null,
      "hash": "1mqlq8ykw7v1pl4dlyliw6820aaxlx2djv7ddhqpayj7dyjs21w3"
    },
    "jokerdisplay": {
      "type": "Git",
      "repository": {
        "type": "Git",
        "url": "https://github.com/nh6574/JokerDisplay.git"
      },
      "branch": "main",
      "submodules": false,
      "revision": "f29d18bdfbfc02f831f1e1e5292df72b9c263add",
      "url": null,
      "hash": "0zrn87n95x54w69qc6ly1nwkccpwfyipxjbvpvqfgvngf71i0m8d"
    },
    "multiplayer": {
      "type": "Git",
      "repository": {
        "type": "Git",
        "url": "https://github.com/Balatro-Multiplayer/BalatroMultiplayer.git"
      },
      "branch": "main",
      "submodules": false,
      "revision": "495f515806f0f07a8668a6fa3221ce4cc183356b",
      "url": null,
      "hash": "1b408g8y40s5386wcjyrnrxj8wn47g0160gz2ff374ilhjicdgmv"
    },
    "nixpkgs": {
      "type": "Channel",
      "name": "nixpkgs-unstable",
      "url": "https://releases.nixos.org/nixpkgs/nixpkgs-25.11pre805949.bdac72d387dc/nixexprs.tar.xz",
      "hash": "1qkzpspsc5c7m4sz499f9ixnavzi7bpild068542vssrahh5v9q3"
    },
    "pokermon": {
      "type": "Git",
      "repository": {
        "type": "Git",
        "url": "https://github.com/InertSteak/Pokermon.git"
      },
      "branch": "main",
      "submodules": false,
      "revision": "403a1ca7a74f38de522ee546a0efb0a01c78a9db",
      "url": null,
      "hash": "1z7fnlgkzvya2cvwgxdpggbybdnlw740vjlmx20qs82pb1rx1pbh"
    },
    "steamodded": {
      "type": "Git",
      "repository": {
        "type": "Git",
        "url": "https://github.com/Steamodded/smods.git"
      },
      "branch": "main",
      "submodules": false,
      "revision": "b163d0c0a04bdbc97559939952660cb3f185bb93",
      "url": null,
      "hash": "1da439lfkwax1xc229ljp6mcz4whdnd6zdqv95xv05sb86g10kik"
    },
    "steamodded-examples": {
      "type": "Git",
      "repository": {
        "type": "Git",
        "url": "https://github.com/Steamodded/examples.git"
      },
      "branch": "master",
      "submodules": false,
      "revision": "d43316d97bc927f3de431dd84c0283d41e69761a",
      "url": null,
      "hash": "0pcw16vmx3iiij562fd6xz57szrgrfhi100ykhfgaxbkh4jzdh6w"
    },
    "talisman": {
      "type": "Git",
      "repository": {
        "type": "Git",
        "url": "https://github.com/SpectralPack/Talisman.git"
      },
      "branch": "main",
      "submodules": false,
      "revision": "f2911d467e660033c4d62c9f6aade2edb7ecc155",
      "url": null,
      "hash": "0y1x8mn61my12vy4h77vvyhvkm04sww6ivgvy458ddl6m11bzxlj"
    }
  },
  "version": 5
}
</file>

<file path="home/gaming/balatro/installation.nix">
###############################################################################
# Balatro Mods Installation Module - Nix-Maid Version
# GitHub repos managed by npins, files managed by nix-maid
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.gaming.balatro;

  # Import npins sources for GitHub repositories
  sources = import ./npins;

  # Available mods - much simpler than before!
  availableMods = {
    steamodded = {
      src = sources.steamodded;
      name = "smods";
    };
    talisman = {
      src = sources.talisman;
      name = "Talisman";
    };
    cryptid = {
      src = sources.cryptid;
      name = "Cryptid";
    };
    multiplayer = {
      src = sources.multiplayer;
      name = "BalatroMultiplayer";
    };
    cardsleeves = {
      src = sources.cardsleeves;
      name = "CardSleeves";
    };
    jokerdisplay = {
      src = sources.jokerdisplay;
      name = "JokerDisplay-1.8.4.1";
    };
    pokermon = {
      src = sources.pokermon;
      name = "Pokermon";
    };
    stickersalwaysshown = {
      src = sources."Balatro-Stickers-Always-Shown";
      name = "StickersAlwaysShown";
    };
    handybalatro = {
      src = sources."HandyBalatro";
      name = "HandyBalatro";
    };
    aura = {
      src = sources."Aura";
      name = "Aura";
    };
    morespeeds = {
      # This is handled via files, not src
      name = "MoreSpeeds.lua";
    };
  };

  # Get enabled mods based on the list (excluding morespeeds which is handled via files)
  enabledMods = lib.filterAttrs (name: _mod: lib.elem name cfg.enabledMods && name != "morespeeds") availableMods;

  # Lovely Injector using fetchzip (no manual unzip needed!)
  lovelyInjectorPackage = pkgs.fetchzip {
    url = "https://github.com/ethangreen-dev/lovely-injector/releases/download/v0.7.1/lovely-x86_64-pc-windows-msvc.zip";
    sha256 = "sha256-KjWSJugIfUOfWHZctEDKWGvNERXDzjW1+Ty5kJtEJlw=";
    stripRoot = false;
  };
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.gaming.balatro = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Enable Balatro mod management";
    };

    enableLovelyInjector = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = ''
        Enable Lovely Injector - a runtime lua injector for L√ñVE 2D games.
        This downloads and installs version.dll to enable mod loading in Balatro.
        Required for most Balatro mods to work.
      '';
    };

    enabledMods = lib.mkOption {
      type = lib.types.listOf (lib.types.enum (lib.attrNames availableMods));
      default = [];
      example = ["steamodded" "talisman" "cryptid" "multiplayer" "cardsleeves" "jokerdisplay" "pokermon" "stickersalwaysshown" "handybalatro" "aura" "morespeeds"];
      description = ''
        List of mod names to enable. Available mods:
        - steamodded: Steamodded/smods (core modding framework)
        - talisman: SpectralPack/Talisman
        - cryptid: SpectralPack/Cryptid
        - multiplayer: Balatro-Multiplayer/BalatroMultiplayer
        - cardsleeves: larswijn/CardSleeves
        - jokerdisplay: nh6574/JokerDisplay (shows joker calculations)
        - pokermon: InertSteak/Pokermon (Pokemon-themed jokers)
        - stickersalwaysshown: SirMaiquis/Balatro-Stickers-Always-Shown (keeps stickers visible on jokers)
        - handybalatro: SleepyG11/HandyBalatro (Quality of Life controls and shortcuts)
        - aura: SpectralPack/Aura (visual enhancement mod)
        - morespeeds: MoreSpeeds.lua (custom speed options)
      '';
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Balatro Mods and Lovely Injector Files
    ###########################################################################
    users.users.y0usaf.maid.file.home =
      # MoreSpeeds mod content
      (lib.optionalAttrs (lib.elem "morespeeds" cfg.enabledMods) {
        ".local/share/Steam/steamapps/compatdata/2379780/pfx/drive_c/users/steamuser/AppData/Roaming/Balatro/Mods/MoreSpeeds.lua".text = ''
          --- STEAMODDED HEADER
          --- MOD_NAME: More Speed
          --- MOD_ID: MoreSpeed
          --- MOD_AUTHOR: [Steamo]
          --- MOD_DESCRIPTION: More Speed options!
          --- This mod is deprecated, use Nopeus instead: https://github.com/jenwalter666/JensBalatroCollection/tree/main/Nopeus

          ----------------------------------------------
          ------------MOD CODE -------------------------



          local setting_tabRef = G.UIDEF.settings_tab
          function G.UIDEF.settings_tab(tab)
              local setting_tab = setting_tabRef(tab)

              if tab == 'Game' then
                  local speeds = create_option_cycle({label = localize('b_set_gamespeed'), scale = 0.8, options = {0.25, 0.5, 1, 2, 3, 4, 8, 16, 32, 64, 128, 1000}, opt_callback = 'change_gamespeed', current_option = (
                      G.SETTINGS.GAMESPEED == 0.25 and 1 or
                      G.SETTINGS.GAMESPEED == 0.5 and 2 or
                      G.SETTINGS.GAMESPEED == 1 and 3 or
                      G.SETTINGS.GAMESPEED == 2 and 4 or
                      G.SETTINGS.GAMESPEED == 3 and 5 or
                      G.SETTINGS.GAMESPEED == 4 and 6 or
                      G.SETTINGS.GAMESPEED == 8 and 7 or
                      G.SETTINGS.GAMESPEED == 16 and 8 or
                      G.SETTINGS.GAMESPEED == 32 and 9 or
                      G.SETTINGS.GAMESPEED == 64 and 10 or
                      G.SETTINGS.GAMESPEED == 128 and 11 or
                      G.SETTINGS.GAMESPEED == 1000 and 12 or
                      3 -- Default to 1 if none match, adjust as necessary
                  )})

                  local free_speed_text = {
                      n = G.UIT.R,
                      config = {
                          align = "cm",
                          id = "free_speed_text"
                      },
                      nodes = {
                          {
                              n = G.UIT.T,
                              config = {
                                  align = "cm",
          						scale = 0.3 * 1.5,
          						text = "Free Speed",
          						colour = G.C.UI.TEXT_LIGHT
                              }
                          }
                      }
                  }

                  local free_speed_box = {
                      n = G.UIT.R,
                      config = {
                          align = "cm",
                          padding = 0.05,
                          id = "free_speed_box"
                      },
                      nodes = {
                          create_text_input({
                              hooked_colour = G.C.RED,
                              colour = G.C.RED,
                              all_caps = true,
                              align = "cm",
                              w = 2,
                              max_length = 4,
                              prompt_text = 'Custom Speed',
                              ref_table = G.SETTINGS.COMP,
                              ref_value = 'name'
                          })
                      }
                  }
                  setting_tab.nodes[1] = speeds
                  -- TODO fix this
                  --table.insert(setting_tab.nodes, 2, free_speed_text)
                  --table.insert(setting_tab.nodes, 3, free_speed_box)
              end
              return setting_tab
          end

          ----------------------------------------------
          ------------MOD CODE END----------------------
        '';
      })
      # Enabled mod directories as symlinks
      // (lib.mapAttrs' (
          name: mod:
            lib.nameValuePair
            ".local/share/Steam/steamapps/compatdata/2379780/pfx/drive_c/users/steamuser/AppData/Roaming/Balatro/Mods/${mod.name}"
            {source = mod.src;}
        )
        enabledMods)
      # Lovely Injector version.dll
      // (lib.optionalAttrs cfg.enableLovelyInjector {
        ".local/share/Steam/steamapps/common/Balatro/version.dll".source = "${lovelyInjectorPackage}/version.dll";
      });
  };
}
</file>

<file path="home/gaming/emulation/cemu.nix">
###############################################################################
# Cemu Emulator Module - Nix-Maid Version
# Configuration for Wii U emulation
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.gaming.emulation.wii-u;
in {
  options.home.gaming.emulation.wii-u = {
    enable = lib.mkEnableOption "Wii U emulation via Cemu";
  };

  config = lib.mkIf cfg.enable {
    users.users.y0usaf.maid.packages = [
      pkgs.cemu
    ];
  };
}
</file>

<file path="home/gaming/emulation/dolphin.nix">
###############################################################################
# Dolphin Emulator Module - Nix-Maid Version
# Configuration for GameCube and Wii emulation
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.gaming.emulation.gcn-wii;
in {
  options.home.gaming.emulation.gcn-wii = {
    enable = lib.mkEnableOption "GameCube and Wii emulation via Dolphin";
  };

  config = lib.mkIf cfg.enable {
    users.users.y0usaf.maid.packages = [
      pkgs.dolphin-emu
    ];
  };
}
</file>

<file path="home/gaming/marvel-rivals/engine.nix">
###############################################################################
# Marvel Rivals Engine Configuration - Nix-Maid Version
# Optimizes graphics settings for better performance
###############################################################################
{
  config,
  lib,
  ...
}: let
  cfg = config.home.gaming.marvel-rivals.engine;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.gaming.marvel-rivals.engine = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Enable Marvel Rivals engine configuration";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    users.users.y0usaf.maid.file.home.".local/share/Steam/steamapps/compatdata/2767030/pfx/drive_c/users/steamuser/AppData/Local/Marvel/Saved/Config/Windows/Engine.ini".text = lib.generators.toINI {} {
      "SystemSettings" = {
        "r.LevelStreamingDistanceScale" = "1";
        "r.ViewDistanceScale" = "1";
        "r.LandscapeLODBias" = "0";
        "r.LandscapeLODDistributionScale" = "1";
        "r.LandscapeLOD0DistributionScale" = "1";
        "r.LODFadeTime" = "2";
        "r.UITextureLODBias" = "-1";
        "r.Streaming.Boost" = "1";
        "r.TextureStreaming" = "1";
        "r.Streaming.ScaleTexturesByGlobalMyBias" = "1";
        "r.Streaming.LimitPoolSizeToVRAM" = "0";
        "r.DefaultFeature.AmbientOcclusion" = "False";
        "r.DefaultFeature.AmbientOcclusionStaticFraction" = "False";
        "r.DefaultFeature.AntiAliasing" = "0";
        "r.DefaultFeature.AutoExposure" = "True";
        "r.DefaultFeature.Bloom" = "False";
        "r.DefaultFeature.LensFlare" = "False";
        "r.DefaultFeature.MotionBlur" = "False";
        "r.DepthOfFieldQuality" = "0";
        "r.DistanceFieldAO" = "0";
        "r.EmitterSpawnRateScale" = "0";
        "r.FastBlurThreshold" = "0";
        "r.LensFlareQuality" = "0";
        "r.MaterialQualityLevel" = "1";
        "r.RefractionQuality" = "0";
        "r.SceneColorFormat" = "3";
        "r.SceneColorFringeQuality" = "0";
        "r.SeparateTranslucency" = "False";
        "r.Shadow.CSM.MaxCascades" = "1";
        "r.Shadow.CSM.TransitionScale" = "0";
        "r.Shadow.DistanceScale" = "0";
        "r.Shadow.MaxResolution" = "64";
        "r.Shadow.RadiusThreshold" = "0";
        "r.ShadowQuality" = "0";
        "r.SSR.Quality" = "0";
        "r.SSS.SampleSet" = "0";
        "r.SSS.Scale" = "0";
        "r.Fog" = "0";
        "r.PostProcessAAQuality" = "0";
        "r.MotionBlurQuality" = "0";
        "r.BlurGBuffer" = "0";
        "r.MaxAnisotropy" = "0";
        "r.BloomQuality" = "0";
        "r.LightFunction" = "0";
        "r.DetailMode" = "1";
        "r.TonemapperQuality" = "0";
        "r.MaterialQuality" = "1";
        "r.DepthOfField.MaxSize" = "0";
        "r.SwitchGridShadow" = "0";
        "r.Tonemapper.Sharpen" = "0.0";
        "r.AmbientOcclusionLevels" = "0";
        "r.VolumetricFog" = "0";
        "r.FogDensity" = "0";
        "r.Atmosphere" = "0";
        "r.ParticleLightQuality" = "0";
        "FX.MaxCPUParticlesPerEmitter" = "20";
        "FX.MaxGPUParticlesSpawnedPerFrame" = "0";
        "r.ParticleLODBias" = "3";
      };

      "/script/engine.renderersettings" = {
        "r.DefaultFeature.LensFlare" = "False";
        "r.DefaultFeature.DepthOfField" = "False";
        "r.DefaultFeature.AmbientOcclusion" = "False";
        "r.DefaultFeature.AmbientOcclusionStaticFraction" = "False";
        "r.BloomQuality" = "0";
        "r.MotionBlurQuality" = "0";
        "r.FastBlurThreshold" = "0";
        "r.TranslucencyVolumeBlur" = "0";
        "r.AmbientOcclusionLevels" = "0";
        "r.AmbientOcclusionRadiusScale" = "0";
        "r.DepthofFieldQuality" = "0";
        "r.DefaultFeature.AntiAliasing" = "0";
        "r.DefaultFeature.Bloom" = "False";
        "r.MobileHDR" = "False";
        "r.Shadow.MaxResolution" = "0";
        "r.Shadow.MaxCSMResolution" = "0";
        "r.Streaming.Boost" = "0.1";
        "r.SSR" = "0";
        "r.PostProcessAAQuality" = "0";
        "r.BlurGBuffer" = "0";
        "r.Fog" = "0";
        "r.TranslucentLightingVolume" = "0";
        "r.TriangleOrderOptimization" = "1";
        "r.Tonemapper.GrainQuantization" = "0";
        "r.TonemapperGamma" = "3";
        "r.Atmosphere" = "0";
        "r.EyeAdaptationQuality" = "1";
        "r.FullScreenMode" = "0";
        "r.IndirectLightingCache" = "0";
        "r.LightFunctionQuality" = "0";
        "r.LightShafts" = "0";
        "r.MaxCSMRadiusToAllowPerObjectShadows" = "0.01";
        "r.MipMapLODBias" = "1";
        "r.ReflectionEnvironment" = "0";
        "r.Shadow.RadiusThresholdRSM" = "0";
        "r.Shadow.TexelsPerPixel" = "0";
        "r.SimpleDynamicLighting" = "0";
        "r.UniformBufferPooling" = "1";
        "r.OptimizeForUAVPerformance" = "0";
        "r.Shadow.PerObject" = "1";
        "r.AllowLandscapeShadows" = "0";
        "r.AllowStaticLighting" = "0";
        "r.DFShadowScatterTileCulling" = "0";
        "r.ParallelShadows" = "0";
        "r.Shadow.FadeExponent" = "1";
        "r.Shadow.PreshadowExpand" = "-1";
        "r.Shadow.Preshadows" = "0";
        "r.TiledDeferredShading.MinimumCount" = "0";
        "r.AOApplyToStaticIndirect" = "0";
        "r.ContactShadows" = "0";
        "r.Shadow.PerObjectCastDistanceRadiusScale" = "0.001";
        "r.Shadow.CachePreshadow" = "1";
        "r.Shadow.CachedShadowsCastFromMovablePrimitives" = "0";
        "r.RayTracing.Translucency.Shadows" = "0";
        "r.LightMaxDrawDistanceScale" = "0.01";
        "r.CapsuleDirectShadows" = "0";
        "r.CapsuleIndirectShadows" = "0";
        "r.CapsuleMaxDirectOcclusionDistance" = "0";
        "r.CapsuleMaxIndirectOcclusionDistance" = "0";
        "r.CapsuleShadows" = "0";
        "r.Mobile.Shadow.CSMShaderCullingMethod" = "0";
        "r.Shadow.LightViewConvexHullCull" = "0";
        "r.Shadow.RectLightDepthBias" = "9";
        "r.Shadow.RectLightReceiverBias" = "0";
        "r.Shadow.TransitionScale" = "9";
      };
    };
  };
}
</file>

<file path="home/gaming/marvel-rivals/gameusersettings.nix">
###############################################################################
# Marvel Rivals GameUserSettings.ini - Nix-Maid Version
# Manages the Marvel Rivals GameUserSettings.ini file
###############################################################################
{
  config,
  lib,
  ...
}: let
  cfg = config.home.gaming.marvel-rivals.gameusersettings;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.gaming.marvel-rivals.gameusersettings = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Enable Marvel Rivals GameUserSettings.ini configuration";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Marvel Rivals GameUserSettings.ini
    ###########################################################################
    users.users.y0usaf.maid.file.home.".local/share/Steam/steamapps/compatdata/2767030/pfx/drive_c/users/steamuser/AppData/Local/Marvel/Saved/Config/Windows/GameUserSettings.ini".text = lib.generators.toINI {} {
      "Internationalization" = {
        Culture = "en";
      };

      "ScalabilityGroups" = {
        "sg.ViewDistanceQuality" = "1";
        "sg.ShadowQuality" = "0";
        "sg.PostProcessQuality" = "0";
        "sg.TextureQuality" = "0";
        "sg.EffectsQuality" = "0";
        "sg.FoliageQuality" = "0";
        "sg.ShadingQuality" = "0";
        "sg.ReflectionQuality" = "0";
        "sg.GlobalIlluminationQuality" = "0";
      };

      "/Script/Engine.GameUserSettings" = {
        bUseDesiredScreenHeight = "False";
      };

      "/Script/Marvel.MarvelGameUserSettings" = {
        AntiAliasingSuperSamplingMode = "4";
        SuperSamplingQuality = "4";
        CASSharpness = "0.000000";
        ScreenPercentage = "100.000000";
        VoiceLanguage = "";
        bNvidiaReflex = "False";
        bXeLowLatency = "False";
        bDlssFrameGeneration = "False";
        bFSRFrameGeneration = "False";
        bXeFrameGeneration = "False";
        MonitorIndex = "0";
        bEnableConsole120Fps = "False";
        bUseVSync = "False";
        bUseDynamicResolution = "False";
        ResolutionSizeX = "2543";
        ResolutionSizeY = "1428";
        LastUserConfirmedResolutionSizeX = "2543";
        LastUserConfirmedResolutionSizeY = "1428";
        WindowPosX = "6";
        WindowPosY = "6";
        FullscreenMode = "2";
        LastConfirmedFullscreenMode = "2";
        PreferredFullscreenMode = "1";
        Version = "22";
        AudioQualityLevel = "0";
        LastConfirmedAudioQualityLevel = "0";
        FrameRateLimit = "0.000000";
        DesiredScreenWidth = "2560";
        DesiredScreenHeight = "1440";
        LastUserConfirmedDesiredScreenWidth = "2560";
        LastUserConfirmedDesiredScreenHeight = "1440";
        LastRecommendedScreenWidth = "-1.000000";
        LastRecommendedScreenHeight = "-1.000000";
        LastCPUBenchmarkResult = "-1.000000";
        LastGPUBenchmarkResult = "-1.000000";
        LastGPUBenchmarkMultiplier = "1.000000";
        bUseHDRDisplayOutput = "False";
        HDRDisplayOutputNits = "1000";
        bAMDAntiLag2 = "False";
        DlssFrameGenerationCount = "1";
      };

      "CareerHighLight" = {
        HighLightVideoSavedPath = "C:\\users\\steamuser\\Videos\\MarvelRivals\\Highlights";
      };
    };
  };
}
</file>

<file path="home/gaming/marvel-rivals/marvelusersettings.nix">
###############################################################################
# Marvel Rivals MarvelUserSettings.ini - Nix-Maid Version
# Manages the Marvel Rivals MarvelUserSettings.ini files
###############################################################################
{
  config,
  lib,
  ...
}: let
  cfg = config.home.gaming.marvel-rivals.marvelusersettings;
  # JSON settings content (shared between both file locations)
  settingsContent = ''
    {"MasterVolume": 70, "SoundEffectVolume": 100, "MusicVolume": 0, "VoiceVolume": 100, "UserControl": "{\"0\": \"{\\\"MouseHorizontalSensitivity\\\": 5.0, \\\"MouseVerticalSensitivity\\\": 5.0, \\\"CharControlInputMappings\\\": {\\\"6\\\": {\\\"PrimaryKey\\\": {\\\"Key\\\": \\\"J\\\"}}, \\\"24\\\": {\\\"PrimaryKey\\\": {\\\"Key\\\": \\\"B\\\"}}, \\\"36\\\": {\\\"PrimaryKey\\\": {\\\"Key\\\": \\\"None\\\"}}, \\\"46\\\": {\\\"PrimaryKey\\\": {\\\"Key\\\": \\\"X\\\"}}, \\\"47\\\": {\\\"PrimaryKey\\\": {\\\"Key\\\": \\\"Z\\\"}}}, \\\"AbilityUserSettingList\\\": [{\\\"SettingType\\\": 1, \\\"Key\\\": \\\"WakandaUp\\\", \\\"AbilityID\\\": 200401, \\\"bIsGamepad\\\": false, \\\"bIsDirty\\\": false, \\\"Value\\\": true}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"WakandaUp\\\", \\\"AbilityID\\\": 200401, \\\"bIsGamepad\\\": true, \\\"bIsDirty\\\": false, \\\"Value\\\": false}], \\\"HpBarVisibleRule\\\": 1}\", \"1035\": \"{\\\"AbilityUserSettingList\\\": [{\\\"SettingType\\\": 1, \\\"Key\\\": \\\"bIsHoldAbility\\\", \\\"AbilityID\\\": 103501, \\\"bIsGamepad\\\": false, \\\"bIsDirty\\\": false, \\\"Value\\\": true}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"bIsHoldSprint\\\", \\\"AbilityID\\\": 103501, \\\"bIsGamepad\\\": false, \\\"bIsDirty\\\": false, \\\"Value\\\": true}, {\\\"SettingType\\\": 0, \\\"Key\\\": \\\"WallRunMode\\\", \\\"AbilityID\\\": 103501, \\\"bIsGamepad\\\": false, \\\"bIsDirty\\\": false, \\\"Value\\\": \\\"TowardUp\\\"}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"bIsHoldAbility\\\", \\\"AbilityID\\\": 103501, \\\"bIsGamepad\\\": true, \\\"bIsDirty\\\": false, \\\"Value\\\": false}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"bIsHoldSprint\\\", \\\"AbilityID\\\": 103501, \\\"bIsGamepad\\\": true, \\\"bIsDirty\\\": false, \\\"Value\\\": false}, {\\\"SettingType\\\": 0, \\\"Key\\\": \\\"WallRunMode\\\", \\\"AbilityID\\\": 103501, \\\"bIsGamepad\\\": true, \\\"bIsDirty\\\": false, \\\"Value\\\": \\\"TowardUp\\\"}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"bIsHoldAbility\\\", \\\"AbilityID\\\": 103551, \\\"bIsGamepad\\\": false, \\\"bIsDirty\\\": false, \\\"Value\\\": true}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"UseSimpleSwing\\\", \\\"AbilityID\\\": 103551, \\\"bIsGamepad\\\": false, \\\"bIsDirty\\\": false, \\\"Value\\\": false}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"bIsHoldAbility\\\", \\\"AbilityID\\\": 103551, \\\"bIsGamepad\\\": true, \\\"bIsDirty\\\": false, \\\"Value\\\": false}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"UseSimpleSwing\\\", \\\"AbilityID\\\": 103551, \\\"bIsGamepad\\\": true, \\\"bIsDirty\\\": false, \\\"Value\\\": true}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"WakandaUp\\\", \\\"AbilityID\\\": 200401, \\\"bIsGamepad\\\": false, \\\"bIsDirty\\\": false, \\\"Value\\\": true}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"WakandaUp\\\", \\\"AbilityID\\\": 200401, \\\"bIsGamepad\\\": true, \\\"bIsDirty\\\": false, \\\"Value\\\": false}]}\", \"1045\": \"{\\\"AbilityUserSettingList\\\": [{\\\"SettingType\\\": 1, \\\"Key\\\": \\\"bIsHoldAbility\\\", \\\"AbilityID\\\": 104541, \\\"bIsGamepad\\\": false, \\\"bIsDirty\\\": false, \\\"Value\\\": false}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"bIsHoldAbility\\\", \\\"AbilityID\\\": 104541, \\\"bIsGamepad\\\": true, \\\"bIsDirty\\\": false, \\\"Value\\\": false}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"bIsHoldAbility\\\", \\\"AbilityID\\\": 104542, \\\"bIsGamepad\\\": false, \\\"bIsDirty\\\": false, \\\"Value\\\": true}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"bIsHoldAbility\\\", \\\"AbilityID\\\": 104542, \\\"bIsGamepad\\\": true, \\\"bIsDirty\\\": false, \\\"Value\\\": false}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"WakandaUp\\\", \\\"AbilityID\\\": 200401, \\\"bIsGamepad\\\": false, \\\"bIsDirty\\\": false, \\\"Value\\\": true}, {\\\"SettingType\\\": 1, \\\"Key\\\": \\\"WakandaUp\\\", \\\"AbilityID\\\": 200401, \\\"bIsGamepad\\\": true, \\\"bIsDirty\\\": false, \\\"Value\\\": false}]}\"}"
  '';
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.gaming.marvel-rivals.marvelusersettings = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Enable Marvel Rivals MarvelUserSettings.ini configuration";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Marvel Rivals MarvelUserSettings.ini files
    ###########################################################################
    users.users.y0usaf.maid.file.home = {
      # Default profile location
      ".local/share/Steam/steamapps/compatdata/2767030/pfx/drive_c/users/steamuser/AppData/Local/Marvel/Saved/Saved/Config/default/MarvelUserSetting.ini".text = settingsContent;

      # Current profile location
      ".local/share/Steam/steamapps/compatdata/2767030/pfx/drive_c/users/steamuser/AppData/Local/Marvel/Saved/Saved/Config/current/MarvelUserSetting.ini".text = settingsContent;
    };
  };
}
</file>

<file path="home/gaming/wukong/engine.nix">
###############################################################################
# Black Myth: Wukong Engine Configuration - Nix-Maid Version
# Optimizes graphics settings for better performance
###############################################################################
{
  config,
  lib,
  ...
}: let
  cfg = config.home.gaming.wukong;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.gaming.wukong = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Enable Black Myth: Wukong configuration";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    users.users.y0usaf.maid.file.home.".local/share/Steam/steamapps/compatdata/2358720/pfx/drive_c/users/steamuser/AppData/Local/b1/Saved/Config/Windows/Engine.ini".text = lib.generators.toINI {} {
      "SystemSettings" = {
        "r.DefaultFeature.AntiAliasing" = "0";
        "pp.VignetteIntensity" = "0.0";
        "r.SceneColorFringeQuality" = "0";
        "r.SceneColorFringe.Max" = "0";
        "r.DepthOfFieldQuality" = "0";
        "r.DepthOfField.DepthBlur.Amount" = "0";
        "r.Tonemapper.GrainQuantization" = "0";
        "r.FilmGrain" = "0";
        "r.Tonemapper.Quality" = "0";
        "r.BloomQuality" = "0";
        "r.MotionBlurQuality" = "0";
        "r.AmbientOcclusionLevels" = "0";
        "r.AmbientOcclusionStaticFraction" = "0";
        "r.LensFlareQuality" = "0";
        "r.SSR.Quality" = "0";
        "r.Tonemapper.Sharpen" = "1.0";
        "r.Atmosphere" = "0";
        "r.VolumetricFog" = "0";
        "r.VolumetricFog.Quality" = "0";
        "r.EyeAdaptation.MethodOverride" = "0";
        "r.DefaultFeature.LensFlare" = "0";
        "r.DefaultFeature.Bloom" = "0";
        "r.DefaultFeature.AutoExposure" = "0";
        "r.PostProcessAAQuality" = "0";
        "r.SSS.Quality" = "0";
        "r.SSS.Scale" = "0";
        "r.ChromaticAberrationStartOffset" = "0";
      };
      "/Script/Engine.InputSettings" = {
        ConsoleKey = "Tilde";
      };
    };
  };
}
</file>

<file path="home/gaming/controllers.nix">
###############################################################################
# Gaming Controllers Module - Nix-Maid Version
# Configuration for game controllers and peripherals
# - General controller support including DualSense (PS5)
# - Automatically enables system-level controller support
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.gaming.controllers;
in {
  options.home.gaming.controllers = {
    enable = lib.mkEnableOption "gaming controller support";
  };

  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Controller Packages
    ###########################################################################

    # General controller support including DualSense (PS5)
    users.users.y0usaf.maid.packages = with pkgs; [
      dualsensectl # Command-line tool for DualSense controller
      # trigger-control  # Optional GUI tool for adaptive triggers (uncomment if needed)
    ];

    ###########################################################################
    # System Integration
    # The system module will automatically enable hardware.steam-hardware.enable
    # when this option is enabled.
    ###########################################################################
  };
}
</file>

<file path="home/gaming/core.nix">
###############################################################################
# Core Gaming Module - Nix-Maid Version
# Base configuration for gaming-related software
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.gaming.core;
in {
  options.home.gaming.core = {
    enable = lib.mkEnableOption "core gaming packages";
  };

  config = lib.mkIf cfg.enable {
    users.users.y0usaf.maid.packages = with pkgs; [
      steam
      protonup-qt
      gamemode
      protontricks
      prismlauncher
    ];
  };
}
</file>

<file path="home/programs/firefox/config.nix">
###############################################################################
# Firefox Main Configuration Module
# Module options and basic configuration
###############################################################################
{
  config,
  lib,
  ...
}: {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.firefox = {
    enable = lib.mkEnableOption "Firefox browser with optimized settings";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf config.home.programs.firefox.enable {
    # This module provides the central option definition and can include
    # any shared configuration that doesn't fit into the other modules
  };
}
</file>

<file path="home/programs/firefox/default.nix">
{...}: {
  imports = [
    ./config.nix
    ./packages.nix
    ./performance.nix
    ./policies.nix
    ./ui-chrome.nix
  ];
}
</file>

<file path="home/programs/android.nix">
###############################################################################
# Android Module (Maid)
# Provides Android development and interaction tools
# - Waydroid for running Android in a container
# - Android debugging tools (adb, fastboot)
# - Screen mirroring with scrcpy
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.programs.android;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.android = {
    enable = lib.mkEnableOption "android tools and waydroid";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      ###########################################################################
      # Packages
      ###########################################################################
      packages = with pkgs; [
        waydroid
        android-tools
        scrcpy
      ];

      ###########################################################################
      # File Configuration
      ###########################################################################
      file.home = {
        ".android_env".text = ''
          # Android environment variables
          export ANDROID_HOME="$XDG_DATA_HOME/android"
          export ADB_VENDOR_KEY="$XDG_CONFIG_HOME/android"
        '';
      };

      ###########################################################################
      # Systemd Services
      ###########################################################################
      systemd.user.services = {
        waydroid-container = {
          Unit = {
            Description = "Waydroid Container";
            After = ["graphical-session.target"];
            PartOf = ["graphical-session.target"];
            Requires = ["waydroid-container.service"];
          };
          Service = {
            Type = "simple";
            Environment = [
              "WAYDROID_EXTRA_ARGS=--gpu-mode host"
              "LIBGL_DRIVER_NAME=nvidia"
              "GBM_BACKEND=nvidia-drm"
              "__GLX_VENDOR_LIBRARY_NAME=nvidia"
            ];
            ExecStartPre = "${pkgs.coreutils}/bin/sleep 2";
            ExecStart = "${pkgs.waydroid}/bin/waydroid session start";
            ExecStop = "${pkgs.waydroid}/bin/waydroid session stop";
            Restart = "on-failure";
            RestartSec = "5s";
          };
          Install = {
            WantedBy = ["graphical-session.target"];
          };
        };
      };
    };
  };
}
</file>

<file path="home/programs/bambu.nix">
###############################################################################
# Bambu Studio Module
# Provides Bambu Studio 3D printing slicer with custom optimizations
# - Custom version override for better compatibility
# - Graphics environment setup for both NVIDIA and Mesa
# - Desktop integration with proper icon and categories
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.programs.bambu;

  # Custom Bambu Studio package with specific version
  bambuStudio = pkgs.bambu-studio.overrideAttrs (_oldAttrs: {
    version = "01.00.01.50";
    src = pkgs.fetchFromGitHub {
      owner = "bambulab";
      repo = "BambuStudio";
      rev = "v01.00.01.50";
      hash = "sha256-7mkrPl2CQSfc1lRjl1ilwxdYcK5iRU//QGKmdCicK30=";
    };
  });

  # Wrapper script with proper graphics environment setup
  bambuStudioWrapper = pkgs.writeShellScriptBin "bambu-studio" ''
    # Use the mesa package path for the EGL vendor file
    MESA_PATH="${pkgs.mesa}/share/glvnd/egl_vendor.d/50_mesa.json"
    NVIDIA_PATH="/run/opengl-driver/share/glvnd/egl_vendor.d/10_nvidia.json"

    # Detect if NVIDIA is in use
    if lspci | grep -i nvidia >/dev/null && [ -f "$NVIDIA_PATH" ]; then
      # NVIDIA detected, set special environment for zink/mesa
      export WEBKIT_DISABLE_DMABUF_RENDERER=1
      export GALLIUM_DRIVER=zink
      export MESA_LOADER_DRIVER_OVERRIDE=zink
      export __GLX_VENDOR_LIBRARY_NAME=mesa
      export __EGL_VENDOR_LIBRARY_FILENAMES="$MESA_PATH"
      exec ${bambuStudio}/bin/bambu-studio "$@"
    else
      if [ ! -f "$MESA_PATH" ]; then
        echo "\n\033[1;31mFATAL: Mesa EGL vendor file is required for Bambu Studio to run.\033[0m"
        echo "Expected at: $MESA_PATH"
        echo "This package will not run without it. Please ensure mesa is available."
        exit 1
      fi
      export __EGL_VENDOR_LIBRARY_FILENAMES=$MESA_PATH
      export WEBKIT_FORCE_COMPOSITING_MODE=1
      export WEBKIT_DISABLE_COMPOSITING_MODE=1
      export WEBKIT_DISABLE_DMABUF_RENDERER=1
      exec ${bambuStudio}/bin/bambu-studio "$@"
    fi
  '';
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.bambu = {
    enable = lib.mkEnableOption "Bambu Studio 3D printing slicer";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = [
      bambuStudioWrapper
      pkgs.mesa
    ];

    # Desktop entry handled by home-manager
  };
}
</file>

<file path="home/programs/bluetooth.nix">
###############################################################################
# Bluetooth Program Module (Maid Version)
# Configure Bluetooth UI tools and utilities
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.programs.bluetooth;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.bluetooth = {
    enable = lib.mkEnableOption "Bluetooth user tools";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      # Main Bluetooth GUI manager
      blueman

      # Additional Bluetooth utilities
      bluetuith # TUI Bluetooth manager
    ];

    ###########################################################################
    # Configuration Files
    ###########################################################################
    users.users.y0usaf.maid.file.xdg_config."autostart/blueman.desktop".source = "${pkgs.blueman}/etc/xdg/autostart/blueman.desktop";
  };
}
</file>

<file path="home/programs/creative.nix">
###############################################################################
# Creative Applications Module (Nix-Maid Version)
# Provides creative and image editing applications
# - Simple painting tools
# - Advanced image editing
# - Digital art creation
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.programs.creative;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.creative = {
    enable = lib.mkEnableOption "creative applications module";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      pinta # Simple painting application
      gimp # Feature-rich image editor
    ];
  };
}
</file>

<file path="home/programs/imv.nix">
###############################################################################
# IMV Image Viewer Module
# Provides the imv image viewer
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.programs.imv;
in {
  options.home.programs.imv = {
    enable = lib.mkEnableOption "imv image viewer";
  };
  config = lib.mkIf cfg.enable {
    users.users.y0usaf.maid.packages = with pkgs; [imv];
  };
}
</file>

<file path="home/programs/media.nix">
###############################################################################
# Media Module (Nix-Maid Version)
# Configuration for media playback, streaming, and audio control
# - Audio control with pavucontrol
# - Video playback with VLC and Stremio
# - Media downloading with yt-dlp and ffmpeg
# - Terminal music playback with cmus
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.programs.media;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.media = {
    enable = lib.mkEnableOption "media applications";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      pavucontrol # Sound mixer for PulseAudio
      ffmpeg # Multimedia framework
      vlc # Versatile media player
      stremio # Media streaming application
      cmus # Terminal-based music player
    ];
  };
}
</file>

<file path="home/programs/mpv.nix">
###############################################################################
# MPV Media Player Module
# Provides the mpv media player
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.programs.mpv;
in {
  options.home.programs.mpv = {
    enable = lib.mkEnableOption "mpv media player";
  };
  config = lib.mkIf cfg.enable {
    users.users.y0usaf.maid.packages = with pkgs; [mpv];
  };
}
</file>

<file path="home/programs/obs.nix">
###############################################################################
# OBS Studio Module
# Configuration for OBS Studio (Open Broadcaster Software)
# - Video recording and live streaming
# - Plugin support for background removal and Vulkan capture
# - Custom image reaction plugin
# - Conditional CUDA support when NVIDIA is enabled
###############################################################################
{
  config,
  pkgs,
  lib,
  inputs,
  hostSystem,
  ...
}: let
  cfg = config.home.programs.obs;

  # Check if NVIDIA and CUDA are enabled in the system configuration
  nvidiaCudaEnabled = hostSystem.hardware.nvidia.enable && (hostSystem.hardware.nvidia.cuda.enable or false);

  # Create a CUDA-enabled OBS package if NVIDIA and CUDA are enabled
  obsPackage =
    if nvidiaCudaEnabled
    then pkgs.obs-studio.override {cudaSupport = true;}
    else pkgs.obs-studio;
  # Note: Custom background removal plugin configuration available if needed
  # but currently using the default package
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.obs = {
    enable = lib.mkEnableOption "OBS Studio";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      # Main OBS package with conditional CUDA support
      obsPackage

      # OBS plugins
      obs-studio-plugins.obs-backgroundremoval
      obs-studio-plugins.obs-vkcapture
      obs-studio-plugins.obs-pipewire-audio-capture
      inputs.obs-image-reaction.packages.${pkgs.system}.default

      # Additional utilities
      v4l-utils
    ];
  };
}
</file>

<file path="home/programs/obsidian.nix">
###############################################################################
# Obsidian Module (Nix-Maid Version)
# Knowledge base application with Wayland support
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.programs.obsidian;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.obsidian = {
    enable = lib.mkEnableOption "Obsidian module";
    useWayland = lib.mkOption {
      type = lib.types.bool;
      default = true;
      description = "Whether to enable Wayland/Ozone support for Obsidian";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      # Create a wrapper script for Obsidian with Wayland support
      (writeShellScriptBin "obsidian" ''
        # Set Wayland/Ozone environment variables if enabled
        ${lib.optionalString cfg.useWayland ''
          export NIXOS_OZONE_WL=1
          export ELECTRON_OZONE_PLATFORM_HINT=wayland
        ''}

        # Launch Obsidian with performance optimizations
        exec ${obsidian}/bin/obsidian \
          --disable-smooth-scrolling \
          --enable-gpu-rasterization \
          --enable-zero-copy \
          ${lib.optionalString cfg.useWayland "--ozone-platform-hint=wayland"} \
          "$@"
      '')
    ];
  };
}
</file>

<file path="home/programs/pcmanfm.nix">
###############################################################################
# PCManFM Module
# Provides the pcmanfm file manager
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.programs.pcmanfm;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.pcmanfm = {
    enable = lib.mkEnableOption "pcmanfm file manager";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      pcmanfm
    ];
  };
}
</file>

<file path="home/programs/qbittorrent.nix">
###############################################################################
# qBittorrent Module
# Provides the qBittorrent torrent client
# - Lightweight BitTorrent client
# - Web UI for remote management
# - Advanced torrent management features
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.programs.qbittorrent;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.qbittorrent = {
    enable = lib.mkEnableOption "qBittorrent torrent client";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      qbittorrent
    ];
  };
}
</file>

<file path="home/programs/sway-launcher-desktop.nix">
###############################################################################
# Sway Launcher Desktop Module
# A simple application launcher for Sway using fzf
# - Creates the launcher script in ~/.config/scripts/
# - Handles executable permissions properly
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.programs.sway-launcher-desktop;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.sway-launcher-desktop = {
    enable = lib.mkEnableOption "sway launcher desktop";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      fzf
    ];

    ###########################################################################
    # Configuration Files
    ###########################################################################
    users.users.y0usaf.maid.file.xdg_config."scripts/sway-launcher-desktop.sh" = {
      executable = true;
      text = ''
        #!/usr/bin/env bash
        # terminal application launcher for sway, using fzf
        # Based on: https://gitlab.com/FlyingWombat/my-scripts/blob/master/sway-launcher
        # https://gist.github.com/Biont/40ef59652acf3673520c7a03c9f22d2a
        shopt -s nullglob globstar
        set -o pipefail
        # Ensure file descriptor 3 is available for debug output
        exec 3>/dev/null 2>/dev/null || true
        # shellcheck disable=SC2154
        trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
        IFS=$'\n\t'
        DEL=$'\34'

        FZF_COMMAND="''${FZF_COMMAND:=fzf}"
        TERMINAL_COMMAND="''${TERMINAL_COMMAND:="$TERMINAL -e"}"
        GLYPH_COMMAND="''${GLYPH_COMMAND-  }"
        GLYPH_DESKTOP="''${GLYPH_DESKTOP-  }"
        CONFIG_DIR="''${XDG_CONFIG_HOME:-$HOME/.config}/sway-launcher-desktop"
        PROVIDERS_FILE="''${PROVIDERS_FILE:=providers.conf}"
        if [[ "''${PROVIDERS_FILE#/}" == "''${PROVIDERS_FILE}" ]]; then
          # $PROVIDERS_FILE is a relative path, prepend $CONFIG_DIR
          PROVIDERS_FILE="''${CONFIG_DIR}/''${PROVIDERS_FILE}"
        fi
        if [[ ! -v PREVIEW_WINDOW ]]; then
            PREVIEW_WINDOW=up:2:noborder
        fi

        # Provider config entries are separated by the field separator \034 and have the following structure:
        # list_cmd,preview_cmd,launch_cmd,purge_cmd
        declare -A PROVIDERS
        if [ -f "''${PROVIDERS_FILE}" ]; then
          eval "$(awk -F= '
          BEGINFILE{ provider=""; }
          /^\[.*\]/{sub("^\\[", "");sub("\\]$", "");provider=$0}
          /^(launch|list|preview|purge)_cmd/{st = index($0,"=");providers[provider][$1] = substr($0,st+1)}
          ENDFILE{
            for (key in providers){
              if(!("list_cmd" in providers[key])){continue;}
              if(!("launch_cmd" in providers[key])){continue;}
              if(!("preview_cmd" in providers[key])){continue;}
              if(!("purge_cmd" in providers[key])){providers[key]["purge_cmd"] = "exit 0";}
              for (entry in providers[key]){
               gsub(/[\x27,\047]/,"\x27\"\x27\"\x27", providers[key][entry])
              }
              print "PROVIDERS[\x27" key "\x27]=\x27" providers[key]["list_cmd"] "\034" providers[key]["preview_cmd"] "\034" providers[key]["launch_cmd"] "\034" providers[key]["purge_cmd"] "\x27\n"
            }
          }' "''${PROVIDERS_FILE}")"
          if [[ ! -v HIST_FILE ]]; then
            HIST_FILE="''${XDG_CACHE_HOME:-$HOME/.cache}/''${0##*/}-''${PROVIDERS_FILE##*/}-history.txt"
          fi
        else
          PROVIDERS['desktop']="''${0} list-entries''${DEL}''${0} describe-desktop \"{1}\"''${DEL}''${0} run-desktop '{1}' {2}''${DEL}test -f '{1}' || exit 43"
          PROVIDERS['command']="''${0} list-commands''${DEL}''${0} describe-command \"{1}\"''${DEL}''${TERMINAL_COMMAND} {1}''${DEL}command -v '{1}' || exit 43"
          if [[ ! -v HIST_FILE ]]; then
            HIST_FILE="''${XDG_CACHE_HOME:-$HOME/.cache}/''${0##*/}-history.txt"
          fi
        fi
        PROVIDERS['user']="exit''${DEL}exit''${DEL}{1}" # Fallback provider that simply executes the exact command if there were no matches

        if [[ -n "''${HIST_FILE}" ]]; then
          mkdir -p "''${HIST_FILE%/*}" && touch "$HIST_FILE"
          readarray HIST_LINES <"$HIST_FILE"
        fi

        function describe() {
          # shellcheck disable=SC2086
          readarray -d ''${DEL} -t PROVIDER_ARGS <<<''${PROVIDERS[''${1}]}
          # shellcheck disable=SC2086
          [ -n "''${PROVIDER_ARGS[1]}" ] && eval "''${PROVIDER_ARGS[1]//\\{1\\}/''${2}}"
        }
        function describe-desktop() {
          description=$(sed -ne '/^Comment=/{s/^Comment=//;p;q}' "$1")
          echo -e "\033[33m$(sed -ne '/^Name=/{s/^Name=//;p;q}' "$1")\033[0m"
          echo "''${description:-No description}"
        }
        function describe-command() {
          readarray arr < <(whatis -l "$1" 2>/dev/null)
          description="''${arr[0]}"
          description="''${description#* - }"
          echo -e "\033[33m''${1}\033[0m"
          echo "''${description:-No description}"
        }

        function provide() {
          # shellcheck disable=SC2086
          readarray -d ''${DEL} -t PROVIDER_ARGS <<<''${PROVIDERS[$1]}
          eval "''${PROVIDER_ARGS[0]}"
        }
        function list-commands() {
          IFS=: read -ra path <<<"$PATH"
          for dir in "''${path[@]}"; do
            printf '%s\n' "$dir/"* |
              awk -F / -v pre="$GLYPH_COMMAND" '{print $NF "\034command\034\033[31m" pre "\033[0m" $NF;}'
          done | sort -u
        }
        function list-entries() {
          # Get locations of desktop application folders according to spec
          # https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
          IFS=':' read -ra DIRS <<<"''${XDG_DATA_HOME-''${HOME}/.local/share}:''${XDG_DATA_DIRS-/usr/local/share:/usr/share}"
          for i in "''${!DIRS[@]}"; do
            if [[ ! -d "''${DIRS[i]}" ]]; then
              unset -v 'DIRS[$i]'
            else
              DIRS[$i]="''${DIRS[i]}/applications/**/*.desktop"
            fi
          done

          # shellcheck disable=SC2068
          entries ''${DIRS[@]} | sort -k2
        }
        function entries() {
          # shellcheck disable=SC2068
          awk -v pre="$GLYPH_DESKTOP" -F= '
            function desktopFileID(filename){
              sub("^.*applications/", "", filename);
              sub("/", "-", filename);
              return filename
            }
            BEGINFILE{
              application=0;
              hidden=0;
              block="";
              a=0

              id=desktopFileID(FILENAME)
              if(id in fileIds){
                nextfile;
              }else{
                fileIds[id]=0
              }
            }
            /^\[Desktop Entry\]/{block="entry"}
            /^Type=Application/{application=1}
            /^\[Desktop Action/{
              sub("^\\[Desktop Action ", "");
              sub("\\]$", "");
              block="action";
              a++;
              actions[a,"key"]=$0
            }
            /^\[X-/{
              sub("^\\[X-", "");
              sub("\\]$", "");
              block="action";
              a++;
              actions[a,"key"]=$0
            }
            /^Name=/{ (block=="action")? actions[a,"name"]=$2 : name=$2 }
            /^NoDisplay=true/{ (block=="action")? actions[a,"hidden"]=1 : hidden=1 }
            ENDFILE{
              if (application){
                  if (!hidden)
                      print FILENAME "\034desktop\034\033[33m" pre name "\033[0m";
                  if (a>0)
                      for (i=1; i<=a; i++)
                          if (!actions[i, "hidden"])
                              print FILENAME "\034desktop\034\033[33m" pre name "\033[0m (" actions[i, "name"] ")\034" actions[i, "key"]
              }
            }' \
            $@ </dev/null
          # the empty stdin is needed in case no *.desktop files
        }
        function run-desktop() {
          CMD="$("''${0}" generate-command "$@" 2>&3)"
          echo "Generated Launch command from .desktop file: ''${CMD}" >&3
          eval "''${CMD}"
        }
        function generate-command() {
          # Define the search pattern that specifies the block to search for within the .desktop file
          PATTERN="^\\\\[Desktop Entry\\\\]"
          if [[ -n $2 ]]; then
            PATTERN="^\\\\[Desktop Action ''${2}\\\\]"
          fi
          echo "Searching for pattern: ''${PATTERN}" >&3
          # 1. We see a line starting [Desktop, but we're already searching: deactivate search again
          # 2. We see the specified pattern: start search
          # 3. We see an Exec= line during search: remove field codes and set variable
          # 3. We see a Path= line during search: set variable
          # 4. Finally, build command line
          awk -v pattern="''${PATTERN}" -v terminal_cmd="''${TERMINAL_COMMAND}" -F= '
            BEGIN{a=0;exec=0;path=0}
               /^\[Desktop/{
                if(a){ a=0 }
               }
              $0 ~ pattern{ a=1 }
              /^Terminal=/{
                sub("^Terminal=", "");
                if ($0 == "true") { terminal=1 }
              }
              /^Exec=/{
                if(a && !exec){
                  sub("^Exec=", "");
                  gsub(" ?%[cDdFfikmNnUuv]", "");
                  exec=$0;
                }
              }
              /^Path=/{
                if(a && !path){ path=$2 }
               }
            END{
              if(path){ printf "cd " path " && " }
              printf "exec "
              if (terminal){ printf terminal_cmd " " }
              print exec
            }' "$1"
        }

        function shouldAutostart() {
            local condition="$(cat $1 | grep "AutostartCondition" | cut -d'=' -f2)"
            local filename="''${XDG_CONFIG_HOME-''${HOME}/.config}/''${condition#* }"
            case $condition in
                if-exists*)
                    [[ -e $filename ]]
                    ;;
                unless-exists*)
                    [[ ! -e $filename ]]
                    ;;
                *)
                    return 0
                    ;;
            esac
        }

        function autostart() {
          for application in $(list-autostart); do
              if shouldAutostart "$application" ; then
                  (exec setsid /bin/sh -c "$(run-desktop "''${application}")" &>/dev/null &)
              fi
          done
        }

        function list-autostart() {
          # Get locations of desktop application folders according to spec
          # https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
          IFS=':' read -ra DIRS <<<"''${XDG_CONFIG_HOME-''${HOME}/.config}:''${XDG_CONFIG_DIRS-/etc/xdg}"
          for i in "''${!DIRS[@]}"; do
            if [[ ! -d "''${DIRS[i]}" ]]; then
              unset -v 'DIRS[$i]'
            else
              DIRS[$i]="''${DIRS[i]}/autostart/*.desktop"
            fi
          done

          # shellcheck disable=SC2068
          awk -v pre="$GLYPH_DESKTOP" -F= '
            function desktopFileID(filename){
              sub("^.*autostart/", "", filename);
              sub("/", "-", filename);
              return filename
            }
            BEGINFILE{
              application=0;
              block="";
              disabled=0;
              a=0

              id=desktopFileID(FILENAME)
              if(id in fileIds){
                nextfile;
              }else{
                fileIds[id]=0
              }
            }
            /^\[Desktop Entry\]/{block="entry"}
            /^Type=Application/{application=1}
            /^Name=/{ iname=$2 }
            /^Hidden=true/{disabled=1}
            ENDFILE{
              if (application && !disabled){
                  print FILENAME;
              }
            }' \
            ''${DIRS[@]} </dev/null
        }

        purge() {
         # shellcheck disable=SC2188
         > "''${HIST_FILE}"
         declare -A PURGE_CMDS
         for PROVIDER_NAME in "''${!PROVIDERS[@]}"; do
           readarray -td ''${DEL} PROVIDER_ARGS <<<''${PROVIDERS[''${PROVIDER_NAME}]}
           PURGE_CMD=''${PROVIDER_ARGS[3]}
           [ -z "''${PURGE_CMD}" ] && PURGE_CMD='test -f "{1}" || exit 43'
           PURGE_CMDS[$PROVIDER_NAME]="''${PURGE_CMD%$'\n'}"
          done
          for HIST_LINE in "''${HIST_LINES[@]#*' '}"; do
            readarray -td $'\034' HIST_ENTRY <<<''${HIST_LINE}
            ENTRY=''${HIST_ENTRY[1]}
            readarray -td ' ' FILTER <<<''${PURGE_CMDS[$ENTRY]//\{1\}/''${HIST_ENTRY[0]}}
            (eval "''${FILTER[@]}" 1>/dev/null) # Run filter command discarding output. We only want the exit status
            if [[ $? -ne 43 ]]; then
              echo "1 ''${HIST_LINE[@]%$'\n'}" >> "''${HIST_FILE}"
            fi
          done
        }

        case "$1" in
        describe | describe-desktop | describe-command | entries | list-entries | list-commands | list-autostart | generate-command | autostart | run-desktop | provide | purge)
          "$@"
          exit
          ;;
        esac
        echo "Starting launcher instance with the following providers:" "''${!PROVIDERS[@]}" >&3

        FZFPIPE=$(mktemp -u)
        mkfifo "$FZFPIPE"
        trap 'rm "$FZFPIPE"' EXIT INT

        # Append Launcher History, removing usage count
        (printf '%s' "''${HIST_LINES[@]#* }" >>"$FZFPIPE") &

        # Iterate over providers and run their list-command
        for PROVIDER_NAME in "''${!PROVIDERS[@]}"; do
          (bash -c "''${0} provide ''${PROVIDER_NAME}" >>"$FZFPIPE") &
        done

        readarray -t COMMAND_STR <<<$(
          ''${FZF_COMMAND} --ansi +s -x -d '\034' --nth ..3 --with-nth 3 \
            --print-query \
            --preview "$0 describe {2} {1}" \
            --preview-window="''${PREVIEW_WINDOW}" \
            --no-multi --cycle \
            --prompt="''${GLYPH_PROMPT-# }" \
            --header="" --no-info --margin="1,2" \
            --color='16,gutter:-1' \
            <"$FZFPIPE"
        ) || exit 1
        # Get the last line of the fzf output. If there were no matches, it contains the query which we'll treat as a custom command
        # If there were matches, it contains the selected item
        COMMAND_STR=$(printf '%s\n' "''${COMMAND_STR[@]: -1}")
        # We still need to format the query to conform to our fallback provider.
        # We check for the presence of field separator character to determine if we're dealing with a custom command
        if [[ $COMMAND_STR != *$'\034'* ]]; then
            COMMAND_STR="''${COMMAND_STR}"$'\034user\034'"''${COMMAND_STR}"$'\034'
            SKIP_HIST=1 # I chose not to include custom commands in the history. If this is a bad idea, open an issue please
        fi

        [ -z "$COMMAND_STR" ] && exit 1

        if [[ -n "''${HIST_FILE}" && ! "$SKIP_HIST" ]]; then
          # update history
          for i in "''${!HIST_LINES[@]}"; do
            if [[ "''${HIST_LINES[i]}" == *" $COMMAND_STR"$'\n' ]]; then
              HIST_COUNT=''${HIST_LINES[i]%% *}
              HIST_LINES[$i]="$((HIST_COUNT + 1)) $COMMAND_STR"$'\n'
              match=1
              break
            fi
          done
          if ! ((match)); then
            HIST_LINES+=("1 $COMMAND_STR"$'\n')
          fi

          printf '%s' "''${HIST_LINES[@]}" | sort -nr >"$HIST_FILE"
        fi

        # shellcheck disable=SC2086
        readarray -d $'\034' -t PARAMS <<<''${COMMAND_STR}
        # shellcheck disable=SC2086
        readarray -d ''${DEL} -t PROVIDER_ARGS <<<''${PROVIDERS[''${PARAMS[1]}]}
        # Substitute {1}, {2} etc with the correct values
        COMMAND=''${PROVIDER_ARGS[2]//\{1\}/''${PARAMS[0]}}
        COMMAND=''${COMMAND//\{2\}/''${PARAMS[3]}}
        COMMAND=''${COMMAND%%[[:space:]]}

        if [ -t 1 ]; then
          echo "Launching command: ''${COMMAND}" >&3
          setsid /bin/sh -c "''${COMMAND}" >&/dev/null </dev/null &
          sleep 0.01
        else
          echo "''${COMMAND}"
        fi
      '';
    };
  };
}
</file>

<file path="home/programs/vesktop.nix">
###############################################################################
# Vesktop Module (Maid)
# Alternate Discord client with Vencord built-in
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.programs.vesktop;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.vesktop = {
    enable = lib.mkEnableOption "Vesktop (Discord client) module";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid.packages = [pkgs.vesktop];
  };
}
</file>

<file path="home/programs/webapps.nix">
###############################################################################
# Web Applications Module (Maid)
# Provides Chromium browser for web applications with desktop entries
# - Keyboard testing utility (Keybard)
# - Google Meet video conferencing
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.programs.webapps;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.webapps = {
    enable = lib.mkEnableOption "web applications via Chromium";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = [pkgs.ungoogled-chromium];

      file = {
        home.".local/share/applications/keybard.desktop".text = ''
          [Desktop Entry]
          Name=Keybard
          Exec=${lib.getExe pkgs.chromium} --app=https://captdeaf.github.io/keybard %U
          Terminal=false
          Type=Application
          Categories=Utility;System;
          Comment=Keyboard testing utility
        '';

        home.".local/share/applications/google-meet.desktop".text = ''
          [Desktop Entry]
          Name=Google Meet
          Exec=${lib.getExe pkgs.chromium} --app=https://meet.google.com %U
          Terminal=false
          Type=Application
          Categories=Network;VideoConference;Chat;
          Comment=Video conferencing by Google
        '';
      };
    };
  };
}
</file>

<file path="home/services/format-nix.nix">
###############################################################################
# Format Nix Service
# Automatic Nix file formatting with alejandra
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.services.formatNix;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.services.formatNix = {
    enable = lib.mkEnableOption "automatic Nix file formatting with alejandra";

    directory = lib.mkOption {
      type = lib.types.str;
      default = "{{home}}/nixos";
      description = "Directory to watch for Nix file changes";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = [pkgs.alejandra];

      systemd.services.format-nix = {
        description = "Format Nix files on change";
        serviceConfig = {
          Type = "oneshot";
          ExecStart = "${pkgs.alejandra}/bin/alejandra .";
          WorkingDirectory = "{{home}}/nixos";
        };
      };

      systemd.timers.format-nix = {
        description = "Timer for formatting Nix files";
        timerConfig = {
          OnBootSec = "1min";
          OnUnitActiveSec = "5min";
          Unit = "format-nix.service";
        };
        wantedBy = ["timers.target"];
      };
    };
  };
}
</file>

<file path="home/services/nixos-git-sync.nix">
###############################################################################
# NixOS Configuration Git Sync
# Automatic syncing of NixOS configuration changes
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.services.nixosGitSync;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.services.nixosGitSync = {
    enable = lib.mkEnableOption "NixOS configuration git sync service";

    repoPath = lib.mkOption {
      type = lib.types.str;
      default = "/home/y0usaf/nixos";
      description = "Path to the NixOS configuration repository";
    };

    remoteBranch = lib.mkOption {
      type = lib.types.str;
      default = "main";
      description = "Remote branch to push to";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      systemd.services."nixos-git-sync" = {
        description = "Sync NixOS configuration changes after successful build";
        script = ''
                    # Enable debug output for logging
                    set -x

                    # Sleep briefly to ensure all file writes are complete
                    sleep 2

                    # Get repository path
                    REPO_PATH="${cfg.repoPath}"

                    # Check if repository exists
                    if [ ! -d "$REPO_PATH" ]; then
                      echo "Repository directory does not exist: $REPO_PATH"
                      exit 1
                    fi

                    # Switch to the NixOS configuration repository directory
                    cd "$REPO_PATH"

                    # Assess if there are any changes (tracked or untracked)
                    if ! git diff --quiet HEAD || [ -n "$(git ls-files --others --exclude-standard)" ]; then
                      # Stage all changes
                      git add .

                      # Format date for commit message
                      FORMATTED_DATE=$(date '+%d/%m/%y@%H:%M:%S')

                      # Get list of changed files with status
                      CHANGED_FILES=$(git diff --cached --name-status | sed 's/^\(.*\)\t\(.*\)$/- [\1] \2/')

                      # Create commit message with file list
                      COMMIT_MSG="ü§ñ Auto Update: $FORMATTED_DATE

          Files changed:
          $CHANGED_FILES"

                      # Commit with the formatted message
                      git commit -m "$COMMIT_MSG"

                      # Push to the configured remote branch
                      git push origin ${cfg.remoteBranch} --force
                    else
                      echo "No changes to commit"
                    fi
        '';
        serviceConfig.Type = "oneshot";
        path = with pkgs; [git coreutils openssh];
        environment = {
          SSH_AUTH_SOCK = "$XDG_RUNTIME_DIR/ssh-agent";
        };
        wantedBy = ["default.target"];
      };
    };
  };
}
</file>

<file path="home/services/polkit-agent.nix">
###############################################################################
# Polkit Authentication Agent Service
# Provides polkit authentication for desktop applications
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.services.polkitAgent;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.services.polkitAgent = {
    enable = lib.mkEnableOption "polkit authentication agent";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = [pkgs.polkit_gnome];

      systemd.services.polkit-gnome-authentication-agent-1 = {
        description = "polkit-gnome-authentication-agent-1";
        wantedBy = ["graphical-session.target"];
        after = ["graphical-session.target"];
        serviceConfig = {
          Type = "simple";
          ExecStart = "${pkgs.polkit_gnome}/libexec/polkit-gnome-authentication-agent-1";
          Restart = "on-failure";
          RestartSec = 1;
          TimeoutStopSec = 10;
        };
      };
    };
  };
}
</file>

<file path="home/services/polkit-gnome.nix">
###############################################################################
# Polkit GNOME Authentication Agent Service
# Provides graphical authentication prompts for privileged operations
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.services.polkitGnome;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.services.polkitGnome = {
    enable = lib.mkEnableOption "polkit GNOME authentication agent";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = [pkgs.polkit_gnome];

      systemd.services.polkit-gnome-authentication-agent-1 = {
        description = "polkit-gnome-authentication-agent-1";
        wantedBy = ["graphical-session.target"];
        after = ["graphical-session.target"];
        serviceConfig = {
          Type = "simple";
          ExecStart = "${pkgs.polkit_gnome}/libexec/polkit-gnome-authentication-agent-1";
          Restart = "on-failure";
          RestartSec = 1;
          TimeoutStopSec = 10;
        };
      };
    };
  };
}
</file>

<file path="home/session/xdg.nix">
###############################################################################
# XDG Configuration (Maid Version)
# Configures XDG base directories, default applications, and program data paths
# - Base directories setup
# - Default application associations
# - MIME type handling
# - XDG compliance for various programs
###############################################################################
{
  config,
  lib,
  ...
}: let
  cfg = config.home.session.xdg;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.session.xdg = {
    enable = lib.mkEnableOption "XDG directory configuration";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      ###########################################################################
      # File Configuration
      ###########################################################################
      file = {
        ###########################################################################
        # Environment Variables in .zshenv
        ###########################################################################
        home.".zshenv".text = lib.mkAfter ''
          # XDG Base Directories
          export XDG_CONFIG_HOME="$HOME/.config"
          export XDG_DATA_HOME="$HOME/.local/share"
          export XDG_STATE_HOME="$HOME/.local/state"
          export XDG_CACHE_HOME="$HOME/.cache"

          # XDG User Directories
          export XDG_SCREENSHOTS_DIR="$HOME/Pictures/Screenshots"
          export XDG_WALLPAPERS_DIR="$HOME/Pictures/Wallpapers"

          # Android
          export ANDROID_HOME="$XDG_DATA_HOME/android"
          export ADB_VENDOR_KEY="$XDG_CONFIG_HOME/android"

          # Development Tools
          export PYENV_ROOT="$XDG_DATA_HOME/pyenv"
          export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/npmrc"
          export NPM_CONFIG_PREFIX="$XDG_DATA_HOME/npm"
          export NPM_CONFIG_CACHE="$XDG_CACHE_HOME/npm"
          export NPM_CONFIG_INIT_MODULE="$XDG_CONFIG_HOME/npm/config/npm-init.js"
          export NUGET_PACKAGES="$XDG_CACHE_HOME/NuGetPackages"
          export KERAS_HOME="$XDG_STATE_HOME/keras"
          export NIMBLE_DIR="$XDG_DATA_HOME/nimble"
          export DOTNET_CLI_HOME="$XDG_DATA_HOME/dotnet"
          export AWS_SHARED_CREDENTIALS_FILE="$XDG_CONFIG_HOME/aws/credentials"
          export CARGO_HOME="$XDG_DATA_HOME/cargo"
          export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
          export GOPATH="$XDG_DATA_HOME/go"
          export _JAVA_OPTIONS="-Djava.util.prefs.userRoot=\"$XDG_CONFIG_HOME/java\""

          # Various tools
          export LESSHISTFILE="$XDG_STATE_HOME/less/history"
          export NODE_REPL_HISTORY="$XDG_STATE_HOME/node_repl_history"
          export PYTHONSTARTUP="$XDG_CONFIG_HOME/python/pythonrc"
          export SQLITE_HISTORY="$XDG_STATE_HOME/sqlite_history"
          export WGET_HSTS_FILE="$XDG_DATA_HOME/wget-hsts"
          export PYTHON_HISTORY="$XDG_STATE_HOME/python_history"
          export HISTFILE="$XDG_STATE_HOME/zsh/history"
          export GNUPGHOME="$XDG_DATA_HOME/gnupg"
          export PARALLEL_HOME="$XDG_CONFIG_HOME/parallel"

          # Applications
          export SPOTDL_CONFIG="$XDG_CONFIG_HOME/spotdl.yml"
          export DVDCSS_CACHE="$XDG_DATA_HOME/dvdcss"
          export WINEPREFIX="$XDG_DATA_HOME/wine"
          export TEXMFVAR="$XDG_CACHE_HOME/texlive/texmf-var"
          export SSB_HOME="$XDG_DATA_HOME/zoom"

          # NVIDIA (conditional - always export for simplicity)
          export __GL_SHADER_DISK_CACHE_PATH="$XDG_CACHE_HOME/nv"
        '';

        ###########################################################################
        # XDG Configuration Files
        ###########################################################################
        xdg_config = {
          # XDG User Directories Configuration
          "user-dirs.dirs".text = ''
            XDG_DESKTOP_DIR="$HOME/Desktop"
            XDG_DOWNLOAD_DIR="$HOME/Downloads"
            XDG_TEMPLATES_DIR="$HOME/Templates"
            XDG_PUBLICSHARE_DIR="$HOME/Public"
            XDG_DOCUMENTS_DIR="$HOME/Documents"
            XDG_MUSIC_DIR="$HOME/Music"
            XDG_PICTURES_DIR="$HOME/Pictures"
            XDG_VIDEOS_DIR="$HOME/Videos"
            XDG_SCREENSHOTS_DIR="$HOME/Pictures/Screenshots"
            XDG_WALLPAPERS_DIR="$HOME/Pictures/Wallpapers"
          '';

          # MIME Applications Configuration
          "mimeapps.list".text = ''
            [Default Applications]
            # Web Handlers
            text/html=firefox.desktop
            x-scheme-handler/http=firefox.desktop
            x-scheme-handler/https=firefox.desktop
            x-scheme-handler/ftp=firefox.desktop
            x-scheme-handler/chrome=firefox.desktop
            x-scheme-handler/discord=discord.desktop

            # File Types
            inode/directory=pcmanfm.desktop

            # Media Types
            video/mp4=mpv.desktop
            video/x-matroska=mpv.desktop
            video/webm=mpv.desktop

            # Images
            image/jpeg=imv.desktop
            image/png=imv.desktop
            image/gif=imv.desktop
            image/tiff=imv.desktop
            image/bmp=imv.desktop

            # Archives
            application/zip=file-roller.desktop
            application/x-7z-compressed=file-roller.desktop
            application/x-tar=file-roller.desktop
            application/gzip=file-roller.desktop
            application/x-compressed-tar=file-roller.desktop

            # Web Extensions
            application/x-extension-htm=firefox.desktop
            application/x-extension-html=firefox.desktop
            application/x-extension-shtml=firefox.desktop
            application/xhtml+xml=firefox.desktop
            application/x-extension-xhtml=firefox.desktop

            [Added Associations]
            text/html=firefox.desktop
            x-scheme-handler/http=firefox.desktop
            x-scheme-handler/https=firefox.desktop
            x-scheme-handler/ftp=firefox.desktop
          '';

          ###########################################################################
          # Desktop Entries
          ###########################################################################
          xdg_data."applications/firefox.desktop".text = ''
            [Desktop Entry]
            Name=Firefox
            GenericName=Web Browser
            Exec=firefox %U
            Terminal=false
            Type=Application
            Categories=Application;Network;WebBrowser;
            MimeType=text/html;text/xml;application/xhtml+xml;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;
            Icon=firefox
            StartupNotify=true
          '';

          # Python RC Configuration
          "python/pythonrc".text = ''
            import os
            import atexit
            import readline

            # Set up history file
            histfile = os.path.join(os.path.expanduser("~/.local/state"), "python_history")
            try:
                readline.read_history_file(histfile)
                h_len = readline.get_current_history_length()
            except FileNotFoundError:
                open(histfile, 'wb').close()
                h_len = 0

            def save(prev_h_len, histfile):
                new_h_len = readline.get_current_history_length()
                readline.set_history_length(1000)
                readline.append_history_file(new_h_len - prev_h_len, histfile)

            atexit.register(save, h_len, histfile)
          '';
        };
      };
    };
  };
}
</file>

<file path="home/tools/7z.nix">
###############################################################################
# 7z (p7zip) Archive Manager Module (Nix-Maid Version)
# Provides the 7z command via p7zip
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.tools."7z";
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.tools."7z" = {
    enable = lib.mkEnableOption "7z (p7zip) archive manager";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      p7zip
    ];
  };
}
</file>

<file path="home/tools/file-roller.nix">
###############################################################################
# File Roller (Archive Manager) Module (Maid Version)
# Provides the file-roller GUI archive manager
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.tools.file-roller;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.tools.file-roller = {
    enable = lib.mkEnableOption "file-roller (archive manager)";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      file-roller
    ];
  };
}
</file>

<file path="home/ui/hyprland/ags-integration.nix">
###############################################################################
# Hyprland AGS Integration Module (Maid Version)
# Contains AGS-specific configuration and keybindings
###############################################################################
{
  config,
  lib,
  ...
}: let
  # Safely check if AGS is enabled
  agsEnabled = config.home.ui.ags.enable or false;
in
  ###########################################################################
  # AGS Integration Configuration
  ###########################################################################
  {
    ###########################################################################
    # AGS Autostart Configuration
    ###########################################################################
    "exec-once" = lib.optionals agsEnabled [
      "exec ags run"
    ];

    ###########################################################################
    # AGS Keybindings
    ###########################################################################
    bind = lib.optionals agsEnabled [
      "$mod, W, exec, ags request showStats"
      # Alt+Tab to toggle workspace indicators
      "$mod2, TAB, exec, ags request toggleWorkspaces"
    ];

    # Additional AGS bindings for show/hide functionality
    bindr = lib.optionals agsEnabled [
      "$mod, W, exec, ags request hideStats"
    ];
  }
</file>

<file path="home/ui/hyprland/default.nix">
###############################################################################
# Hyprland Window Manager Module (Maid Version)
# Modular configuration for the Hyprland Wayland compositor
###############################################################################
{...}: {
  imports = [
    ./options.nix
    ./config.nix
  ];
}
</file>

<file path="home/ui/hyprland/monitors.nix">
###############################################################################
# Hyprland Monitor Configuration Module (Maid Version)
# Contains monitor setup and display configuration
###############################################################################
_:
###########################################################################
# Monitor Configuration
###########################################################################
{
  ###########################################################################
  # Monitor & Display Settings
  ###########################################################################
  monitor = [
    "DP-4,highres@highrr,0x0,1"
    "DP-3,highres@highrr,0x0,1"
    "DP-2,5120x1440@239.76,0x0,1"
    "DP-1,5120x1440@239.76,0x0,1"
    "eDP-1,1920x1080@300.00,0x0,1"
  ];
}
</file>

<file path="home/ui/hyprland/options.nix">
###############################################################################
# Hyprland Module Options
# Defines all configuration options for the Hyprland window manager
###############################################################################
{lib, ...}: {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.ui.hyprland = {
    enable = lib.mkEnableOption "Hyprland window manager";
    flake = {
      enable = lib.mkOption {
        type = lib.types.bool;
        default = true;
        description = "Whether to use Hyprland from flake inputs instead of nixpkgs";
      };
    };
    hy3 = {
      enable = lib.mkOption {
        type = lib.types.bool;
        default = true;
        description = "Whether to enable the hy3 tiling layout plugin";
      };
    };
    group = {
      enable = lib.mkOption {
        type = lib.types.bool;
        default = false;
        description = "Whether to enable the group layout mode";
      };
    };
  };
}
</file>

<file path="home/ui/hyprland/window-rules.nix">
###############################################################################
# Hyprland Window Rules Module (Maid Version)
# Contains window management rules and layer rules
###############################################################################
_:
###########################################################################
# Window Rules Configuration
###########################################################################
{
  ###########################################################################
  # Application Shortcut Variables
  ###########################################################################
  "$firefox-pip" = "class:^(firefox)$, title:^(Picture-in-Picture)";
  "$kitty" = "class:^(kitty)$";

  ###########################################################################
  # Window Management Rules
  ###########################################################################
  windowrulev2 = [
    "float, center, size 300 600, class:^(launcher)"
    "float, center, class:^(hyprland-share-picker)"
    "float, $firefox-pip"
    "opacity 0.75 override, $firefox-pip"
    "noborder, $firefox-pip"
    "size 30% 30%, $firefox-pip"
    # Move Lovely mod injector to special workspace
    "workspace special:lovely, title:^(Lovely.*)"
  ];

  ###########################################################################
  # Layer Rules
  ###########################################################################
  layerrule = [
    "blur, notifications"
  ];
}
</file>

<file path="home/ui/ags.nix">
###############################################################################
# AGS v2 Module (Astal Framework) - Maid Version
# Installs AGS v2 as a regular package and creates configuration files
# Uses nix-maid for simple configuration like Home Manager
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.ui.ags;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.ui.ags = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Enable AGS v2 (Astal Framework)";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Install AGS package
    ###########################################################################
    users.users.y0usaf.maid.packages = [
      pkgs.ags
    ];

    ###########################################################################
    # Add AGS configuration files
    ###########################################################################
    users.users.y0usaf.maid.file.xdg_config = {
      "ags/app.tsx".text = ''
        import { App, Astal, Gtk } from "astal/gtk3"
        import { Variable, exec, subprocess } from "astal"

        // ============================================================================
        // UTILITY FUNCTIONS
        // ============================================================================

        // Safe command execution helper for AGS v2
        function safeExec(command: string, defaultValue: string = 'N/A'): string {
            try {
                const result = exec(["bash", "-c", command]);
                return result.trim() || defaultValue;
            } catch (error) {
                console.log(`Failed to execute command: ''${command}`, error);
                return defaultValue;
            }
        }

        // Timer-based time updates (more efficient than polling)
        function setupTimeUpdates(currentTime: any, currentDate: any) {
            const updateTime = () => {
                currentTime.set(safeExec('date "+%H:%M:%S"'));
            };

            const updateDate = () => {
                currentDate.set(safeExec('date "+%d/%m/%y"'));
            };

            // Update immediately
            updateTime();
            updateDate();

            // Update time every second using setTimeout instead of polling
            const timeInterval = setInterval(updateTime, 1000);

            // Update date at midnight and then every 24 hours
            const now = new Date();
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            tomorrow.setHours(0, 0, 0, 0);
            const msUntilMidnight = tomorrow.getTime() - now.getTime();

            setTimeout(() => {
                updateDate();
                // Then update every 24 hours
                setInterval(updateDate, 24 * 60 * 60 * 1000);
            }, msUntilMidnight);
        }

        // Event-driven package count monitoring
        function setupPackageMonitoring(packageCount: any) {
            const updatePackageCount = () => {
                const count = safeExec("which nix-store >/dev/null 2>&1 && nix-store -q --requisites /run/current-system/sw 2>/dev/null | wc -l || echo 'N/A'").trim();
                packageCount.set(count);
            };

            updatePackageCount();

            // Monitor for system rebuilds and package operations
            subprocess([
                "bash",
                "-c",
                `
                # Monitor for NixOS rebuilds and package changes
                while true; do
                    inotifywait -e modify,create,delete /nix/var/nix/profiles/system* 2>/dev/null || sleep 30
                    echo "package_change"
                done
                `
            ], (output: string) => {
                if (output.includes('package_change')) {
                    updatePackageCount();
                }
            });
        }

        // Helper functions for SystemStats component
        function padLabel(label: string, longestLabel: number): string {
            return label + ' '.repeat(longestLabel - label.length);
        }

        function horizontalBorder(char1: string, char2: string, char3: string, longestLabel: number): string {
            return char1 + "‚îÄ".repeat(longestLabel + 4) + char3;
        }

        // Cache GPU availability check
        const hasNvidiaGpu = (() => {
            try {
                exec(["bash", "-c", "which nvidia-smi >/dev/null 2>&1"]);
                return true;
            } catch {
                return false;
            }
        })();

        // ============================================================================
        // STYLES
        // ============================================================================

        const styles = `
        /* Base font size */
        * {
            font-size: 14px;
            font-family: monospace;
        }

        /* System Stats Widget Styles */
        .system-stats-window {
            background: transparent;
        }

        .system-stats {
            background: transparent;
            padding: 0.5em;
            margin: 0.5em;
            font-family: monospace;
            font-size: 1rem;
        }

        .system-stats * {
            margin: 0;
            padding: 0;
            background: transparent;
            border: none;
            box-shadow: none;
            text-shadow:
                0.05rem 0 0.05rem #000000,
                -0.05rem 0 0.05rem #000000,
                0 0.05rem 0.05rem #000000,
                0 -0.05rem 0.05rem #000000,
                0.05rem 0.05rem 0.05rem #000000,
                -0.05rem 0.05rem 0.05rem #000000,
                0.05rem -0.05rem 0.05rem #000000,
                -0.05rem -0.05rem 0.05rem #000000;
            font-family: inherit;
            font-size: inherit;
            font-weight: inherit;
            color: inherit;
        }

        /* Rainbow color assignments */
        .stats-time { color: #ff0000; }     /* Red */
        .stats-date { color: #ff8800; }     /* Orange */
        .stats-shell { color: #ffff00; }    /* Yellow */
        .stats-uptime { color: #00ff00; }   /* Green */
        .stats-pkgs { color: #00ff88; }     /* Blue-Green */
        .stats-memory { color: #00ffff; }   /* Cyan */
        .stats-cpu { color: #0088ff; }      /* Blue */
        .stats-gpu { color: #ff00ff; }      /* Magenta */
        .stats-colors { color: #ffffff; }   /* White */
        .stats-white { color: #ffffff; }    /* White */
        .stats-red { color: #ff0000; }
        .stats-orange { color: #ff8800; }
        .stats-yellow { color: #ffff00; }
        .stats-green { color: #00ff00; }
        .stats-blue-green { color: #00ff88; }
        .stats-cyan { color: #00ffff; }
        .stats-blue { color: #0088ff; }
        .stats-magenta { color: #ff00ff; }

        /* Workspaces Widget Styles */
        .workspaces-top, .workspaces-bottom {
            background: transparent;
        }

        .workspaces {
            background: transparent;
            margin: 0;
            padding: 0;
        }

        .workspaces *,
        .workspaces {
            margin: 0;
            padding: 0;
            background: transparent;
            border: none;
            box-shadow: none;
            color: white;
        }

        .workspace-btn {
            margin: 0;
            padding: 0;
            background-color: #222;
            border-radius: 0;
            min-width: 20px;
            min-height: 20px;
        }

        .workspace-btn label {
            background: transparent;
            color: rgba(255, 255, 255, 0.4);
            font-size: 0.8rem;
            padding: 0.25em;
        }

        .workspace-btn.active label {
            color: rgba(255, 255, 255, 1.0);
        }

        .workspace-btn.occupied label {
            color: rgba(255, 255, 255, 0.8);
        }

        .workspace-btn.inactive label {
            color: rgba(255, 255, 255, 0.5);
        }

        .workspace-btn.urgent label {
            color: #ff5555;
        }
        `

        // ============================================================================
        // SYSTEM STATS MODULE
        // ============================================================================

        // Show/hide control variables
        const systemStatsVisible = Variable(true);
        const systemStatsLayer = Variable(Astal.Layer.BOTTOM);

        // System monitoring variables with optimized polling intervals
        const cpuTemp = Variable('N/A').poll(250, () => {
            return safeExec("sensors 2>/dev/null | grep -E 'Tctl|Package id 0' | head -1 | awk '{print $2}' | sed 's/+//' || echo 'N/A'");
        });

        const gpuTemp = Variable('N/A').poll(250, () => {
            if (!hasNvidiaGpu) return 'N/A';
            const temp = safeExec("nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits 2>/dev/null || echo 'N/A'");
            return temp !== "N/A" && temp !== "" ? temp + "C" : "N/A";
        });

        const memoryInfo = Variable({ used: 'N/A', total: 'N/A' }).poll(2000, () => {
            try {
                const output = exec(["bash", "-c", "free -h | grep '^Mem:' | awk '{print $3 \"/\" $2}'"]);
                const parts = output.trim().split('/');
                return { used: parts[0] || 'N/A', total: parts[1] || 'N/A' };
            } catch {
                return { used: 'N/A', total: 'N/A' };
            }
        });

        const uptime = Variable('N/A').poll(60000, () => {
            return safeExec("uptime | sed 's/.*up *//' | sed 's/,.*user.*//' | sed 's/^ *//' | sed 's/ *$//' | sed 's/ day/d/' | sed 's/ days/d/'").trim();
        });

        // Timer-based time updates
        const currentTime = Variable('00:00:00');
        const currentDate = Variable('00/00/00');

        // Event-driven package count
        const packageCount = Variable('N/A');

        // Shell name never changes during session - set once
        const shellName = Variable(safeExec("basename \"$SHELL\""));

        // Initialize monitoring
        setupTimeUpdates(currentTime, currentDate);
        setupPackageMonitoring(packageCount);

        // Static data for SystemStats component (moved outside to prevent recreation)
        const statsLabels = ['time', 'date', 'shell', 'uptime', 'pkgs', 'memory', 'cpu', 'gpu', 'colors'];
        const longestLabel = Math.max(...statsLabels.map(l => l.length));

        // System Stats Widget Component
        function SystemStats() {
            return <window
                className="system-stats-window"
                layer={systemStatsLayer()}
                exclusivity={Astal.Exclusivity.IGNORE}
                visible={systemStatsVisible()}
                application={App}>
                <box className="system-stats" vertical>
                    {/* NixOS Logo */}
                    <label
                        className="stats-white"
                        label="   _  ___      ____  ____&#10;  / |/ (_)_ __/ __ \/ __/&#10; /    / /\ \ / /_/ /\ \&#10;/_/|_/_//_\_\\____/___/"
                    />

                    {/* Top border */}
                    <label
                        className="stats-white"
                        halign={Gtk.Align.START}
                        label={horizontalBorder("‚ï≠", "‚îÄ", "‚ïÆ", longestLabel)}
                    />

                    {/* Stats rows */}
                    {statsLabels.map(currentLabel =>
                        <box key={currentLabel}>
                            <label className="stats-white" halign={Gtk.Align.START} label="‚îÇ " />
                            <label className={`stats-''${currentLabel}`} halign={Gtk.Align.START} label="‚Ä¢ " />
                            <label className="stats-white" halign={Gtk.Align.START} label={`''${padLabel(currentLabel, longestLabel)} ‚îÇ `} />
                            <label
                                className={`stats-''${currentLabel}`}
                                halign={Gtk.Align.START}
                                label={(() => {
                                    switch(currentLabel) {
                                        case 'time': return currentTime();
                                        case 'date': return currentDate();
                                        case 'shell': return shellName();
                                        case 'uptime': return uptime();
                                        case 'pkgs': return packageCount();
                                        case 'memory': return `''${memoryInfo.get().used}/''${memoryInfo.get().total}`;
                                        case 'cpu': return cpuTemp();
                                        case 'gpu': return gpuTemp();
                                        case 'colors': return "";
                                        default: return "";
                                    }
                                })()}
                            />
                            {/* Color dots for colors row */}
                            {currentLabel === 'colors' && [
                                <label key="red" className="stats-red" label="‚Ä¢ " />,
                                <label key="orange" className="stats-orange" label="‚Ä¢ " />,
                                <label key="yellow" className="stats-yellow" label="‚Ä¢ " />,
                                <label key="green" className="stats-green" label="‚Ä¢ " />,
                                <label key="blue-green" className="stats-blue-green" label="‚Ä¢ " />,
                                <label key="cyan" className="stats-cyan" label="‚Ä¢ " />,
                                <label key="blue" className="stats-blue" label="‚Ä¢ " />,
                                <label key="magenta" className="stats-magenta" label="‚Ä¢ " />,
                                <label key="white" className="stats-white" label="‚Ä¢ " />
                            ]}
                        </box>
                    )}

                    {/* Bottom border */}
                    <label
                        className="stats-white"
                        halign={Gtk.Align.START}
                        label={horizontalBorder("‚ï∞", "‚îÄ", "‚ïØ", longestLabel)}
                    />
                </box>
            </window>
        }

        // ============================================================================
        // WORKSPACES MODULE
        // ============================================================================

        // Show/hide control variable
        const workspacesVisible = Variable(true);

        // Hyprland workspace management with real-time events
        const workspaces = Variable<any[]>([]);
        const activeWorkspace = Variable<number>(1);

        // Create a single derived variable for workspace state to optimize subscriptions
        const workspaceState = Variable.derive([workspaces, activeWorkspace], (ws, active) => ({
            workspaces: ws,
            activeWorkspace: active
        }));

        // Helper function to switch workspace using hyprctl
        function switchWorkspace(workspaceId: number) {
            try {
                exec(["hyprctl", "dispatch", "workspace", workspaceId.toString()]);
            } catch (error) {
                console.error("Failed to switch workspace:", error);
            }
        }

        // Initialize workspace data
        function initializeWorkspaces() {
            try {
                const output = exec(["bash", "-c", "hyprctl workspaces -j 2>/dev/null || echo '[]'"]);
                workspaces.set(JSON.parse(output));
            } catch {
                workspaces.set([]);
            }

            try {
                const output = exec(["bash", "-c", "hyprctl activeworkspace -j 2>/dev/null || echo '{\"id\":1}'"]);
                const parsed = JSON.parse(output);
                activeWorkspace.set(parsed.id || 1);
            } catch {
                activeWorkspace.set(1);
            }
        }

        // Update workspace list when needed
        function updateWorkspaceList() {
            try {
                const output = exec(["bash", "-c", "hyprctl workspaces -j 2>/dev/null || echo '[]'"]);
                workspaces.set(JSON.parse(output));
            } catch {
                // Keep existing workspaces if update fails
            }
        }

        // Set up real-time Hyprland event monitoring
        function setupHyprlandEvents() {
            const hyprlandSignature = exec(["bash", "-c", "echo $HYPRLAND_INSTANCE_SIGNATURE"]).trim();
            if (!hyprlandSignature) {
                console.error("HYPRLAND_INSTANCE_SIGNATURE not found - not running under Hyprland");
                return;
            }

            // Get current user ID dynamically for portability
            const userId = exec(["bash", "-c", "id -u"]).trim();
            const socketPath = `/run/user/''${userId}/hypr/''${hyprlandSignature}/.socket2.sock`;

            // Real-time event monitoring using nc
            subprocess([
                "bash",
                "-c",
                `nc -U "''${socketPath}" 2>/dev/null || { echo "Failed to connect to Hyprland socket"; exit 1; }`
            ], (output) => {
                const lines = output.split('\\n').filter(line => line.trim());

                for (const line of lines) {
                    if (line.startsWith('workspace>>')) {
                        // Active workspace changed
                        const workspaceId = parseInt(line.split('>>')[1]) || 1;
                        activeWorkspace.set(workspaceId);
                    }
                    else if (line.startsWith('createworkspace>>')) {
                        // New workspace created
                        updateWorkspaceList();
                    }
                    else if (line.startsWith('destroyworkspace>>')) {
                        // Workspace destroyed
                        updateWorkspaceList();
                    }
                    else if (line.startsWith('openwindow>>') || line.startsWith('closewindow>>')) {
                        // Window opened/closed - might affect workspace occupancy
                        updateWorkspaceList();
                    }
                }
            });
        }

        // Initialize workspaces and start event monitoring
        initializeWorkspaces();
        setupHyprlandEvents();

        // Workspaces Widget Component
        function WorkspacesWidget(position: 'top' | 'bottom') {
            const anchor = position === 'top'
                ? Astal.WindowAnchor.TOP
                : Astal.WindowAnchor.BOTTOM;

            // Create workspace buttons (1-10 like in v1 config)
            const workspaceButtons = Array.from({ length: 10 }, (_, i) => {
                const workspaceId = i + 1;

                return <button
                    key={workspaceId}
                    className="workspace-btn"
                    onClicked={() => {
                        switchWorkspace(workspaceId);
                    }}
                    setup={(self) => {
                        // Function to update button state
                        const updateButton = () => {
                            const state = workspaceState.get();
                            const ws = state.workspaces;
                            const active = state.activeWorkspace;

                            const isActive = active === workspaceId;
                            const isOccupied = Array.isArray(ws) && ws.some((workspace: any) =>
                                workspace.id === workspaceId && workspace.windows > 0
                            );

                            // Show button if it's active or occupied, or if it's workspace 1 (always show)
                            self.visible = isActive || isOccupied || workspaceId === 1;

                            // Update CSS classes
                            self.className = `workspace-btn ''${isActive ? "active" : ""} ''${isOccupied && !isActive ? "occupied" : ""}`.trim();
                        };

                        // Initial update
                        updateButton();

                        // Subscribe to single workspace state variable instead of two separate ones
                        workspaceState.subscribe(updateButton);
                    }}>
                    <label label={workspaceId.toString()} />
                </button>
            });

            return <window
                className={`workspaces-''${position}`}
                layer={Astal.Layer.OVERLAY}
                exclusivity={Astal.Exclusivity.IGNORE}
                anchor={anchor}
                visible={workspacesVisible()}
                application={App}>
                <box className="workspaces">
                    {workspaceButtons}
                </box>
            </window>
        }

        // ============================================================================
        // MAIN APPLICATION
        // ============================================================================

        // Main app configuration
        App.start({
            css: styles,
            requestHandler(request: string, ...args: any[]) {
                switch (request) {
                    case "showStats":
                        systemStatsVisible.set(true);
                        systemStatsLayer.set(Astal.Layer.TOP);
                        return "Stats shown";
                    case "hideStats":
                        systemStatsLayer.set(Astal.Layer.BOTTOM);
                        return "Stats hidden";
                    case "toggleStats":
                        if (systemStatsLayer.get() === Astal.Layer.TOP) {
                            systemStatsLayer.set(Astal.Layer.BOTTOM);
                        } else {
                            systemStatsVisible.set(true);
                            systemStatsLayer.set(Astal.Layer.TOP);
                        }
                        return "Stats toggled";
                    case "showWorkspaces":
                        workspacesVisible.set(true);
                        return "Workspaces shown";
                    case "hideWorkspaces":
                        workspacesVisible.set(false);
                        return "Workspaces hidden";
                    case "toggleWorkspaces":
                        workspacesVisible.set(!workspacesVisible.get());
                        return "Workspaces toggled";
                    default:
                        return `Unknown request: ''${request}`;
                }
            },
            main() {
                // Create system stats window
                SystemStats();

                // Create workspace widgets
                WorkspacesWidget('top');
                WorkspacesWidget('bottom');
            },
        })
      '';

      "ags/tsconfig.json".text = ''
        {
          "compilerOptions": {
            "target": "ES2022",
            "module": "ES2022",
            "lib": ["ES2022"],
            "allowJs": true,
            "strict": true,
            "esModuleInterop": true,
            "skipLibCheck": true,
            "forceConsistentCasingInFileNames": true,
            "moduleResolution": "node",
            "jsx": "react-jsx",
            "jsxImportSource": "astal/gtk3/jsx-runtime"
          },
          "include": ["**/*.ts", "**/*.tsx"],
          "exclude": ["node_modules"]
        }
      '';
    };
  };
}
</file>

<file path="home/ui/foot.nix">
###############################################################################
# Foot Terminal Configuration
# Terminal emulator with focus on minimalism and performance
# - Terminal styling and appearance
# - Key bindings for clipboard operations
# - Font configuration with fallback support
# - Cursor and mouse behavior settings
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.ui.foot;

  # Calculate the scaled font size based on the appearance configuration.
  computedFontSize = toString (config.home.core.appearance.baseFontSize * 1.33);

  # Get the main font name from the appearance configuration
  mainFontName = (builtins.elemAt config.home.core.appearance.fonts.main 0).name;

  # Get fallback font names
  fallbackFontNames = map (x: x.name) config.home.core.appearance.fonts.fallback;

  # Build the main font configuration string, including the fallback fonts.
  mainFontConfig =
    "${mainFontName}:size=${computedFontSize}, "
    + lib.concatStringsSep ", " (map (name: "${name}:size=${computedFontSize}") fallbackFontNames);

  # Foot configuration using your actual foot.ini settings
  footConfig = {
    main = {
      term = "xterm-256color";
      font = mainFontConfig;
      dpi-aware = "yes";
    };

    cursor = {
      style = "underline";
      blink = "no";
    };

    mouse = {
      hide-when-typing = "no";
      alternate-scroll-mode = "yes";
    };

    colors = {
      alpha = 0;
      background = "000000";
      foreground = "ffffff";

      # Regular color palette
      regular0 = "000000"; # black
      regular1 = "ff0000"; # red
      regular2 = "00ff00"; # green
      regular3 = "ffff00"; # yellow
      regular4 = "1e90ff"; # blue
      regular5 = "ff00ff"; # magenta
      regular6 = "00ffff"; # cyan
      regular7 = "ffffff"; # white

      # Bright color palette
      bright0 = "808080"; # bright black
      bright1 = "ff0000"; # bright red
      bright2 = "00ff00"; # bright green
      bright3 = "ffff00"; # bright yellow
      bright4 = "1e90ff"; # bright blue
      bright5 = "ff00ff"; # bright magenta
      bright6 = "00ffff"; # bright cyan
      bright7 = "ffffff"; # bright white
    };

    key-bindings = {
      clipboard-copy = "Control+c XF86Copy";
      clipboard-paste = "Control+v XF86Paste";
    };
  };
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.ui.foot = {
    enable = lib.mkEnableOption "foot terminal emulator";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      foot
    ];

    ###########################################################################
    # Configuration Files
    ###########################################################################
    users.users.y0usaf.maid.file.xdg_config."foot/foot.ini".text = lib.mkAfter (lib.generators.toINI {} footConfig);
  };
}
</file>

<file path="home/ui/mako.nix">
###############################################################################
# Mako Notification Daemon (Maid Version)
# Wayland notification daemon with customizable appearance
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.ui.mako;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.ui.mako = {
    enable = lib.mkEnableOption "Mako notification daemon";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = with pkgs; [
        mako
      ];

      ###########################################################################
      # Configuration Files
      ###########################################################################
      file.xdg_config."mako/config".text = ''
        actions=true
        anchor=top-right
        background-color=#2e3440
        border-color=#88c0d0
        border-radius=5
        border-size=1
        default-timeout=5000
        format=<b>%s</b>\n%b
        group-by=
        height=100
        icon-path=
        icons=true
        ignore-timeout=false
        layer=top
        margin=10
        markup=true
        max-icon-size=64
        max-visible=5
        output=
        padding=5
        progress-color=
        sort=-time
        text-color=#eceff4
        width=300
      '';

      ###########################################################################
      # User Systemd Service
      ###########################################################################
      systemd.services.mako = {
        description = "Mako notification daemon";
        documentation = ["man:mako(1)"];
        partOf = ["graphical-session.target"];
        after = ["graphical-session.target"];
        wantedBy = ["graphical-session.target"];
        serviceConfig = {
          Type = "dbus";
          BusName = "org.freedesktop.Notifications";
          ExecStart = "${pkgs.mako}/bin/mako";
          ExecReload = "${pkgs.mako}/bin/makoctl reload";
          Restart = "on-failure";
          RestartSec = 1;
          TimeoutStopSec = 10;
        };
      };
    };
  };
}
</file>

<file path="home/ui/wallust.nix">
###############################################################################
# Wallust Color Generation (Maid Version)
# Wallpaper-based color scheme generation for system-wide theming
# - Wallpaper-based color scheme generation
# - System-wide theme integration
# - Auto-generation on wallpaper change
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.ui.wallust;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.ui.wallust = {
    enable = lib.mkEnableOption "wallust color generation";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      wallust
    ];
  };
}
</file>

<file path="hosts/y0usaf-desktop/disko.nix">
# Y0usaf-Desktop Disko Configuration
{
  config,
  pkgs,
  disko,
  ...
}: let
  username = config.system.username or "y0usaf";
  homeDir = config.system.homeDirectory or "/home/${username}";

  # Configurable options
  disks = {
    systemDisk = "/dev/nvme0n1";
    dataDisk = "/dev/nvme1n1";
  };
in {
  imports = [
    disko.nixosModules.disko
  ];

  # Add disko to the system packages
  environment.systemPackages = [
    pkgs.disko
  ];

  # Define disk configuration
  disko.devices = {
    disk = {
      # Main system disk
      system = {
        device = disks.systemDisk;
        type = "disk";
        content = {
          type = "gpt";
          partitions = {
            boot = {
              name = "boot";
              size = "1G";
              type = "EF00"; # EFI System Partition
              content = {
                type = "filesystem";
                format = "vfat";
                mountpoint = "/boot";
                mountOptions = ["fmask=0077" "dmask=0077"];
              };
            };
            root = {
              name = "root";
              size = "100%";
              content = {
                type = "btrfs";
                extraArgs = ["-f"]; # Force formatting
                subvolumes = {
                  # Root filesystem
                  "@" = {
                    mountpoint = "/";
                    mountOptions = ["compress=zstd" "noatime"];
                  };
                  # Home directory
                  "@home" = {
                    mountpoint = "/home";
                    mountOptions = ["compress=zstd" "noatime"];
                  };
                  # Swap directory
                  "@swap" = {
                    mountpoint = "/swap";
                    mountOptions = ["nodatacow" "noatime"];
                  };
                };
              };
            };
          };
        };
      };

      # Secondary data disk
      data = {
        device = disks.dataDisk;
        type = "disk";
        content = {
          type = "btrfs";
          extraArgs = ["-f"]; # Force formatting
          subvolumes = {
            # Media subvolumes
            "@pictures" = {
              mountpoint = "${homeDir}/Pictures";
              mountOptions = ["compress=zstd" "noatime"];
            };
            "@dcim" = {
              mountpoint = "${homeDir}/DCIM";
              mountOptions = ["compress=zstd" "noatime"];
            };
            "@music" = {
              mountpoint = "${homeDir}/Music";
              mountOptions = ["compress=zstd" "noatime"];
            };
            # Steam directory
            "@steam" = {
              mountpoint = "${homeDir}/.local/share/Steam";
              mountOptions = ["compress=zstd" "noatime"];
            };
          };
        };
      };
    };
  };

  # Swap file configuration - could be moved to the host's default.nix if preferred
  swapDevices = [
    {
      device = "/swap/swapfile";
      size = 96768; # 96GB + 768MB for hibernation
    }
  ];
}
</file>

<file path="hosts/y0usaf-desktop/hardware-configuration.nix">
#===============================================================================
#                      üñ•Ô∏è Hardware Configuration üñ•Ô∏è
#===============================================================================
# üíΩ Storage and filesystems
# üéÆ Gaming directories
# üéµ Media mounts
# üîå Boot and kernel modules
# üåê Network interfaces
#===============================================================================
{
  config,
  lib,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  #‚îÄ‚îÄ üîå Boot Configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
  boot = {
    initrd.availableKernelModules = [
      "nvme"
      "thunderbolt"
      "xhci_pci"
      "ahci"
      "usbhid"
      "usb_storage"
      "sd_mod"
    ];
    initrd.kernelModules = [];
    kernelModules = [
      "kvm-amd"
      "k10temp"
      "nct6775"
      "zenpower"
    ];
    extraModulePackages = [config.boot.kernelPackages.zenpower];

    kernelParams = [
      "amd_pstate=active"
      "mitigations=off"
    ];
  };

  #‚îÄ‚îÄ üíΩ Filesystem Configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
  # NOTE: Filesystem definitions restored from disko.nix
  fileSystems = {
    #‚îÄ‚îÄ üíΩ Root Filesystem ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
    "/" = {
      device = "/dev/disk/by-uuid/32ad19b5-88df-4e63-92d2-d5a150ad65c5";
      fsType = "btrfs";
      options = ["subvol=@"];
    };

    #‚îÄ‚îÄ üè† Home Directory ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
    "/home" = {
      device = "/dev/disk/by-uuid/32ad19b5-88df-4e63-92d2-d5a150ad65c5";
      fsType = "btrfs";
      options = ["subvol=@home"];
    };

    #‚îÄ‚îÄ üîÑ Boot Partition ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
    "/boot" = {
      device = "/dev/disk/by-uuid/31F2-1AE7";
      fsType = "vfat";
      options = ["fmask=0077" "dmask=0077"];
    };

    #‚îÄ‚îÄ üì∏ Pictures Directory ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
    "/home/y0usaf/Pictures" = {
      device = "/dev/disk/by-uuid/9df24ce7-8abe-4a4b-9c9d-1a5c1c894051";
      fsType = "btrfs";
      options = ["subvol=@pictures"];
    };

    #‚îÄ‚îÄ üì∑ DCIM Directory ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
    "/home/y0usaf/DCIM" = {
      device = "/dev/disk/by-uuid/9df24ce7-8abe-4a4b-9c9d-1a5c1c894051";
      fsType = "btrfs";
      options = ["subvol=@dcim"];
    };

    #‚îÄ‚îÄ üéµ Music Directory ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
    "/home/y0usaf/Music" = {
      device = "/dev/disk/by-uuid/9df24ce7-8abe-4a4b-9c9d-1a5c1c894051";
      fsType = "btrfs";
      options = ["subvol=@music"];
    };

    #‚îÄ‚îÄ üéÆ Steam Directory ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
    "/home/y0usaf/.local/share/Steam" = {
      device = "/dev/disk/by-uuid/9df24ce7-8abe-4a4b-9c9d-1a5c1c894051";
      fsType = "btrfs";
      options = ["subvol=@steam"];
    };

    #‚îÄ‚îÄ üíæ Swap Configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
    "/swap" = {
      device = "/dev/disk/by-uuid/32ad19b5-88df-4e63-92d2-d5a150ad65c5";
      fsType = "btrfs";
      options = ["subvol=@swap" "nodatacow"];
    };
  };

  swapDevices = [
    {
      device = "/swap/swapfile";
      size = 96768; # Increased to match RAM size for hibernation (96GB + 768MB)
    }
  ];

  #‚îÄ‚îÄ üåê Network Configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp96s0.useDHCP = lib.mkDefault true;

  #‚îÄ‚îÄ üíª Platform Settings ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  powerManagement = {
    enable = true;
    # Further options such as laptop mode, backlight controls, etc.
  };
}
</file>

<file path="lib/flake/maid.nix">
###############################################################################
# Maid Integration Module
# Handles nix-maid integration and home module configuration
###############################################################################
{hostsDir ? ../../hosts}: {
  # Create NixOS module for maid integration
  mkNixosModule = {
    inputs,
    hostname,
  }: {
    config,
    pkgs,
    ...
  }: let
    # Read the host configuration directly
    hostConfig = import (hostsDir + "/${hostname}/default.nix") {inherit pkgs inputs;};

    # Extract home configuration from host config
    homeConfig = hostConfig.home or {};
  in {
    # Import nix-maid module
    imports = [
      inputs.nix-maid.nixosModules.default
    ];

    # Apply home configuration directly
    config = {
      home = homeConfig;

      # Initialize maid for the user
      users.users.y0usaf.maid = {
        packages = [];
      };
    };
  };
}
</file>

<file path="lib/generators/default.nix">
{helpers, ...}: {
  imports = helpers.importModules ./.;
}
</file>

<file path="lib/generators/toHyprconf.nix">
# Sophisticated Hyprland configuration generator
# Based on Home Manager's implementation with additional enhancements
lib: let
  inherit
    (builtins)
    all
    isAttrs
    isList
    removeAttrs
    ;
  inherit (lib.attrsets) filterAttrs mapAttrsToList;
  inherit (lib.generators) toKeyValue;
  inherit (lib.lists) foldl replicate;
  inherit
    (lib.strings)
    concatStrings
    concatStringsSep
    concatMapStringsSep
    hasPrefix
    ;
  inherit (lib.types) package;

  # Special ordering rules for certain sections
  # Some attributes need to be defined before others within the same section
  sectionOrderingRules = {
    animations = ["bezier" "animation"];
  };

  # Core Hyprland configuration generator
  toHyprconf = {
    attrs,
    indentLevel ? 0,
    importantPrefixes ? ["$"],
  }: let
    initialIndent = concatStrings (replicate indentLevel "  ");

    toHyprconf' = indent: attrs: let
      # Separate sections (nested attribute sets or lists of attribute sets)
      sections = filterAttrs (_: v: isAttrs v || (isList v && all isAttrs v)) attrs;

      # Generate section configuration with special ordering
      mkSection = n: attrs:
        if isList attrs
        then (concatMapStringsSep "\n" (a: mkSection n a) attrs)
        else let
          # Check if this section has special ordering rules
          hasOrderingRules = builtins.hasAttr n sectionOrderingRules;

          # Apply special ordering if rules exist
          processedAttrs =
            if hasOrderingRules
            then let
              orderingRule = sectionOrderingRules.${n};
              allKeys = builtins.attrNames attrs;

              # Separate keys into ordered and unordered
              orderedKeys = builtins.filter (key: builtins.elem key orderingRule) allKeys;
              unorderedKeys = builtins.filter (key: !(builtins.elem key orderingRule)) allKeys;

              # Sort ordered keys according to the rule
              sortedOrderedKeys = builtins.filter (ruleKey: builtins.elem ruleKey orderedKeys) orderingRule;

              # Combine in the correct order: sorted ordered keys first, then unordered keys
              finalKeyOrder = sortedOrderedKeys ++ unorderedKeys;

              # Reconstruct attrs in the correct order
              orderedAttrs = lib.listToAttrs (map (key: {
                  name = key;
                  value = attrs.${key};
                })
                finalKeyOrder);
            in
              orderedAttrs
            else attrs;
        in ''
          ${indent}${n} {
          ${toHyprconf' "  ${indent}" processedAttrs}${indent}}
        '';

      # Generate key-value fields
      mkFields = toKeyValue {
        listsAsDuplicateKeys = true;
        inherit indent;
      };

      # All non-section fields
      allFields = filterAttrs (_: v: !(isAttrs v || (isList v && all isAttrs v))) attrs;

      # Check if field name has important prefix (like $ for variables)
      isImportantField = n: _:
        foldl (acc: prev:
          if hasPrefix prev n
          then true
          else acc)
        false
        importantPrefixes;

      # Check if field should come before sections (like bezier)
      isEarlyField = n: _: n == "bezier";

      # Separate important fields (variables, etc.) to be placed first
      importantFields = filterAttrs isImportantField allFields;
      # Separate early fields (like bezier) to be placed before sections
      earlyFields = filterAttrs isEarlyField (removeAttrs allFields (mapAttrsToList (n: _: n) importantFields));
      # Regular fields come after sections
      regularFields = removeAttrs allFields (mapAttrsToList (n: _: n) (importantFields // earlyFields));
    in
      # Order: important fields first, then early fields (bezier), then sections, then regular fields
      mkFields importantFields
      + mkFields earlyFields
      + concatStringsSep "\n" (mapAttrsToList mkSection sections)
      + mkFields regularFields;
  in
    toHyprconf' initialIndent attrs;

  # Plugin configuration generator for Hyprland
  # Handles both package derivations and string paths
  pluginsToHyprconf = plugins: importantPrefixes:
    toHyprconf {
      attrs = {
        plugin = let
          mkEntry = entry:
            if package.check entry
            then "${entry}/lib/lib${entry.pname}.so"
            else entry;
        in
          map mkEntry plugins;
      };
      inherit importantPrefixes;
    };

  # Advanced configuration generator with validation
  toHyprconfAdvanced = {
    attrs,
    indentLevel ? 0,
    importantPrefixes ? ["$"],
    validateConfig ? false,
    sortSections ? true,
  }: let
    # Optional validation for common Hyprland configuration issues
    validateAttrs = attrs:
      if validateConfig
      then
        # Add validation logic here if needed
        # For now, just pass through
        attrs
      else attrs;

    # Optional section sorting for consistent output
    sortedAttrs =
      if sortSections
      then let
        sortedKeys = builtins.sort (a: b: a < b) (builtins.attrNames attrs);
      in
        lib.genAttrs sortedKeys (key: attrs.${key})
      else attrs;

    processedAttrs = validateAttrs sortedAttrs;
  in
    toHyprconf {
      inherit indentLevel importantPrefixes;
      attrs = processedAttrs;
    };

  # Utility function to merge multiple Hyprland configurations
  mergeHyprconfigs = configs:
    lib.foldl lib.recursiveUpdate {} configs;

  # Generate configuration with common Hyprland structure
  mkHyprlandConfig = {
    general ? {},
    decoration ? {},
    animations ? {},
    input ? {},
    gestures ? {},
    misc ? {},
    binds ? {},
    windowrule ? [],
    windowrulev2 ? [],
    layerrule ? [],
    workspace ? [],
    monitor ? [],
    exec-once ? [],
    exec ? [],
    env ? [],
    plugins ? [],
    source ? [],
    ...
  } @ config: let
    # Remove known sections from passthrough
    knownSections = [
      "general"
      "decoration"
      "animations"
      "input"
      "gestures"
      "misc"
      "binds"
      "windowrule"
      "windowrulev2"
      "layerrule"
      "workspace"
      "monitor"
      "exec-once"
      "exec"
      "env"
      "plugins"
      "source"
    ];
    extraConfig = removeAttrs config knownSections;

    baseConfig =
      {
        inherit general decoration animations input gestures misc binds;
        inherit windowrule windowrulev2 layerrule workspace monitor;
        "exec-once" = exec-once;
        inherit exec env source;
      }
      // extraConfig;
  in
    toHyprconf {
      attrs = baseConfig;
      importantPrefixes = ["$" "exec" "source"];
    }
    + (
      if plugins != []
      then "\n" + pluginsToHyprconf plugins ["$"]
      else ""
    );
in {
  inherit
    toHyprconf
    pluginsToHyprconf
    toHyprconfAdvanced
    mergeHyprconfigs
    mkHyprlandConfig
    ;
}
</file>

<file path="lib/scripts/cattree.sh">
#!/usr/bin/env bash

# cattree.sh - A script that combines tree and bat functionality
# Shows directory structure and file contents with proper indentation

set -e

# Check for required dependencies
check_dependencies() {
  if ! command -v bat &> /dev/null; then
    if command -v batcat &> /dev/null; then
      # On some systems, bat is installed as batcat
      alias bat="batcat"
    else
      echo "Error: 'bat' is required but not installed."
      echo "Please install it and try again."
      exit 1
    fi
  fi
}

# Default values
MAX_DEPTH=3
MAX_FILE_SIZE=10000 # in bytes
SHOW_HIDDEN=false
INDENT_SIZE=2
COLOR_MODE="auto"
TERM_WIDTH=$(tput cols 2>/dev/null || echo 80)

# Function to print usage information
print_usage() {
  echo "Usage: cattree [OPTIONS] [PATH]"
  echo "Options:"
  echo "  -d, --max-depth DEPTH      Maximum depth to traverse (default: $MAX_DEPTH)"
  echo "  -s, --max-size SIZE        Maximum file size in bytes to display (default: $MAX_FILE_SIZE)"
  echo "  -a, --all                  Show hidden files and directories"
  echo "  -i, --indent SIZE          Indentation size (default: $INDENT_SIZE)"
  echo "  -c, --color MODE           Color mode: always, never, auto (default: $COLOR_MODE)"
  echo "  -w, --width WIDTH          Terminal width for wrapping (default: auto-detected)"
  echo "  -h, --help                 Show this help message"
  echo ""
  echo "PATH can be a directory or a file. If not specified, the current directory is used."
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -d|--max-depth)
      MAX_DEPTH="$2"
      shift 2
      ;;
    -s|--max-size)
      MAX_FILE_SIZE="$2"
      shift 2
      ;;
    -a|--all)
      SHOW_HIDDEN=true
      shift
      ;;
    -i|--indent)
      INDENT_SIZE="$2"
      shift 2
      ;;
    -c|--color)
      COLOR_MODE="$2"
      shift 2
      ;;
    -w|--width)
      TERM_WIDTH="$2"
      shift 2
      ;;
    -h|--help)
      print_usage
      exit 0
      ;;
    -*)
      echo "Unknown option: $1"
      print_usage
      exit 1
      ;;
    *)
      TARGET_PATH="$1"
      shift
      ;;
  esac
done

# Check dependencies
check_dependencies

# Set target path to current directory if not specified
TARGET_PATH="${TARGET_PATH:-.}"

# Check if path exists
if [[ ! -e "$TARGET_PATH" ]]; then
  echo "Error: '$TARGET_PATH' does not exist"
  exit 1
fi

# Function to create a horizontal line of specified length
create_horizontal_line() {
  local length=$1
  local char=$2
  local line=""
  for ((i=0; i<length; i++)); do
    line="${line}${char}"
  done
  echo "$line"
}

# Function to display file contents with proper indentation and syntax highlighting
display_file_contents() {
  local file=$1
  local prefix=$2
  local margin_size=${#prefix}
  local content_indent="    "
  local total_indent="${prefix}${content_indent}"
  local indent_size=$((margin_size + ${#content_indent}))
  
  # Calculate available width for content
  local content_width=$((TERM_WIDTH - indent_size - 2)) # -2 for the box character and space
  
  # Check file size
  local size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
  if [[ $size -gt $MAX_FILE_SIZE ]]; then
    echo "${prefix}${content_indent}[File too large (${size} bytes), contents not shown]"
    return
  fi
  
  # Simple binary file check - try to read the first few bytes
  if [[ -n "$(LC_ALL=C tr -d '[:print:][:space:]' < "$file" | head -c 1)" ]]; then
    echo "${prefix}${content_indent}[Binary file, contents not shown]"
    return
  fi
  
  # Get the file extension for language detection
  local ext="${file##*.}"
  
  # Create horizontal lines for the box
  local horizontal_line=$(create_horizontal_line "$content_width" "‚îÄ")
  
  # Display file contents with box drawing
  echo "${prefix}${content_indent}‚îå${horizontal_line}"
  
  # Create a temporary file for the bat output
  local tmp_file=$(mktemp)
  
  # Run bat with forced colors and save to temp file
  # Use --color=always to force color output regardless of terminal settings
  bat --color=always --style=plain --language="${ext}" --wrap=character --terminal-width=$content_width "$file" > "$tmp_file"
  
  # Read the temp file and add our prefix, preserving ANSI color codes
  while IFS= read -r line; do
    echo -e "${prefix}${content_indent}‚îÇ ${line}"
  done < "$tmp_file"
  
  # Clean up
  rm -f "$tmp_file"
  
  echo "${prefix}${content_indent}‚îî${horizontal_line}"
}

# Tree characters
TREE_BRANCH="‚îú‚îÄ‚îÄ "
TREE_CORNER="‚îî‚îÄ‚îÄ "
TREE_VERTICAL="‚îÇ   "
TREE_SPACE="    "

# Main function to recursively display directory structure and file contents
cattree() {
  local dir=$1
  local depth=$2
  local prefix=$3
  
  # List all files and directories in the current directory
  local items=()
  if [[ "$SHOW_HIDDEN" == "true" ]]; then
    mapfile -t items < <(ls -A "$dir" | sort)
  else
    mapfile -t items < <(ls "$dir" | sort)
  fi
  
  local count=${#items[@]}
  local index=0
  
  for item in "${items[@]}"; do
    index=$((index + 1))
    local is_last=$([[ $index -eq $count ]] && echo true || echo false)
    local item_path="$dir/$item"
    
    # Skip if item doesn't exist (might have been deleted)
    [[ ! -e "$item_path" ]] && continue
    
    # Print item name with proper indentation and tree structure
    if [[ "$is_last" == "true" ]]; then
      echo "${prefix}${TREE_CORNER}${item}"
      new_prefix="${prefix}${TREE_SPACE}"
    else
      echo "${prefix}${TREE_BRANCH}${item}"
      new_prefix="${prefix}${TREE_VERTICAL}"
    fi
    
    # If item is a directory, recursively process it
    if [[ -d "$item_path" && $depth -lt $MAX_DEPTH ]]; then
      cattree "$item_path" $((depth + 1)) "$new_prefix"
    # If item is a file, display its contents
    elif [[ -f "$item_path" ]]; then
      display_file_contents "$item_path" "$new_prefix"
    fi
  done
}

# Handle both files and directories
if [[ -d "$TARGET_PATH" ]]; then
  # It's a directory, process it normally
  echo "$TARGET_PATH"
  cattree "$TARGET_PATH" 0 ""
else
  # It's a file, just display its contents
  echo "$TARGET_PATH"
  display_file_contents "$TARGET_PATH" ""
fi

exit 0
</file>

<file path="lib/scripts/shutdown-tracker.sh">
#!/usr/bin/env bash
###############################################################################
# Shutdown Issue Tracker Script
# Helps identify services causing shutdown delays
###############################################################################

echo "=== Shutdown Issue Analysis ==="
echo

echo "1. Services that took longest to stop (last boot):"
systemd-analyze blame | head -10
echo

echo "2. Critical chain analysis:"
systemd-analyze critical-chain
echo

echo "3. Recent shutdown/stop events from journal:"
journalctl -b -1 --no-pager | grep -E "(Stopping|Failed|timeout|kill|SIGTERM|SIGKILL)" | tail -20
echo

echo "4. Services with stop timeouts:"
journalctl -b -1 --no-pager | grep -i "stop.*timeout" | tail -10
echo

echo "5. Failed services:"
systemctl --failed --no-pager
echo

echo "=== Tips ==="
echo "- Run this script after a reboot to analyze the previous shutdown"
echo "- Look for services with high stop times in section 1"
echo "- Check section 3 for timeout/kill messages"
echo "- Use 'journalctl -u <service-name>' to investigate specific services"
echo "- Consider reducing TimeoutStopSec for problematic services"
</file>

<file path="lib/template.nix">
###############################################################################
# Module Template
# Brief description of what this module does
# - Key feature 1
# - Key feature 2
# - Key feature 3
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.example;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.example = {
    enable = lib.mkEnableOption "example module";

    setting1 = lib.mkOption {
      type = lib.types.str;
      default = "default value";
      description = "Description of setting1";
    };

    setting2 = lib.mkOption {
      type = lib.types.int;
      default = 42;
      example = 100;
      description = "Description of setting2";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Environment Variables
    ###########################################################################
    programs.zsh = {
      envExtra = ''
        # Module-specific environment variables
        export EXAMPLE_VAR="${cfg.setting1}"
      '';
    };

    ###########################################################################
    # Systemd Services
    ###########################################################################
    systemd.user.services = {
      example-service = {
        Unit = {
          Description = "Example Service";
          After = ["graphical-session.target"];
          PartOf = ["graphical-session.target"];
        };
        Service = {
          Type = "simple";
          ExecStart = "${pkgs.example}/bin/example";
          Restart = "on-failure";
          RestartSec = "5s";
        };
        Install = {
          WantedBy = ["graphical-session.target"];
        };
      };
    };

    ###########################################################################
    # Packages
    ###########################################################################
    home.packages = with pkgs; [
      # package1
      # package2
      # package3
    ];

    ###########################################################################
    # Programs
    ###########################################################################
    programs.example = {
      enable = true;
      # Additional program configuration
    };

    ###########################################################################
    # Desktop Entries
    ###########################################################################
    xdg.desktopEntries = {
      "example" = {
        name = "Example Application";
        exec = "example %U";
        terminal = false;
        categories = ["Category1" "Category2"];
        comment = "Example application";
        icon = "example-icon";
        mimeType = ["x-scheme-handler/example"];
      };
    };

    ###########################################################################
    # Configuration Files
    ###########################################################################
    xdg.configFile = {
      "example/config.json".text = ''
        {
          "setting1": "${cfg.setting1}",
          "setting2": ${toString cfg.setting2}
        }
      '';
    };
  };
}
</file>

<file path="system/boot/kernel.nix">
###############################################################################
# Kernel Configuration
# Kernel settings and modules:
# - Kernel packages
# - Modules configuration
# - System control parameters
###############################################################################
{
  lib,
  pkgs,
  hostSystem,
  ...
}: {
  config = {
    boot = {
      # Use a custom kernel package variant.
      kernelPackages = pkgs.linuxPackages_cachyos;
      # Load extra kernel modules for specific hardware functions.
      kernelModules =
        [
          "kvm-amd"
          "k10temp"
          "nct6775"
          "ashmem_linux"
          "binder_linux"
        ]
        ++ lib.optionals hostSystem.hardware.amdgpu.enable ["amdgpu"];
      kernel.sysctl = {
        "kernel.unprivileged_userns_clone" = 1; # Allow unprivileged processes to create user namespaces.
      };
      # AMD GPU kernel parameters (conditional)
      kernelParams = lib.mkIf hostSystem.hardware.amdgpu.enable [
        "amdgpu.ppfeaturemask=0xffffffff"
        "amdgpu.dpm=1"
      ];
    };
  };
}
</file>

<file path="system/boot/loader.nix">
###############################################################################
# Boot Loader Configuration
# Specific settings for boot loader and EFI:
# - Boot loader settings
# - EFI configuration
###############################################################################
_: {
  config = {
    boot.loader = {
      systemd-boot = {
        enable = true; # Use systemd-boot as the boot loader.
        configurationLimit = 20; # Retain up to 20 boot configurations.
      };
      efi = {
        canTouchEfiVariables = true; # Allow modifying EFI variables.
        efiSysMountPoint = "/boot"; # Mount point for the EFI partition.
      };
    };
  };
}
</file>

<file path="system/core/cachix.nix">
{
  config = {
    nix.settings = {
      substituters = [
        "https://hyprland.cachix.org"
        "https://chaotic-nyx.cachix.org"
        "https://nyx.cachix.org"
        "https://cuda-maintainers.cachix.org"
        "https://nix-community.cachix.org"
        "https://nix-gaming.cachix.org"
      ];

      trusted-public-keys = [
        "hyprland.cachix.org-1:a7pgxzMz7+chwVL3/pzj6jIBMioiJM7ypFP8PwtkuGc="
        "chaotic-nyx.cachix.org-1:HfnXSw4pj95iI/n17rIDy40agHj12WfF+Gqk6SonIT8="
        "nyx.cachix.org-1:xH6G0MO9PrpeGe7mHBtj1WbNzmnXr7jId2mCiq6hipE="
        "cuda-maintainers.cachix.org-1:0dq3bujKpuEPMCX6U4WylrUDZ9JyUG0VpVZa7CNfq5E="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "nix-gaming.cachix.org-1:nbjlureqMbRAxR1gJ/f3hxemL9svXaZF/Ees8vCUUs4="
      ];
    };
  };
}
</file>

<file path="system/core/lix.nix">
{
  config,
  lib,
  pkgs,
  ...
}: {
  options.programs.lix.enable = lib.mkEnableOption "whether to enable lix package";

  config = lib.mkIf config.programs.lix.enable {
    nix.package = pkgs.lix;
  };
}
</file>

<file path="system/core/nix-ld.nix">
# This module configures Nix-LD.
_: {
  config = {
    programs.nix-ld.enable = true;
  };
}
</file>

<file path="system/core/nix-tools.nix">
###############################################################################
# Core Nix Tools
# Essential Nix maintenance and development tools (always enabled)
# - alejandra: Nix code formatter
# - statix: Nix linter for best practices
# - deadnix: Dead code elimination for Nix
###############################################################################
{pkgs, ...}: {
  config = {
    ###########################################################################
    # Core System Packages
    ###########################################################################
    environment.systemPackages = with pkgs; [
      alejandra # Nix code formatter
      statix # Nix linter for best practices
      deadnix # Dead code elimination for Nix
    ];
  };
}
</file>

<file path="system/hardware/amd.nix">
###############################################################################
# AMD GPU Configuration Module
# - X server driver settings for AMD GPU
###############################################################################
{
  lib,
  hostSystem,
  ...
}: {
  config = {
    ###########################################################################
    # AMD GPU X Server Configuration (conditional)
    # X server driver settings for AMD GPU
    ###########################################################################
    services.xserver.videoDrivers = lib.mkIf hostSystem.hardware.amdgpu.enable ["amdgpu"];
  };
}
</file>

<file path="system/hardware/graphics.nix">
###############################################################################
# Graphics Configuration Module
# - General graphics settings
# - VAAPI and VDPAU packages
###############################################################################
{pkgs, ...}: {
  config = {
    ###########################################################################
    # Graphics Settings
    # Configuration for graphics drivers and packages
    ###########################################################################
    hardware.graphics = {
      enable = true;
      enable32Bit = true;
      extraPackages = with pkgs; [
        vaapiVdpau
        libvdpau-va-gl
      ];
    };
  };
}
</file>

<file path="system/hardware/i2c.nix">
###############################################################################
# I2C Bus Configuration Module
# - I2C bus settings for hardware monitoring
###############################################################################
_: {
  config = {
    ###########################################################################
    # I2C Configuration
    # Enable I2C bus for hardware monitoring
    ###########################################################################
    hardware.i2c.enable = true;
  };
}
</file>

<file path="system/hardware/nvidia.nix">
###############################################################################
# NVIDIA Configuration Module
# Comprehensive NVIDIA GPU configuration including:
# - Driver settings and optimizations
# - Power management
# - Application-specific rules
# - Wayland compatibility settings
###############################################################################
{
  config,
  lib,
  pkgs,
  hostSystem,
  ...
}: {
  config = lib.mkIf hostSystem.hardware.nvidia.enable {
    ###########################################################################
    # Kernel Parameters
    # Parameters to preserve video memory allocations for better Wayland support
    ###########################################################################
    boot.kernelParams = [
      "nvidia.NVreg_PreserveVideoMemoryAllocations=1"
    ];

    ###########################################################################
    # NVIDIA Driver and Hardware Configuration
    # Core driver settings, power management, and compatibility options
    ###########################################################################
    hardware.nvidia = {
      # Enable DRM kernel mode setting for better Wayland compatibility
      modesetting.enable = true;
      # Enable NVIDIA power management features for better battery life
      powerManagement.enable = true;
      # Use proprietary NVIDIA drivers instead of open-source Nouveau
      open = false;
      # Install nvidia-settings control panel
      nvidiaSettings = true;
      # Use the latest NVIDIA driver from kernel packages
      package = config.boot.kernelPackages.nvidiaPackages.stable;
    };

    ###########################################################################
    # CUDA Support (conditional)
    # Enable CUDA support for compute applications
    ###########################################################################
    hardware.graphics.extraPackages = lib.optionals (hostSystem.hardware.nvidia.cuda.enable or false) [
      pkgs.cudatoolkit
    ];

    ###########################################################################
    # Environment Configuration
    ###########################################################################
    environment = {
      # Make CUDA available system-wide
      systemPackages = lib.optionals (hostSystem.hardware.nvidia.cuda.enable or false) [
        pkgs.cudaPackages.cudnn
      ];

      # NVIDIA Application Profiles
      # Create the NVIDIA application profiles configuration file
      # This creates a custom profile for preventing video memory reuse
      etc = {
        # Use lib.mkForce to override any conflicting settings
        "nvidia/nvidia-application-profiles-rc".text = lib.mkForce ''
          {
            "rules": [
              {
                "pattern": {
                  "feature": "procname",
                  "matches": ".Hyprland-wrapped"
                },
                "profile": "No VidMem Reuse"
              },
              {
                "pattern": {
                  "feature": "procname",
                  "matches": "electron"
                },
                "profile": "No VidMem Reuse"
              },
              {
                "pattern": {
                  "feature": "procname",
                  "matches": ".firefox-wrapped"
                },
                "profile": "No VidMem Reuse"
              },
              {
                "pattern": {
                  "feature": "procname",
                  "matches": "firefox"
                },
                "profile": "No VidMem Reuse"
              }
            ]
          }
        '';
      };

      # NVIDIA-specific environment settings for Wayland compatibility
      variables = {
        # Enable NVIDIA on Wayland
        GBM_BACKEND = "nvidia-drm";
        LIBVA_DRIVER_NAME = "nvidia";
        WLR_NO_HARDWARE_CURSORS = "1";
        __GLX_VENDOR_LIBRARY_NAME = "nvidia";
        # Additional NVIDIA capabilities
        NVIDIA_DRIVER_CAPABILITIES = "all";
        # Waydroid-specific NVIDIA settings
        WAYDROID_EXTRA_ARGS = "--gpu-mode host";
        GALLIUM_DRIVER = "nvidia";
        LIBGL_DRIVER_NAME = "nvidia";
      };
    };

    ###########################################################################
    # Video Driver Configuration
    # X server driver settings
    ###########################################################################
    services.xserver.videoDrivers = ["nvidia"];

    ###########################################################################
    # Security & Permissions
    # PolicyKit rules for NVIDIA tools access
    ###########################################################################
    security.polkit.extraConfig = ''
      polkit.addRule(function(action, subject) {
        if (action.id == "org.freedesktop.policykit.exec" &&
            action.lookup("command_line").indexOf("nvidia-smi") >= 0) {
            return polkit.Result.YES;
        }
      });
    '';
  };
}
</file>

<file path="system/hardware/video.nix">
###############################################################################
# Video Devices Configuration Module
# Hardware configuration for video peripherals:
# - Camera and video device permissions
# - Capture device settings
###############################################################################
_: {
  config = {
    ###########################################################################
    # Video Device Rules
    # Configure permissions for video devices for OBS and other capture software
    ###########################################################################
    services.udev.extraRules = ''
      # Video device permissions for capture software
      KERNEL=="video[0-9]*", GROUP="video", MODE="0660"
    '';
  };
}
</file>

<file path="system/networking/firewall.nix">
###############################################################################
# Firewall Configuration
# Network security settings:
# - Firewall rules and port management
###############################################################################
_: {
  config = {
    ###########################################################################
    # Firewall Configuration
    # Network security and port management
    ###########################################################################
    networking.firewall = {
      enable = true;
      allowedTCPPorts = [
        25565 # Minecraft server
      ];
      allowedUDPPorts = [
        # Add UDP ports if needed
      ];
    };
  };
}
</file>

<file path="system/networking/networkmanager.nix">
###############################################################################
# Network Manager Configuration
# Network management service settings:
# - NetworkManager configuration
###############################################################################
_: {
  config = {
    ###########################################################################
    # Networking Configuration
    # Network management
    ###########################################################################
    networking.networkmanager.enable = true; # Turn on NetworkManager to manage network connections.
  };
}
</file>

<file path="system/networking/xdg-portal.nix">
###############################################################################
# XDG Desktop Portal Configuration
# Desktop integration services for applications
###############################################################################
{pkgs, ...}: {
  config = {
    ###########################################################################
    # XDG Desktop Portal
    # Desktop integration services for applications
    ###########################################################################
    xdg.portal = {
      enable = true;
      xdgOpenUsePortal = true; # Route xdg-open calls through the portal for better integration.
      extraPortals = [
        pkgs.xdg-desktop-portal-gtk # Add GTK-based portal support.
      ];
    };
  };
}
</file>

<file path="system/programs/hyprland.nix">
###############################################################################
# Hyprland Window Manager Configuration
# Hyprland window manager setup:
# - Hyprland package and configuration
# - XWayland support
###############################################################################
{
  pkgs,
  inputs,
  config,
  ...
}: {
  config = {
    ###########################################################################
    # Hyprland Window Manager
    # Tiling window manager for Wayland
    ###########################################################################
    programs.hyprland = {
      enable = true;
      xwayland.enable = true; # Enable XWayland to support legacy X11 apps.
      # Use the Hyprland package corresponding to the current system.
      package = inputs.hyprland.packages.${pkgs.system}.hyprland;
      portalPackage = inputs.hyprland.packages.${pkgs.system}.xdg-desktop-portal-hyprland;
    };
  };
}
</file>

<file path="system/programs/obs.nix">
{config, ...}: {
  boot = {
    kernelModules = ["v4l2loopback"];
    extraModulePackages = with config.boot.kernelPackages; [v4l2loopback];
    extraModprobeConfig = ''
      # exclusive_caps: Chromium, Electron, etc. will only show device when actually streaming
      options v4l2loopback exclusive_caps=1
    '';
  };

  # UDEV rules for video devices have been moved to the system/modules/hardware/video.nix file

  # Polkit is required for some desktop/portal integrations
  security.polkit.enable = true;
}
</file>

<file path="system/security/polkit.nix">
###############################################################################
# PolicyKit Security Module
# Fine-grained permission control:
# - Application privilege escalation control
# - Granular authentication policies
# - Secure access to system services
###############################################################################
_: {
  config = {
    ###########################################################################
    # PolicyKit Configuration
    # Configure fine-grained permission control for applications
    ###########################################################################
    security.polkit.enable = true; # Enable PolicyKit for fine-grained permission control
  };
}
</file>

<file path="system/security/rtkit.nix">
###############################################################################
# RTKit Security Module
# Real-time kit for audio/video tasks:
# - Enables real-time priority for audio/video applications
# - Ensures smoother multimedia performance
###############################################################################
_: {
  config = {
    ###########################################################################
    # RTKit Configuration
    # Enable real-time priority management for multimedia applications
    ###########################################################################
    security.rtkit.enable = true; # Enable real-time priority management (often needed for audio/video tasks)
  };
}
</file>

<file path="system/services/audio.nix">
###############################################################################
# Audio Service Configuration
# Audio service via Pipewire:
# - Pipewire audio server
# - ALSA and PulseAudio compatibility
###############################################################################
_: {
  config = {
    ###########################################################################
    # Audio via Pipewire
    # Modern audio server with compatibility layers
    ###########################################################################
    services.pipewire = {
      enable = true;
      alsa = {
        enable = true; # Enable ALSA compatibility layer.
        support32Bit = true; # Support for 32-bit audio applications.
      };
      pulse.enable = true; # Enable PulseAudio emulation for compatibility.
    };
  };
}
</file>

<file path="system/services/dbus.nix">
###############################################################################
# D-Bus Service Configuration
# Inter-process communication system:
# - D-Bus service configuration
# - Package dependencies
###############################################################################
{pkgs, ...}: {
  config = {
    ###########################################################################
    # D-Bus Configuration
    # Inter-process communication system
    ###########################################################################
    services.dbus = {
      enable = true;
      packages = [
        pkgs.dconf # A backend for system configuration.
        pkgs.gcr # GNOME crypto resource management library.
      ];
    };
  };
}
</file>

<file path="system/services/scx.nix">
###############################################################################
# SCX Service Configuration
# System scheduling and tuning service:
# - SCX scheduler configuration
###############################################################################
{pkgs, ...}: {
  config = {
    ###########################################################################
    # SCX Custom Service
    # System scheduling and tuning service
    ###########################################################################
    services.scx = {
      enable = true; # Activate the SCX service.
      scheduler = "scx_lavd"; # Specify the scheduler mode.
      package = pkgs.scx.rustscheds; # Use the rust-based scheduler package.
    };
  };
}
</file>

<file path=".gitignore">
lib/dotfiles
tmp/
</file>

<file path="home/core/default.nix">
###############################################################################
# Core Modules Collection (Maid)
# Imports all core-related Home modules
###############################################################################
{lib, ...}: {
  imports = lib.importModules ./.;
}
</file>

<file path="home/core/directories.nix">
#‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üîß DIRECTORIES MODULE üîß ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê#
{lib, ...}: let
  inherit (lib) t mkOpt dirModule;
in {
  options.home.directories = {
    flake = mkOpt dirModule "The directory where the flake lives.";
    music = mkOpt dirModule "Directory for music files.";
    dcim = mkOpt dirModule "Directory for pictures (DCIM).";
    steam = mkOpt dirModule "Directory for Steam.";
    wallpapers = mkOpt (t.submodule {
      options = {
        static = mkOpt dirModule "Wallpaper directory for static images.";
        video = mkOpt dirModule "Wallpaper directory for videos.";
      };
    }) "Wallpaper directories configuration";
  };
}
</file>

<file path="home/dev/nvim/default.nix">
{lib, ...}: {
  imports = lib.importModules ./.;
}
</file>

<file path="home/dev/default.nix">
{lib, ...}: {
  imports = lib.importModules ./.;
}
</file>

<file path="home/dev/python.nix">
###############################################################################
# Python Development Module (Maid Version)
# Python development environment with nix-maid configuration
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.dev.python;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.dev.python = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Enable Python development environment";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = with pkgs; [
        python3
        python312
        uv
        ninja
        meson
        pkg-config
        cacert
        stdenv.cc.cc.lib
        zlib
        libGL
        glib
        xorg.libX11
        xorg.libXext
        xorg.libXrender
        gcc
        binutils
      ];

      ###########################################################################
      # Shell Configuration Files
      ###########################################################################
      file.home = {
        "{{xdg_config_home}}/zsh/.zshenv".text = lib.mkAfter ''
          # Python development environment
          export PYTHONUSERBASE="$HOME/.local/share/python"
          export PIP_CACHE_DIR="{{xdg_cache_home}}/pip"
          export VIRTUAL_ENV_HOME="$HOME/.local/share/venvs"
          export SSL_CERT_FILE="${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt"
          export REQUESTS_CA_BUNDLE="${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt"
          export NIX_LD_LIBRARY_PATH="${lib.makeLibraryPath [
            pkgs.stdenv.cc.cc.lib
            pkgs.zlib
            pkgs.libGL
            pkgs.glib
            pkgs.xorg.libX11
            pkgs.xorg.libXext
            pkgs.xorg.libXrender
          ]}"
          export NIX_LD="${pkgs.stdenv.cc.bintools.dynamicLinker}"
          export CC="${pkgs.gcc}/bin/gcc"
          export LD="${pkgs.binutils}/bin/ld"
          export PATH="$PYTHONUSERBASE/bin:$PATH"
          export PYTHONPATH="$PYTHONUSERBASE/lib/python3.12/site-packages:$PYTHONPATH"
        '';

        "{{xdg_config_home}}/zsh/.zshrc".text = lib.mkAfter ''
          # Python development aliases
          alias py="python3"
          alias pip="pip3"
          alias venv="python3 -m venv"
          alias activate="source venv/bin/activate"

          # UV aliases
          alias uv-init="uv init"
          alias uv-add="uv add"
          alias uv-run="uv run"

          # Virtual environment helpers
          mkvenv() {
            if [[ -z "$1" ]]; then
              python3 -m venv venv
            else
              python3 -m venv "$1"
            fi
          }

          workon() {
            if [[ -z "$1" ]]; then
              if [[ -d "venv" ]]; then
                source venv/bin/activate
              else
                echo "No venv directory found"
              fi
            else
              if [[ -d "$VIRTUAL_ENV_HOME/$1" ]]; then
                source "$VIRTUAL_ENV_HOME/$1/bin/activate"
              else
                echo "Virtual environment $1 not found"
              fi
            fi
          }
        '';
      };

      ###########################################################################
      # Directory Setup via tmpfiles
      ###########################################################################
      systemd.tmpfiles.dynamicRules = [
        "d {{home}}/.local/share/python 0755 {{user}} {{group}} - -"
        "d {{xdg_cache_home}}/pip 0755 {{user}} {{group}} - -"
        "d {{home}}/.local/share/venvs 0755 {{user}} {{group}} - -"
      ];
    };
  };
}
</file>

<file path="home/dev/repomix.nix">
###############################################################################
# Repomix Development Module (Maid Version)
# Tool to pack repository contents to single file for AI consumption
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.dev.repomix;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.dev.repomix = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Enable repomix tool for AI-friendly repository packing";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = with pkgs; [
        repomix
      ];
    };
  };
}
</file>

<file path="home/gaming/balatro/default.nix">
###############################################################################
# Balatro Gaming Module
# Master import file for all Balatro-related modules
###############################################################################
{lib, ...}: {
  imports = lib.importModules ./.;
}
</file>

<file path="home/gaming/emulation/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="home/gaming/marvel-rivals/default.nix">
###############################################################################
# Marvel Rivals Gaming Module
# Master import file for all Marvel Rivals-related modules
###############################################################################
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="home/gaming/wukong/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="home/gaming/default.nix">
{lib, ...}: {imports = lib.importModules ./. ++ lib.importDirs ./.;}
</file>

<file path="home/gaming/shader-cache.nix">
###############################################################################
# Steam Shader Cache Configuration - Nix-Maid Version
# Simple shader background processing thread configuration
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: {
  config = {
    users.users.y0usaf.maid.file.xdg_config."steam/steam_dev.cfg".text = ''
      unShaderBackgroundProcessingThreads ${toString config.nix.settings.max-jobs}
    '';
  };
}
</file>

<file path="home/programs/firefox/packages.nix">
###############################################################################
# Firefox Packages Module
# Firefox package installation and environment variables
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  username = "y0usaf";
in {
  config = lib.mkIf config.home.programs.firefox.enable {
    users.users.${username}.maid = {
      packages = with pkgs; [
        firefox
      ];

      file.home = {
        # Environment variables
        ".profile".text = lib.mkAfter ''
          # Firefox environment variables
          export MOZ_ENABLE_WAYLAND=1
          export MOZ_USE_XINPUT2=1
        '';
      };
    };
  };
}
</file>

<file path="home/programs/firefox/performance.nix">
###############################################################################
# Firefox Performance Settings Module
# Common settings for Firefox profiles with hardware acceleration and performance optimizations
###############################################################################
{
  config,
  lib,
  ...
}: let
  username = "y0usaf";

  # Common settings for Firefox profiles
  commonSettings = {
    # Enable userChrome customizations (needed for the CSS)
    "toolkit.legacyUserProfileCustomizations.stylesheets" = true;

    # Disable hardware acceleration if using Nvidia
    "gfx.webrender.all" =
      if config.system.hardware.nvidia.enable or false
      then false
      else true;
    "media.hardware-video-decoding.enabled" =
      if config.system.hardware.nvidia.enable or false
      then false
      else true;
    "media.ffmpeg.vaapi.enabled" =
      if config.system.hardware.nvidia.enable or false
      then false
      else true;
    "layers.acceleration.disabled" =
      if config.system.hardware.nvidia.enable or false
      then true
      else false;

    # Performance settings
    "browser.sessionstore.interval" = 15000; # Reduce writes to disk (default 15000)
    "network.http.max-persistent-connections-per-server" = 10; # Increase connections per server
    "browser.cache.disk.enable" = false; # Disable disk cache in favor of memory cache
    "browser.cache.memory.enable" = true;
    "browser.cache.memory.capacity" = 1048576; # 1GB memory cache
    "browser.sessionhistory.max_entries" = 50; # Reduce memory usage from session history
    "network.prefetch-next" = true; # Enable link prefetching
    "network.dns.disablePrefetch" = false;
    "network.predictor.enabled" = true;

    # Basic UI settings
    "browser.tabs.drawInTitlebar" = true;
    "browser.theme.toolbar-theme" = 0;

    # Enable Browser Toolbox and development features
    "devtools.chrome.enabled" = true;
    "devtools.debugger.remote-enabled" = true;
    "devtools.debugger.prompt-connection" = false;
    "browser.enabledE10S" = false;

    # Theme and UI settings
    "browser.theme.dark-private-windows" = false;

    # Development settings
    "dom.webcomponents.enabled" = true;
    "layout.css.shadow-parts.enabled" = true;
  };

  # Generate user.js content for Firefox profile
  userJsContent = lib.concatStringsSep "\n" (
    lib.mapAttrsToList (
      key: value: let
        jsValue =
          if builtins.isBool value
          then
            (
              if value
              then "true"
              else "false"
            )
          else if builtins.isInt value
          then toString value
          else if builtins.isString value
          then ''"${value}"''
          else toString value;
      in ''user_pref("${key}", ${jsValue});''
    )
    commonSettings
  );
in {
  config = lib.mkIf config.home.programs.firefox.enable {
    users.users.${username}.maid = {
      file.home = {
        # Default profile user.js (will be created if profile exists)
        ".mozilla/firefox/${username}.default/user.js".text = userJsContent;
        # Alternative profile paths (Firefox creates different profile names)
        ".mozilla/firefox/${username}.default-release/user.js".text = userJsContent;
      };
    };
  };
}
</file>

<file path="home/programs/firefox/policies.nix">
###############################################################################
# Firefox Policies Module
# Simple Firefox enterprise policies configuration
###############################################################################
{
  config,
  lib,
  ...
}: let
  username = "y0usaf";

  # Firefox policies.json content
  policiesContent = builtins.toJSON {
    policies = {
      DisableTelemetry = true;
      DisableFirefoxStudies = true;
      EnableTrackingProtection = {
        Value = true;
        Locked = false;
      };
      ExtensionSettings = {
        "*" = {
          installation_mode = "allowed";
          allowed_types = ["extension" "theme"];
        };
      };
    };
  };
in {
  config = lib.mkIf config.home.programs.firefox.enable {
    users.users.${username}.maid = {
      file.home = {
        # Firefox Policies (system-wide)
        ".mozilla/firefox/policies/policies.json".text = policiesContent;
      };
    };
  };
}
</file>

<file path="home/programs/default.nix">
###############################################################################
# Programs Modules Collection (Maid)
# Imports all program-related Home modules
###############################################################################
{lib, ...}: {
  imports = lib.importModules ./. ++ lib.importDirs ./.;
}
</file>

<file path="home/programs/discord.nix">
#===============================================================================
#                      üí¨ Discord Configuration (Maid) üí¨
#===============================================================================
# üöÄ Discord Canary
# üîß Performance optimizations
# üé® Integration with system theme
#===============================================================================
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.programs.discord;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.programs.discord = {
    enable = lib.mkEnableOption "Discord module";
    variant = lib.mkOption {
      type = lib.types.enum ["canary" "stable"];
      default = "canary";
      description = "Which Discord variant to install (canary or stable)";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      (
        if cfg.variant == "canary"
        then
          # Create a wrapper script in PATH for Discord Canary
          (writeShellScriptBin "discord-canary" ''
            exec ${(discord-canary.override {
              withOpenASAR = true;
              withVencord = true;
            })}/opt/DiscordCanary/DiscordCanary \
              --disable-smooth-scrolling \
              --disable-features=WebRtcAllowInputVolumeAdjustment \
              --disable-gpu-sandbox \
              --ignore-gpu-blocklist \
              --use-gl=swiftshader \
              "$@"
          '')
        else
          # Create a wrapper script in PATH for Discord Stable
          (writeShellScriptBin "discord" ''
            exec ${(discord.override {
              withOpenASAR = true;
              withVencord = true;
            })}/bin/discord \
              --disable-smooth-scrolling \
              --disable-features=WebRtcAllowInputVolumeAdjustment \
              --enable-gpu-rasterization \
              --enable-zero-copy \
              "$@"
          '')
      )
    ];
  };
}
</file>

<file path="home/services/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="home/services/ssh.nix">
###############################################################################
# SSH Configuration (Maid Version)
# Configures SSH client and agent for secure remote connections
# - SSH client configuration with proper permissions
# - SSH key management with auto-adding to agent
# - GitHub connection setup
# - SSH agent service
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.services.ssh;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.services.ssh = {
    enable = lib.mkEnableOption "SSH configuration module";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = with pkgs; [
        openssh
      ];

      ###########################################################################
      # SSH Client Configuration
      ###########################################################################
      file.home.".ssh/config".text = ''
        # Global SSH Configuration
        ForwardAgent yes
        AddKeysToAgent yes
        ServerAliveInterval 60
        ServerAliveCountMax 5
        ControlMaster auto
        ControlPath ~/.ssh/master-%r@%h:%p
        ControlPersist 10m
        SetEnv TERM=xterm-256color

        # GitHub Configuration
        Host github.com
            HostName github.com
            User git
            IdentityFile ~/Tokens/id_rsa_y0usaf
      '';

      ###########################################################################
      # SSH Agent Service
      ###########################################################################
      systemd.services.ssh-agent = {
        description = "SSH key agent";
        wantedBy = ["default.target"];
        serviceConfig = {
          Type = "forking";
          Environment = "SSH_AUTH_SOCK=%t/ssh-agent";
          ExecStart = "${pkgs.openssh}/bin/ssh-agent -a $SSH_AUTH_SOCK";
          ExecStartPost = "${pkgs.coreutils}/bin/systemctl --user set-environment SSH_AUTH_SOCK=$SSH_AUTH_SOCK";
        };
      };

      ###########################################################################
      # Shell Integration
      ###########################################################################
      file.home."{{xdg_config_home}}/zsh/.zshenv".text = lib.mkAfter ''
        # SSH Agent Integration
        export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent"
      '';
    };
  };
}
</file>

<file path="home/session/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="home/shell/default.nix">
###############################################################################
# Shell Modules Collection (Maid)
# Imports all shell-related Home modules
###############################################################################
{lib, ...}: {
  imports = lib.importModules ./.;
}
</file>

<file path="home/tools/default.nix">
###############################################################################
# Tools Modules Collection (Maid)
# Imports all tools-related Home modules
###############################################################################
{lib, ...}: {
  imports = lib.importModules ./.;
}
</file>

<file path="home/tools/nh.nix">
###############################################################################
# NH (Nix Helper) Tool Module (Nix-Maid Version)
# Provides shell integration and aliases for the NH flake helper
# - Custom nhs() function with option parsing
# - Convenient rebuild aliases
# - Flake directory configuration via NH_FLAKE environment variable
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.tools.nh;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.tools.nh = {
    enable = lib.mkEnableOption "nh (Nix Helper) shell integration";

    flake = lib.mkOption {
      type = with lib.types; nullOr (either singleLineStr path);
      default = null;
      description = ''
        The path that will be used for the NH_FLAKE environment variable.

        NH_FLAKE is used by nh as the default flake for performing actions,
        like 'nh os switch'. If not set, nh will look for a flake in the current
        directory or prompt for the flake path.
      '';
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      nh
    ];

    ###########################################################################
    # Shell Integration
    ###########################################################################
    users.users.y0usaf.maid.file.home."{{xdg_config_home}}/zsh/.zshrc".text = lib.mkAfter ''
      # Set NH_FLAKE environment variable for NH (Nix Helper)
      export NH_FLAKE="/home/y0usaf/nixos"

      # NixOS rebuild/switch function with proper argument parsing
      nhs() {
        clear
        local update=""
        local dry=""
        local OPTIND

        # Parse options using getopts
        while getopts "du" opt; do
          case $opt in
            d) dry="--dry" ;;
            u) update="--update" ;;
            *) echo "Invalid option: -$OPTARG" >&2 ;;
          esac
        done

        # Remove the parsed options from the arguments list
        shift $((OPTIND-1))

        # Execute nh command with appropriate flags and pass any remaining arguments
        nh os switch $update $dry "$@"
      }

      # NH convenience aliases
      alias nhd="nhs -d"        # Dry run
      alias nhu="nhs -u"        # Update flake inputs
      alias nhud="nhs -ud"      # Update + dry run
      alias nhc="nh clean all"  # Clean old generations
    '';
  };
}
</file>

<file path="home/tools/spotdl.nix">
###############################################################################
# SpotDL Module
# Tools for downloading music from Spotify
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.tools.spotdl;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.tools.spotdl = {
    enable = lib.mkEnableOption "SpotDL music downloading tools";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      ffmpeg # Required for media conversion
    ];

    ###########################################################################
    # Shell Aliases (added to .zshrc)
    ###########################################################################
    users.users.y0usaf.maid.file.home."{{xdg_config_home}}/zsh/.zshrc".text = lib.mkAfter ''

      # ----------------------------
      # SpotDL Aliases
      # ----------------------------
      # SpotDL aliases for downloading music
      alias spotm4a="uvx spotdl --format m4a --output '{title}'"
      alias spotmp3="uvx spotdl --format mp3 --output '{title}'"
    '';
  };
}
</file>

<file path="home/ui/cursor.nix">
###############################################################################
# Cursor Configuration
# Configures cursor themes for X11 and Wayland/Hyprland
# - Custom DeepinDarkV20 cursor themes
# - Separate X11 and Hyprland cursor packages
# - System-wide cursor configuration
###############################################################################
{
  config,
  pkgs,
  lib,
  inputs,
  ...
}: let
  cfg = config.home.ui.cursor;
  username = "y0usaf";
  hyprThemeName = "DeepinDarkV20-hypr";
  x11ThemeName = "DeepinDarkV20-x11";

  # Get the packages directly from flake outputs
  hyprcursorPackage = inputs.deepin-dark-hyprcursor.packages.${pkgs.system}.default;
  xcursorPackage = inputs.deepin-dark-xcursor.packages.${pkgs.system}.default;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.ui.cursor = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Enable cursor theme configuration";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.${username}.maid = {
      packages = with pkgs; [
        hyprcursorPackage
        xcursorPackage
      ];

      file.home = {
        ".profile".text = lib.mkAfter ''
          export HYPRCURSOR_THEME="${hyprThemeName}"
          export HYPRCURSOR_SIZE="${toString config.home.core.appearance.cursorSize}"
          export XCURSOR_THEME="${x11ThemeName}"
          export XCURSOR_SIZE="${toString config.home.core.appearance.cursorSize}"
        '';
      };

      file.xdg_config = {
        "gtk-3.0/settings.ini".text = lib.mkAfter ''
          [Settings]
          gtk-cursor-theme-name=${x11ThemeName}
          gtk-cursor-theme-size=${toString config.home.core.appearance.cursorSize}
        '';
        "gtk-4.0/settings.ini".text = lib.mkAfter ''
          [Settings]
          gtk-cursor-theme-name=${x11ThemeName}
          gtk-cursor-theme-size=${toString config.home.core.appearance.cursorSize}
        '';
      };
    };
  };
}
</file>

<file path="home/ui/fonts.nix">
#‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üî§ FONT CONFIGURATION ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
# ‚ö†Ô∏è  Affects system-wide font rendering and availability            #
#‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ#
{
  config,
  lib,
  ...
}: let
  cfg = config.home.ui.fonts;
  username = "y0usaf";

  # Get the packages and names from the host appearance config
  mainFontPackages = map (x: x.package) config.home.core.appearance.fonts.main;
  mainFontNames = map (x: x.name) config.home.core.appearance.fonts.main;
  fallbackPackages = map (x: x.package) config.home.core.appearance.fonts.fallback;
  fallbackNames = map (x: x.name) config.home.core.appearance.fonts.fallback;

  #######################################################################
  # Font XML Configuration String
  #
  # This string sets up the fontconfig rules:
  #  ‚Ä¢ Prioritizes the main font for all text.
  #  ‚Ä¢ Defines fallback fonts for symbols and extended Unicode support.
  #  ‚Ä¢ Configures font rendering options such as antialiasing, hinting,
  #    subpixel rendering, and DPI settings.
  #######################################################################
  fontXmlConfig = ''
    <?xml version="1.0"?>
    <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
    <fontconfig>
      <!-- Disable all fonts by default -->
      <selectfont>
        <rejectfont>
          <pattern>
            <patelt name="family">
              <string>*</string>
            </patelt>
          </pattern>
        </rejectfont>
      </selectfont>

      <!-- Explicitly enable only our chosen fonts -->
      <selectfont>
        <acceptfont>
          <pattern>
            <patelt name="family">
              <string>${builtins.elemAt mainFontNames 0}</string>
            </patelt>
          </pattern>
          ${lib.concatMapStrings (name: ''
        <pattern>
          <patelt name="family">
            <string>${name}</string>
          </patelt>
        </pattern>
      '')
      fallbackNames}
        </acceptfont>
      </selectfont>

      <!-- Set main font as default -->
      <match>
        <test name="family">
          <string>*</string>
        </test>
        <edit name="family" mode="prepend">
          <string>${builtins.elemAt mainFontNames 0}</string>
        </edit>
      </match>

      <!-- Fallback font configuration -->
      <alias>
        <family>monospace</family>
        <prefer>
          <family>${builtins.elemAt mainFontNames 0}</family>
          ${lib.concatMapStrings (name: "<family>${name}</family>") fallbackNames}
        </prefer>
      </alias>

      <!-- Font rendering options -->
      <match target="font">
        <edit name="antialias" mode="assign"><bool>true</bool></edit>
        <edit name="hinting" mode="assign"><bool>true</bool></edit>
        <edit name="hintstyle" mode="assign"><const>hintslight</const></edit>
        <edit name="rgba" mode="assign"><const>rgb</const></edit>
        <edit name="autohint" mode="assign"><bool>true</bool></edit>
        <edit name="lcdfilter" mode="assign"><const>lcdlight</const></edit>
        <edit name="dpi" mode="assign"><double>${toString config.home.core.appearance.dpi}</double></edit>
      </match>
    </fontconfig>
  '';
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.ui.fonts = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Enable font configuration with string substitution";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    #######################################################################
    # Maid Configuration
    #######################################################################
    users.users.${username}.maid = {
      packages = mainFontPackages ++ fallbackPackages;

      file.xdg_config = {
        "fontconfig/fonts.conf".text = fontXmlConfig;
      };
    };
  };
}
</file>

<file path="home/ui/gtk.nix">
###############################################################################
# GTK Module for Maid
# Configures GTK theming and appearance settings using nix-maid file management
# - Generates GTK3/GTK4 settings.ini files using toINI
# - Creates custom CSS for enhanced theming
# - Manages GTK bookmarks from shared configuration
# - Supports DPI and scaling configuration
# - Uses nix-maid's native dconf and gsettings support
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.ui.gtk;

  #############################################################
  # Extract common variables from the appearance config
  #############################################################
  mainFontName = (builtins.elemAt config.home.core.appearance.fonts.main 0).name;
  inherit (config.home.core.appearance) baseFontSize;
  dpiStr = toString config.home.core.appearance.dpi;

  # Get user bookmarks from user config
  inherit (config.home.core.user) bookmarks;

  # Get the scaling factor from config (defaults to 1.0)
  scaleFactor = cfg.scale;

  #############################################################
  # Text shadow configuration
  #############################################################
  shadowSize = "0.05rem";
  shadowRadius = "0.05rem";
  shadowColor = "#000000";

  # Define the 8 shadow offsets as a list
  shadowOffsets = [
    "${shadowSize} 0 ${shadowRadius} ${shadowColor}"
    "-${shadowSize} 0 ${shadowRadius} ${shadowColor}"
    "0 ${shadowSize} ${shadowRadius} ${shadowColor}"
    "0 -${shadowSize} ${shadowRadius} ${shadowColor}"
    "${shadowSize} ${shadowSize} ${shadowRadius} ${shadowColor}"
    "-${shadowSize} ${shadowSize} ${shadowRadius} ${shadowColor}"
    "${shadowSize} -${shadowSize} ${shadowRadius} ${shadowColor}"
    "-${shadowSize} -${shadowSize} ${shadowRadius} ${shadowColor}"
  ];

  # Generate repeated shadow string (4 repetitions)
  repeatedShadow = lib.concatStringsSep ",\n" (lib.concatLists (lib.genList (_: shadowOffsets) 4));

  #############################################################
  # Define color constants for CSS styling
  #############################################################
  whiteColor = "#ffffff";
  transparentColor = "transparent";
  menuBackground = "#333333";
  hoverBg = "rgba(100, 149, 237, 0.1)";
  selectedBg = "rgba(100, 149, 237, 0.5)";

  #############################################################
  # GTK Settings Configuration for INI files
  #############################################################
  gtk3Settings = {
    Settings = {
      gtk-application-prefer-dark-theme = 1;
      gtk-cursor-theme-name = "DeepinDarkV20-x11";
      gtk-cursor-theme-size = toString (builtins.floor (24 * scaleFactor));
      gtk-font-name = "${mainFontName} ${toString baseFontSize}";
      gtk-xft-antialias = 1;
      gtk-xft-dpi = dpiStr;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgb";
    };
  };

  gtk4Settings = {
    Settings = {
      gtk-application-prefer-dark-theme = 1;
      gtk-cursor-theme-name = "DeepinDarkV20-x11";
      gtk-cursor-theme-size = toString (builtins.floor (24 * scaleFactor));
      gtk-font-name = "${mainFontName} ${toString baseFontSize}";
    };
  };

  #############################################################
  # Custom CSS content
  #############################################################
  gtkCss = ''
    /* Global element styling */
    * {
      font-family: "${mainFontName}";
      color: ${whiteColor};
      background: ${transparentColor};
      outline-width: 0;
      outline-offset: 0;
      text-shadow: ${repeatedShadow};
    }

    /* Hover state for all elements */
    *:hover {
      background: ${hoverBg};
    }

    /* Selected state for all elements */
    *:selected {
      background: ${selectedBg};
    }

    /* Button styling */
    button {
      border-radius: 0.15rem;
      min-height: 1rem;
      padding: 0.05rem 0.25rem;
    }

    /* Menu background styling */
    menu {
      background: ${menuBackground};
    }
  '';

  #############################################################
  # Convert bookmarks list to GTK bookmarks file format
  #############################################################
  bookmarksContent = lib.concatStringsSep "\n" bookmarks;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.ui.gtk = {
    enable = lib.mkEnableOption "GTK theming and configuration using nix-maid";

    scale = lib.mkOption {
      type = lib.types.float;
      default = 1.0;
      description = "Scaling factor for GTK applications (e.g., 1.0, 1.25, 1.5, 2.0)";
      example = 1.5;
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ######################################################################
    # Maid Configuration
    ######################################################################
    users.users.y0usaf.maid = {
      ######################################################################
      # Package Installation
      ######################################################################
      packages = with pkgs; [
        gtk3
        gtk4
      ];

      ######################################################################
      # File Management
      ######################################################################
      file = {
        xdg_config = {
          # GTK-3.0 configuration files
          "gtk-3.0/settings.ini".text = lib.generators.toINI {} gtk3Settings;
          "gtk-3.0/gtk.css".text = gtkCss;
          "gtk-3.0/bookmarks".text = bookmarksContent;

          # GTK-4.0 configuration files
          "gtk-4.0/settings.ini".text = lib.generators.toINI {} gtk4Settings;
        };

        ######################################################################
        # Environment Variables (via .zshenv for scaling)
        ######################################################################
        home.".zshenv".text = lib.mkAfter ''
          # GTK cursor size scales proportionally with the scaling factor
          export XCURSOR_SIZE="${builtins.replaceStrings [".0"] [""] (toString (builtins.floor (24 * scaleFactor)))}"
        '';
      };

      ######################################################################
      # Native nix-maid DConf and GSettings Support
      ######################################################################
      gsettings.settings = {
        org.gnome.desktop.interface = {
          color-scheme = "prefer-dark";
          text-scaling-factor = scaleFactor;
          scaling-factor = scaleFactor;
        };
      };

      dconf.settings = {
        "/org/gnome/desktop/interface/color-scheme" = "prefer-dark";
        "/org/gnome/desktop/interface/text-scaling-factor" = scaleFactor;
        "/org/gnome/desktop/interface/scaling-factor" = scaleFactor;
      };
    };
  };
}
</file>

<file path="home/ui/wayland.nix">
###############################################################################
# Wayland Module
# Configures Wayland-specific settings and utilities
# - Sets Wayland environment variables
# - Installs Wayland-specific utilities
# - Provides consistent Wayland experience across applications
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.ui.wayland;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.ui.wayland = {
    enable = lib.mkEnableOption "Wayland configuration";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Environment Variables (via .zshenv for Wayland)
    ###########################################################################
    users.users.y0usaf.maid.file.home."{{xdg_config_home}}/zsh/.zshenv".text = lib.mkAfter ''
      # Wayland environment variables
      export WLR_NO_HARDWARE_CURSORS=1
      export NIXOS_OZONE_WL=1
      export QT_QPA_PLATFORM=wayland
      export ELECTRON_OZONE_PLATFORM_HINT=wayland
      export XDG_SESSION_TYPE=wayland
      export GDK_BACKEND=wayland,x11
      export SDL_VIDEODRIVER=wayland
      export CLUTTER_BACKEND=wayland
    '';

    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      grim # Screenshot utility for Wayland
      slurp # Screen region selector tool
      wl-clipboard # Clipboard utility for Wayland
      hyprpicker # Color picker for Hyprland
    ];
  };
}
</file>

<file path="home/default.nix">
{lib, ...}: {
  imports = lib.importDirs ./.;
}
</file>

<file path="lib/default.nix">
{
  # Re-export all helpers
  helpers = import ./helpers;
  flake = import ./flake;
  generators = import ./generators;
  scripts = import ./scripts;
}
</file>

<file path="lib/template-default.nix">
{lib, ...}: {imports = lib.importDirs ./.;}
</file>

<file path="system/boot/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="system/core/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="system/core/nix-package-management.nix">
# This module configures Nix package management.
{
  config,
  pkgs,
  ...
}: {
  config = {
    nix = {
      package = pkgs.nixVersions.stable;
      settings = {
        auto-optimise-store = true;
        max-jobs = "auto";
        cores = 0;
        experimental-features = ["nix-command" "flakes"];
        sandbox = true;
        trusted-users = ["root" config.hostSystem.username];
        builders-use-substitutes = true;
        fallback = true;

        substituters = [
          "https://cache.nixos.org"
        ];

        trusted-public-keys = [
          "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
        ];
      };
      extraOptions = "";
    };
  };
}
</file>

<file path="system/hardware/bluetooth.nix">
###############################################################################
# Bluetooth Configuration Module
# - Bluetooth stack settings
# - Bluetooth services and packages
###############################################################################
{
  config,
  lib,
  pkgs,
  hostSystem,
  ...
}: let
  hardwareCfg = hostSystem.hardware;
in {
  config = {
    ###########################################################################
    # Bluetooth Configuration (conditional)
    # Complete Bluetooth stack when enabled in host config
    ###########################################################################
    hardware.bluetooth = lib.mkIf (hardwareCfg.bluetooth.enable or false) {
      enable = true;
      powerOnBoot = true;
      settings =
        hardwareCfg.bluetooth.settings
        or {
          General = {
            ControllerMode = "dual";
            FastConnectable = true;
          };
        };
      # Use bluez for maximum compatibility with all BT protocols
      package = pkgs.bluez;
    };

    # Bluetooth-related services and packages (conditional)
    services.dbus.packages = lib.mkIf (hardwareCfg.bluetooth.enable or false) [pkgs.bluez];

    # Add required system packages for Bluetooth
    environment.systemPackages = with pkgs;
      lib.optionals (hardwareCfg.bluetooth.enable or false) [
        bluez
        bluez-tools
      ];

    # Add user to necessary groups for Bluetooth
    users.users.${config.hostSystem.username}.extraGroups =
      lib.optionals (hardwareCfg.bluetooth.enable or false) ["dialout" "bluetooth" "lp"];
  };
}
</file>

<file path="system/hardware/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="system/hardware/input.nix">
###############################################################################
# Input Devices Configuration Module
# Hardware configuration for input peripherals:
# - Keyboard configurations including Vial
# - Controller support and permissions
###############################################################################
{
  lib,
  hostSystem,
  ...
}: {
  config = {
    ###########################################################################
    # Vial Keyboard Rules
    # Allow access to Vial-compatible keyboard devices for non-root users
    ###########################################################################
    services.udev.extraRules = lib.mkMerge [
      # Vial rules for non-root access
      ''
        KERNEL=="hidraw*", SUBSYSTEM=="hidraw", ATTRS{serial}=="*vial:f64c2b3c*", MODE="0660", GROUP="users"
        KERNEL=="hidraw*", SUBSYSTEM=="hidraw", ATTRS{serial}=="*vial:f64c2b3c*", TAG+="uaccess"
      ''

      # DualSense controller rules (only if controllers are enabled by host)
      (lib.mkIf (hostSystem.services.controllers.enable or false) ''
        # Sony DualSense controller - standard mode
        KERNEL=="hidraw*", ATTRS{idVendor}=="054c", ATTRS{idProduct}=="0ce6", MODE="0660", TAG+="uaccess"

        # Sony DualSense controller - bluetooth mode
        KERNEL=="hidraw*", KERNELS=="*054C:0CE6*", MODE="0660", TAG+="uaccess"

        # Sony DualSense Edge controller
        KERNEL=="hidraw*", ATTRS{idVendor}=="054c", ATTRS{idProduct}=="0df2", MODE="0660", TAG+="uaccess"
      '')
    ];
  };
}
</file>

<file path="system/networking/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="system/programs/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="system/security/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="system/security/sudo.nix">
###############################################################################
# Sudo Configuration Module
# System administrator privileges:
# - User-specific sudo rules
# - Password-less sudo for specific users
# - Fine-grained command permissions
###############################################################################
{config, ...}: {
  config = {
    ###########################################################################
    # Sudo Configuration
    # Configure sudo permissions for users
    ###########################################################################
    security.sudo.extraRules = [
      {
        users = [config.hostSystem.username]; # The user defined in the host config
        commands = [
          {
            command = "ALL"; # Allow all commands
            options = ["NOPASSWD"]; # No password prompt for these commands
          }
        ];
      }
    ];
  };
}
</file>

<file path="system/services/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="system/services/mediamtx.nix">
###############################################################################
# MediaMTX Configuration
# WebRTC media server for streaming:
# - Enables WebRTC streaming server on port 4200
# - Configures public IP detection for external access
# - Sets up firewall rules for streaming
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  port = "4200";

  # Get all assigned local IPs for WebRTC configuration
  localips = builtins.concatLists (
    builtins.map (iface: builtins.map (addr: addr.address) iface.ipv4.addresses) (
      builtins.attrValues config.networking.interfaces
    )
  );

  # MediaMTX doesn't support IPv6 and fails if one is present, so filter for IPv4 only
  inherit (config.networking) nameservers;
  isIPv4 = addr: builtins.match "^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$" addr != null;
  ipv4Nameservers = builtins.filter isIPv4 nameservers;

  # Get public IP dynamically using a simple approach
  getPublicIP = pkgs.writeShellScript "get-public-ip" ''
    ${pkgs.curl}/bin/curl -s https://api.ipify.org || echo "127.0.0.1"
  '';
in {
  config = {
    ###########################################################################
    # MediaMTX Service Configuration
    # WebRTC streaming server setup
    ###########################################################################
    services.mediamtx = {
      enable = true;
      settings = {
        # API settings for management
        api = true;
        apiAddress = "127.0.0.1:9997";

        # RTSP Configuration
        rtsp = true;
        rtspAddress = ":8554";

        # RTMP Configuration
        rtmp = true;
        rtmpAddress = ":1935";

        # HLS Configuration (for web viewing)
        hls = true;
        hlsAddress = ":8080";
        hlsAllowOrigin = "*";

        # WebRTC Configuration
        webrtc = true;
        webrtcAddress = ":${port}";
        webrtcLocalUDPAddress = ":${port}";
        webrtcAdditionalHosts =
          # Add local IPs and nameservers
          ipv4Nameservers ++ localips;

        # Allow publishing to all paths - enables streaming from any source
        paths = {
          all_others = {};
        };
      };
    };

    ###########################################################################
    # Firewall Configuration
    # Open required ports for WebRTC streaming
    ###########################################################################
    networking.firewall = {
      allowedTCPPorts = [
        (lib.toInt port) # WebRTC signaling
        8554 # RTSP
        1935 # RTMP
        8080 # HLS
        9997 # API port (localhost only)
      ];
      allowedUDPPorts = [
        (lib.toInt port) # WebRTC media
        8000 # RTSP RTP
        8001 # RTSP RTCP
      ];
    };

    ###########################################################################
    # System Activation Script
    # Update MediaMTX config with public IP at boot
    ###########################################################################
    system.activationScripts.mediamtx-public-ip = {
      text = ''
        # Get public IP and update MediaMTX configuration
        PUBLIC_IP=$(${getPublicIP})
        CONFIG_FILE="/etc/mediamtx.yaml"

        if [ -f "$CONFIG_FILE" ] && [ -n "$PUBLIC_IP" ] && [ "$PUBLIC_IP" != "127.0.0.1" ]; then
          echo "Updating MediaMTX with public IP: $PUBLIC_IP"

          # Create a temporary config with the public IP added
          ${pkgs.yq-go}/bin/yq eval ".webrtcAdditionalHosts += [\"$PUBLIC_IP\"]" "$CONFIG_FILE" > "$CONFIG_FILE.tmp"
          mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"

          # Restart mediamtx if it's running
          if ${pkgs.systemd}/bin/systemctl is-active mediamtx.service >/dev/null 2>&1; then
            ${pkgs.systemd}/bin/systemctl restart mediamtx.service
          fi
        else
          echo "Could not determine public IP or config file not found"
        fi
      '';
    };

    ###########################################################################
    # Environment Configuration
    # Ensure mediamtx is available in system PATH
    ###########################################################################
    environment.systemPackages = with pkgs; [
      mediamtx
    ];
  };
}
</file>

<file path="system/users/accounts.nix">
###############################################################################
# User Accounts Configuration
# User accounts, permissions, and shell configuration:
# - User account creation
# - Group memberships
# - Default shell settings
###############################################################################
{
  config,
  pkgs,
  ...
}: {
  config = {
    ###########################################################################
    # User Account Settings
    # User accounts, permissions, and shell configuration
    ###########################################################################
    users.users.${config.hostSystem.username} = {
      isNormalUser = true; # Defines the account as a standard user account.
      shell = pkgs.zsh; # Set Zsh as the default shell for this user.
      extraGroups = [
        "wheel" # Group that typically grants sudo permissions.
        "networkmanager" # Allows management of network connections.
        "video" # Grants permissions for video hardware usage.
        "audio" # Provides access to audio subsystems.
        "input" # Necessary for access to keyboard and mouse devices.
        "gamemode" # Include gamemode group for gaming performance tweaks.
        # Docker group is now managed by system/virtualization/containers.nix
      ];
      ignoreShellProgramCheck = true; # Skip validating that the shell is in /etc/shells.
    };
  };
}
</file>

<file path="system/users/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="system/virtualization/android.nix">
###############################################################################
# Android Virtualization Configuration
# Waydroid Android container support:
# - Waydroid Android emulation
###############################################################################
{
  lib,
  hostSystem,
  ...
}: {
  config = {
    ###########################################################################
    # Android Virtualization
    # Waydroid Android emulation - enabled based on host capability
    ###########################################################################
    virtualisation.waydroid = lib.mkIf (hostSystem.services.waydroid.enable or false) {
      enable = true; # Enable Waydroid to run Android apps on NixOS
    };
  };
}
</file>

<file path="system/virtualization/default.nix">
{lib, ...}: {imports = lib.importModules ./.;}
</file>

<file path="flake.nix">
###############################################################################
# NixOS Flake Configuration
# System configuration and dependencies management for desktop environment
###############################################################################
{
  description = "NixOS configuration";

  ###########################################################################
  # Input Sources
  ###########################################################################
  inputs = {
    ## Core System Dependencies
    nixpkgs.url = "git+https://github.com/NixOS/nixpkgs?ref=nixos-unstable";

    nix-maid = {
      url = "github:viperML/nix-maid";
    };

    alejandra = {
      url = "github:kamadorueda/alejandra";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    ## Disk Management
    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    ## Desktop Environment & Theming
    hyprland = {
      url = "github:hyprwm/Hyprland";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    hy3 = {
      url = "github:outfoxxed/hy3";
      inputs.hyprland.follows = "hyprland";
    };

    ## Custom Resources
    deepin-dark-hyprcursor = {
      url = "github:y0usaf/Deepin-Dark-hyprcursor/9d7db02";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    deepin-dark-xcursor = {
      url = "github:y0usaf/Deepin-Dark-xcursor/b3df394";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    fast-fonts.url = "github:y0usaf/Fast-Font";
    hyprpaper = {
      url = "github:y0usaf/hyprpaper/main";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    ## Development & Creative Tools
    obs-image-reaction.url = "github:L-Nafaryus/obs-image-reaction";
    chaotic.url = "github:chaotic-cx/nyx/nyxpkgs-unstable";

    ## Gaming
    nix-minecraft = {
      url = "github:Infinidoge/nix-minecraft";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    ## Editor
    mnw = {
      url = "github:Gerg-L/mnw";
    };
  };

  ###########################################################################
  # System Outputs
  ###########################################################################
  outputs = inputs:
    import ./lib/flake/outputs inputs;
}
</file>

<file path="home/programs/firefox/ui-chrome.nix">
###############################################################################
# Firefox UserChrome CSS Module
# Custom CSS for minimal Firefox UI with bottom navbar
###############################################################################
{
  config,
  lib,
  ...
}: let
  username = "y0usaf";

  userChromeCss = ''
    /* Disable all animations */
    * {
      animation: none;
      transition: none;
      scroll-behavior: auto;
      padding: 0;
      margin: 0;
    }

    :root {
        /* Base sizing variables */
        --tab-font-size: 0.8em;
        --max-tab-width: none;
        --show-titlebar-buttons: none;
        --tab-height: 12pt;
        --toolbar-icon-size: calc(var(--tab-height) / 1.5);

        /* Spacing variables */
        --uc-spacing-small: 1pt;
        --uc-spacing-medium: 2pt;
        --uc-spacing-large: 4pt;

        /* Layout variables */
        --uc-bottom-toolbar-height: 12pt;
        --uc-navbar-width: 75vw;
        --uc-urlbar-width: 50vw;
        --uc-urlbar-bottom-offset: calc(var(--uc-bottom-toolbar-height) + var(--uc-spacing-medium));

        /* Animation control */
        --uc-animation-duration: 0.001s;
        --uc-transition-duration: 0.001s;
    }

    /* Disable specific Firefox animations */
    @media (prefers-reduced-motion: no-preference) {
      * {
        animation-duration: var(--uc-animation-duration);
        transition-duration: var(--uc-transition-duration);
      }
    }

    /* Disable smooth scrolling */
    html {
      scroll-behavior: auto;
    }

    /* Disable tab animations */
    .tabbrowser-tab {
      transition: none;
    }

    /* Disable toolbar animations */
    :root[tabsintitlebar] #toolbar-menubar[autohide=true][inactive] {
        transition: none;
    }

    /* Rest of your existing CSS */
    .titlebar-buttonbox-container {
        display: var(--show-titlebar-buttons)
    }

    :root:not([customizing]) #TabsToolbar {
        margin-left: var(--uc-spacing-small);
        margin-right: var(--uc-spacing-small);
        border-radius: 0;
        padding: 0;
        min-height: 0;
    }

    .tabbrowser-tab * {
        margin: 0;
        border-radius: 0;
    }

    .tabbrowser-tab {
        height: var(--tab-height);
        font-size: var(--tab-font-size);
        min-height: 0;
        align-items: center;
        margin-bottom: var(--uc-spacing-medium);
    }

    .tab-icon-image {
        height: auto;
        width: var(--toolbar-icon-size);
        margin-right: var(--uc-spacing-medium);
    }

    #tabbrowser-arrowscrollbox,
    #tabbrowser-tabs,
    #tabbrowser-tabs > .tabbrowser-arrowscrollbox {
        min-height: 0;
    }

    :root:not([customizing]) #TabsToolbar .titlebar-button,
    :root:not([customizing]) #TabsToolbar-customization-target > .toolbarbutton-1,
    :root:not([customizing]) #tabbrowser-tabs .tabs-newtab-button,
    :root:not([customizing]) #tabs-newtab-button {
        -moz-appearance: none;
        padding-top: 0;
        padding-bottom: 0;
        -moz-box-align: stretch;
        margin: 0;
    }

    #tabbrowser-tabs .tabs-newtab-button:hover,
    #tabs-newtab-button:hover {
        background-color: var(--toolbarbutton-hover-background);
    }

    #tabbrowser-tabs .tabs-newtab-button > .toolbarbutton-icon,
    #tabs-newtab-button > .toolbarbutton-icon {
        padding: 0;
        transform: scale(0.6);
        background-color: transparent;
    }

    @media (-moz-os-version: windows-win10) {
        :root[sizemode=maximized] #navigator-toolbox {
            padding-top: calc(var(--uc-spacing-large) + var(--uc-spacing-medium));
        }
    }

    #nav-bar {
        position: fixed;
        bottom: 0;
        width: var(--uc-navbar-width);
        height: var(--uc-bottom-toolbar-height);
        max-height: var(--uc-bottom-toolbar-height);
        margin: calc(-1 * var(--uc-spacing-small)) auto 0;
        border-top: none;
        left: 0;
        right: 0;
        z-index: 1;
    }

    #browser {
        margin-bottom: var(--uc-bottom-toolbar-height);
    }

    #tabbrowser-arrowscrollbox:not([overflowing]) {
        --uc-flex-justify: center
    }

    scrollbox[orient=horizontal]>slot {
        justify-content: var(--uc-flex-justify, initial)
    }

    #urlbar,
    #urlbar-input-container {
        height: var(--tab-height);
    }

    #urlbar,
    #urlbar[open] {
        min-height: var(--tab-height);
    }

    #urlbar-input-container {
        min-height: 0;
    }

    #urlbar[open],
    #urlbar[open] #urlbar-input-container {
        height: auto;
    }

    #identity-icon,
    #page-action-buttons img,
    #permissions-granted-icon,
    #star-button-box,
    #tracking-protection-icon,
    .searchbar-search-icon,
    .urlbar-page-action {
        height: auto;
        width: var(--toolbar-icon-size);
        padding: 0;
    }

    .toolbarbutton-1 {
        padding: 0 var(--uc-spacing-medium);
    }

    .toolbarbutton-1,
    .toolbarbutton-icon {
        -moz-appearance: none;
        padding-inline: var(--uc-spacing-small);
        -moz-box-align: stretch;
        margin: 0;
    }

    #PersonalToolbar toolbarbutton,
    #TabsToolbar toolbarbutton,
    #nav-bar toolbarbutton,
    .titlebar-button,
    .toolbaritem-combined-buttons {
        -moz-appearance: none;
        padding-top: 0;
        padding-bottom: 0;
        padding-inline: var(--uc-spacing-small);
        -moz-box-align: stretch;
        margin: 0;
    }

    .tab-close-button,
    .urlbar-icon,
    .urlbar-page-action {
        -moz-appearance: none;
        padding-inline: var(--uc-spacing-small);
        -moz-box-align: stretch;
        margin: 0;
    }

    .urlbar-page-action {
        padding-top: 0;
        padding-bottom: 0;
    }

    .tab-close-button,
    .titlebar-button > image,
    .toolbarbutton-icon,
    .urlbar-icon,
    .urlbar-page-action > image {
        padding: 0;
        width: var(--toolbar-icon-size);
        height: auto;
    }

    #navigator-toolbox,
    #navigator-toolbox > toolbar {
        -moz-appearance: none;
        background: none;
        border: none;
        box-shadow: none;
    }

    :root[tabsintitlebar] #nav-bar {
        padding-right: 0;
        padding-left: 0;
    }

    :root[tabsintitlebar] #TabsToolbar {
        padding-right: 0;
        padding-left: 0;
    }

    #navigator-toolbox::after {
        display: none;
    }

    #tabbrowser-tabbox {
        height: calc(100vh - var(--uc-bottom-toolbar-height));
    }

    #sidebar-box {
        max-height: calc(100vh - var(--uc-bottom-toolbar-height));
    }

    @media screen and (max-width: 1000px) {
        #nav-bar {
            width: 100vw;
        }

        :root {
            --uc-navbar-width: 100vw;
        }
    }

    .tab-content {
        padding-inline-start: var(--uc-spacing-small);
        padding-inline-end: var(--uc-spacing-small);
    }

    .tab-label {
        margin-inline-end: 0;
    }

    .tab-icon-sound {
        margin-inline-start: var(--uc-spacing-small);
    }

    :root[customizing] #nav-bar {
        position: initial;
        width: initial;
        background: var(--toolbar-bgcolor);
    }

    :root[customizing] #browser {
        margin-bottom: 0;
    }

    #urlbar-background {
        --toolbarbutton-border-radius: 0;
        --urlbar-icon-border-radius: 0;
        backdrop-filter: blur(10px);
        background-color: transparent !important;
    }

    #urlbar-input-container {
        --toolbarbutton-border-radius: 0;
        --urlbar-icon-border-radius: 0;
    }
  '';
in {
  config = lib.mkIf config.home.programs.firefox.enable {
    users.users.${username}.maid = {
      file.home = {
        # Default profile userChrome.css
        ".mozilla/firefox/${username}.default/chrome/userChrome.css".text = userChromeCss;
        # Alternative profile paths (Firefox creates different profile names)
        ".mozilla/firefox/${username}.default-release/chrome/userChrome.css".text = userChromeCss;
      };
    };
  };
}
</file>

<file path="home/shell/cat-fetch.nix">
#===============================================================================
# üê± Cat Fetch Display Module for Maid üê±
# Provides colorful cat display functionality for shell startup
#===============================================================================
{
  config,
  lib,
  ...
}: let
  cfg = config.home.shell.cat-fetch;
in {
  #===========================================================================
  # Module Options
  #===========================================================================
  options.home.shell.cat-fetch = {
    enable = lib.mkEnableOption "cat fetch display on shell startup";
  };

  #===========================================================================
  # Module Configuration
  #===========================================================================
  config = lib.mkIf cfg.enable {
    # Add cat fetch function to zsh startup
    users.users.y0usaf.maid.file.home."{{xdg_config_home}}/zsh/.zshrc".text = lib.mkAfter ''
      # ----------------------------
      # Function: print_cats
      # ----------------------------
      # Prints a colorful array of cats to the terminal.
      print_cats() {
          echo -e "\033[0;31m ‚üã|ÔΩ§      \033[0;34m  ‚üã|ÔΩ§      \033[0;35m  ‚üã|ÔΩ§      \033[0;32m  ‚üã|ÔΩ§
      \033[0;31m(¬∞ÔΩ§ ÔΩ° 7    \033[0;34m(¬∞ÔΩ§ ÔΩ° 7    \033[0;35m(¬∞ÔΩ§ ÔΩ° 7    \033[0;32m(¬∞ÔΩ§ ÔΩ° 7
      \033[0;31m |ÔΩ§  ~„ÉΩ   \033[0;34m |ÔΩ§  ~„ÉΩ   \033[0;35m |ÔΩ§  ~„ÉΩ   \033[0;32m |ÔΩ§  ~„ÉΩ
      \033[0;31m „Åò„Åóf_,)„Ä≥\033[0;34m „Åò„Åóf_,)„Ä≥\033[0;35m „Åò„Åóf_,)„Ä≥\033[0;32m „Åò„Åóf_,)„Ä≥
      \033[0;36m  [tomo]   \033[0;33m  [moon]   \033[0;32m  [ekko]   \033[0;35m  [bozo]\033[0m"
      }

      # Immediately print the cats on startup.
      print_cats
    '';
  };
}
</file>

<file path="home/shell/zellij.nix">
###############################################################################
# Zellij Terminal Multiplexer Module (Maid Version)
# Configures the Zellij terminal multiplexer with custom themes and layouts
# - Custom theme configuration
# - Music layout for cmus and cava
# - Convenient shell aliases
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.shell.zellij;
  # ZSH configuration for zellij auto-start
  zshConfig = {
    zellij = {
      enable = false;
    };
  };
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.shell.zellij = {
    enable = lib.mkEnableOption "zellij terminal multiplexer";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      ###########################################################################
      # Packages
      ###########################################################################
      packages = with pkgs; [
        zellij
      ];

      ###########################################################################
      # File Configuration
      ###########################################################################
      file = {
        ###########################################################################
        # Configuration Files
        ###########################################################################
        xdg_config = {
          # Main Zellij configuration
          "zellij/config.kdl".text = ''
            hide_session_name false
            on_force_close "quit"
            pane_frames true
            rounded_corners true
            session_serialization false
            show_startup_tips false
            simplified_ui false
            theme "custom"
            themes {
            	custom {
            		bg "#282828"
            		black "#282828"
            		blue "#458588"
            		cyan "#689d6a"
            		exit_code_error {
            			base "#cc241d"
            			bg "#282828"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#98971a"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#cc241d"
            		}
            		exit_code_success {
            			base "#98971a"
            			bg "#282828"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#98971a"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#98971a"
            		}
            		fg "#ebdbb2"
            		frame_highlight {
            			base "#d79921"
            			bg "#282828"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#98971a"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#d79921"
            		}
            		frame_selected {
            			base "#458588"
            			bg "#282828"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#98971a"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#458588"
            		}
            		green "#98971a"
            		list_selected {
            			base "#ebdbb2"
            			bg "#3c3836"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#98971a"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#ebdbb2"
            		}
            		list_unselected {
            			base "#ebdbb2"
            			bg "#282828"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#98971a"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#ebdbb2"
            		}
            		magenta "#b16286"
            		multiplayer_user_colors "#cc241d" "#98971a" "#d79921" "#458588" "#b16286" "#689d6a" "#ebdbb2" "#d65d0e" "#a89984" "#3c3836"
            		orange "#d65d0e"
            		red "#cc241d"
            		ribbon_selected {
            			base "#ebdbb2"
            			bg "#458588"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#ebdbb2"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#ebdbb2"
            		}
            		ribbon_unselected {
            			base "#ebdbb2"
            			bg "#3c3836"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#ebdbb2"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#a89984"
            		}
            		table_cell_selected {
            			base "#ebdbb2"
            			bg "#3c3836"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#98971a"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#ebdbb2"
            		}
            		table_cell_unselected {
            			base "#ebdbb2"
            			bg "#282828"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#98971a"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#ebdbb2"
            		}
            		table_title {
            			base "#ebdbb2"
            			bg "#282828"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#98971a"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#ebdbb2"
            		}
            		text_selected {
            			base "#ebdbb2"
            			bg "#3c3836"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#98971a"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#ebdbb2"
            		}
            		text_unselected {
            			base "#ebdbb2"
            			bg "#282828"
            			emphasis_0 "#cc241d"
            			emphasis_1 "#98971a"
            			emphasis_2 "#689d6a"
            			emphasis_3 "#d65d0e"
            			fg "#ebdbb2"
            		}
            		white "#ebdbb2"
            		yellow "#d79921"
            	}
            }
          '';

          # Music layout
          "zellij/layouts/music.kdl".text = ''
            layout alias="music" {
                default_tab_template {
                    pane size=1 borderless=true {
                        plugin location="zellij:tab-bar"
                    }
                    children
                    pane size=2 borderless=true {
                        plugin location="zellij:status-bar"
                    }
                }

                tab name="Music" {
                    pane split_direction="vertical" {
                        pane command="cmus"
                        pane command="cava"
                    }
                }
            }
          '';

          # Note: Shell configuration (zshrc, zlogout) should be handled by shell modules
          # Keeping only zellij-specific config files here
        };

        ###########################################################################
        # Shell Integration - Auto-start Zellij
        ###########################################################################
        home."{{xdg_config_home}}/zsh/.zshrc".text = lib.mkBefore (lib.optionalString zshConfig.zellij.enable ''
          # ----------------------------
          # Zellij Auto-start
          # ----------------------------
          # Automatically start Zellij if not already in a session
          # Skip if in nvim, vscode, or SSH connection
          if [[ -z "$ZELLIJ" && -z "$SSH_CONNECTION" && "$TERM_PROGRAM" != "vscode" && -z "$NVIM" ]]; then
              exec zellij
          fi

        '');
      };
    };
  };
}
</file>

<file path="home/tools/git.nix">
###############################################################################
# Git Configuration & Automation (Maid Version)
# Manages Git setup, SSH integration, and repository automation
# - User configuration (name, email, editor)
# - SSH agent integration via systemd
# - Repository auto-setup
# - Automatic sync service
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.tools.git;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.tools.git = {
    enable = lib.mkEnableOption "git configuration and automation";

    name = lib.mkOption {
      type = lib.types.str;
      description = "Git username.";
    };

    email = lib.mkOption {
      type = lib.types.str;
      description = "Git email address.";
    };

    editor = lib.mkOption {
      type = lib.types.str;
      default = "nvim";
      description = "Default editor for git.";
    };

    nixos-git-sync = {
      enable = lib.mkEnableOption "automatic NixOS configuration git sync";

      nixosRepoUrl = lib.mkOption {
        type = lib.types.str;
        description = "URL of the NixOS configuration repository.";
      };

      repoPath = lib.mkOption {
        type = lib.types.str;
        default = "/home/y0usaf/nixos";
        description = "Path to the NixOS configuration repository.";
      };

      remoteBranch = lib.mkOption {
        type = lib.types.str;
        default = "main";
        description = "The remote branch to push changes to.";
      };
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    users.users.y0usaf.maid = {
      ###########################################################################
      # Packages
      ###########################################################################
      packages = with pkgs; [
        git
        openssh
      ];

      ###########################################################################
      # Configuration Files
      ###########################################################################
      file.home = {
        # Git Configuration
        ".gitconfig".text = ''
          [user]
            name = ${cfg.name}
            email = ${cfg.email}

          [core]
            editor = ${cfg.editor}

          [init]
            defaultBranch = main

          [pull]
            rebase = true

          [push]
            autoSetupRemote = true

          [url "git@github.com:"]
            pushInsteadOf = https://github.com/
        '';

        # Repository Setup Script
        ".local/share/bin/setup-nixos-repo" = lib.mkIf (cfg.nixos-git-sync.enable && (cfg.nixos-git-sync.nixosRepoUrl != "")) {
          text = ''
            #!/bin/bash
            # Setup NixOS repository if it doesn't exist
            if [ ! -d "${cfg.nixos-git-sync.repoPath}" ]; then
              echo "Setting up NixOS configuration repository..."
              git clone ${cfg.nixos-git-sync.nixosRepoUrl} ${cfg.nixos-git-sync.repoPath}
            fi
          '';
          executable = true;
        };

        # Git Sync Script
        ".local/share/bin/nixos-git-sync" = lib.mkIf cfg.nixos-git-sync.enable {
          text = ''
            #!/bin/bash
            # Enable debug output for logging
            set -x

            # Sleep briefly to ensure all file writes are complete
            sleep 2

            # Get repository path
            REPO_PATH="${cfg.nixos-git-sync.repoPath}"

            # Check if repository exists
            if [ ! -d "$REPO_PATH" ]; then
              echo "Repository directory does not exist: $REPO_PATH"
              exit 1
            fi

            # Switch to the NixOS configuration repository directory
            cd "$REPO_PATH"

            # Assess if there are any changes (tracked or untracked)
            if ! git diff --quiet HEAD || [ -n "$(git ls-files --others --exclude-standard)" ]; then
              # Stage all changes
              git add .

              # Format date for commit message
              FORMATTED_DATE=$(date '+%d/%m/%y@%H:%M:%S')

              # Replace date placeholder in commit message format
              COMMIT_MSG="ü§ñ Auto Update: $FORMATTED_DATE"

              # Commit with the formatted message
              git commit -m "$COMMIT_MSG"

              # Push to the configured remote branch
              git push origin ${cfg.nixos-git-sync.remoteBranch} --force
            else
              echo "No changes to commit"
            fi
          '';
          executable = true;
        };

        # Shell Integration
        "{{xdg_config_home}}/zsh/.zshrc".text = lib.mkIf cfg.nixos-git-sync.enable ''

          # Git sync function
          git-sync() {
            $HOME/.local/share/bin/nixos-git-sync
          }
        '';
      };
    };
  };
}
</file>

<file path="home/tools/jujutsu.nix">
###############################################################################
# Jujutsu Configuration
# Git-compatible DVCS with saner defaults and better UX
# - Basic configuration (user, editor)
# - SSH integration for remotes
# - Aliases for common operations
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.tools.jujutsu;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.tools.jujutsu = {
    enable = lib.mkEnableOption "jujutsu version control system";

    name = lib.mkOption {
      type = lib.types.str;
      description = "Jujutsu username.";
    };

    email = lib.mkOption {
      type = lib.types.str;
      description = "Jujutsu email address.";
    };

    editor = lib.mkOption {
      type = lib.types.str;
      default = "nvim";
      description = "Default editor for jujutsu.";
    };

    enableAliases = lib.mkOption {
      type = lib.types.bool;
      default = true;
      description = "Enable common jujutsu aliases.";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    users.users.y0usaf.maid = {
      ###########################################################################
      # Packages
      ###########################################################################
      packages = with pkgs; [
        jujutsu
      ];

      ###########################################################################
      # Configuration Files
      ###########################################################################
      file.home = {
        # Jujutsu Configuration
        "{{xdg_config_home}}/jj/config.toml".text = ''
          [user]
          name = "${cfg.name}"
          email = "${cfg.email}"

          [ui]
          default-command = "status"
          editor = "${cfg.editor}"
          diff-editor = "${cfg.editor}"

          [git]
          auto-local-branch = true
          push-branch-prefix = ""

          [revset-aliases]
          "mine" = "author(${cfg.email})"
          "recent" = "heads(::@ & recent(5))"

          ${lib.optionalString cfg.enableAliases ''
            [aliases]
            l = ["log", "-r", "recent"]
            ll = ["log", "-r", "::@"]
            s = ["status"]
            d = ["diff"]
            c = ["commit"]
            ca = ["commit", "--amend"]
            co = ["checkout"]
            n = ["new"]
            e = ["edit"]
            b = ["branch"]
            rb = ["rebase"]
            sp = ["split"]
            sq = ["squash"]
          ''}
        '';

        # Shell Integration
        "{{xdg_config_home}}/zsh/.zshrc".text = lib.mkIf cfg.enableAliases ''

          # Jujutsu aliases
          alias jl='jj log -r recent'
          alias jll='jj log -r ::@'
          alias js='jj status'
          alias jd='jj diff'
          alias jc='jj commit'
          alias jca='jj commit --amend'
          alias jco='jj checkout'
          alias jn='jj new'
          alias je='jj edit'
          alias jb='jj branch'
          alias jrb='jj rebase'
          alias jsp='jj split'
          alias jsq='jj squash'
        '';
      };
    };
  };
}
</file>

<file path="home/ui/hyprland/core.nix">
###############################################################################
# Hyprland Core Settings Module (Maid Version)
# Contains core Hyprland configuration including:
# - General UI settings (gaps, borders, layout)
# - Input settings (keyboard, mouse)
# - Decoration settings (rounding, blur)
# - Animation settings
# - Rendering settings
# - Environment variables
###############################################################################
{
  config,
  lib,
  hostSystem,
  cfg,
  ...
}:
###########################################################################
# Core Hyprland Configuration
###########################################################################
{
  ###########################################################################
  # Theme & Colors (Hyprland Variables)
  ###########################################################################
  "$active_colour" = "ffffffff";
  "$transparent" = "ffffff00";
  "$inactive_colour" = "333333ff";
  ###########################################################################
  # General User Interface Settings
  ###########################################################################
  general = {
    gaps_in = 10;
    gaps_out = 5;
    border_size = 1;
    "col.active_border" = "rgba($active_colour)";
    "col.inactive_border" = "rgba($inactive_colour)";
    layout =
      if cfg.hy3.enable
      then "hy3"
      else if cfg.group.enable
      then "group"
      else "dwindle";
  };

  ###########################################################################
  # Input Settings (keyboard & mouse)
  ###########################################################################
  input = {
    kb_layout = "us";
    follow_mouse = 1;
    sensitivity = -1.0;
    force_no_accel = true;
    mouse_refocus = false;
  };

  ###########################################################################
  # Window Decoration & Effects
  ###########################################################################
  decoration = {
    rounding = 0;
    blur = {
      enabled = true;
      size = 10;
      passes = 3;
      ignore_opacity = true;
      popups = true;
    };
  };

  ###########################################################################
  # Rendering Settings
  ###########################################################################
  render = {
    cm_enabled = 0;
    explicit_sync = 1;
  };

  ###########################################################################
  # Bezier Curves (Top-level, defined before animations)
  ###########################################################################
  bezier = [
    "in-out,.65,-0.01,0,.95"
    "woa,0,0,0,1"
  ];

  ###########################################################################
  # Animation Settings
  ###########################################################################
  animations = {
    enabled =
      if config.home.core.appearance.animations.enable
      then 1
      else 0;
    animation = [
      "windows,1,2,woa,popin"
      "border,1,10,default"
      "fade,1,10,default"
      "workspaces,1,5,in-out,slide"
    ];
  };

  ###########################################################################
  # System & Debug Settings
  ###########################################################################
  misc = {
    disable_hyprland_logo = true;
    disable_splash_rendering = true;
  };

  debug.disable_logs = false;

  ###########################################################################
  # Environment Variables
  ###########################################################################
  env =
    # Cursor configuration
    [
      "HYPRCURSOR_THEME,DeepinDarkV20-hypr"
      "HYPRCURSOR_SIZE,${toString config.home.core.appearance.cursorSize}"
      "XCURSOR_THEME,DeepinDarkV20-x11"
      "XCURSOR_SIZE,${toString config.home.core.appearance.cursorSize}"
    ]
    # NVIDIA-specific environment settings
    ++ lib.optionals hostSystem.hardware.nvidia.enable [
      "LIBVA_DRIVER_NAME,nvidia"
      "GBM_BACKEND,nvidia-drm"
      "__GLX_VENDOR_LIBRARY_NAME,nvidia"
    ];
}
</file>

<file path="home/ui/hyprland/keybindings.nix">
###############################################################################
# Hyprland Keybindings Module (Maid Version)
# Contains all keybindings for Hyprland (excluding AGS-specific bindings)
###############################################################################
{
  lib,
  defaults,
  cfg,
  ...
}:
###########################################################################
# Keybindings Configuration
###########################################################################
{
  ###########################################################################
  # Application Shortcut Variables
  ###########################################################################
  "$mod" = "SUPER";
  "$mod2" = "ALT";
  "$term" = defaults.terminal;
  "$filemanager" = defaults.fileManager;
  "$browser" = defaults.browser;
  "$discord" = defaults.discord;
  "$launcher" = defaults.launcher;
  "$ide" = defaults.ide;
  "$notepad" = "${defaults.terminal} -e ${defaults.editor}";
  "$obs" = "obs";

  ###########################################################################
  # Keybindings Configuration
  ###########################################################################
  bind = lib.lists.flatten [
    # -- Group Layout Bindings --
    (lib.optional cfg.group.enable "$mod CTRL, G, togglegroup")
    (lib.optional cfg.group.enable "$mod CTRL SHIFT, G, lockgroups, toggle")
    (lib.optional cfg.group.enable "$mod CTRL, J, changegroupactive, b")
    (lib.optional cfg.group.enable "$mod CTRL, K, changegroupactive, f")
    (lib.optional cfg.group.enable "$mod CTRL SHIFT, J, moveintogroup, b")
    (lib.optional cfg.group.enable "$mod CTRL SHIFT, K, moveintogroup, f")
    (lib.optional cfg.group.enable "$mod CTRL, H, moveoutofgroup")

    # -- Essential Controls --
    [
      "$mod, Q, killactive"
      "$mod, M, exit"
      "$mod, F, fullscreen"
      "$mod, TAB, layoutmsg, orientationnext"
      "$mod, space, togglefloating"
      "$mod, P, pseudo"
    ]

    # -- Primary Applications --
    [
      "$mod, D, exec, $term"
      "$mod, E, exec, $filemanager"
      "$mod, R, exec, $launcher"
      "$mod, O, exec, $notepad"
      "$mod2, 1, exec, $ide"
      "$mod2, 2, exec, $browser"
      "$mod2, 3, exec, $discord"
      "$mod2, 4, exec, steam"
      "$mod2, 5, exec, $obs"
    ]

    # -- Monitor Management --
    [
      "$mod SHIFT, S, swapactiveworkspaces, DP-4 HDMI-A-2"
      "$mod, S, movecurrentworkspacetomonitor, +1"
    ]

    # -- Window Movement (WASD keys) --
    (lib.lists.forEach ["w" "a" "s" "d"] (key: let
      direction =
        {
          "w" = "u";
          "a" = "l";
          "s" = "d";
          "d" = "r";
        }
        .${
          key
        };
    in [
      "$mod2, ${key}, movefocus, ${direction}"
      "$mod2 SHIFT, ${key}, movewindow, ${direction}"
    ]))

    # -- Workspace Management (1-9) --
    (lib.lists.forEach (lib.range 1 9) (i: let
      num = toString i;
    in [
      "$mod, ${num}, workspace, ${num}"
      "$mod SHIFT, ${num}, movetoworkspacesilent, ${num}"
    ]))

    # -- System Controls --
    [
      "Ctrl$mod2,Delete, exec, gnome-system-monitor"
      "$mod Shift, M, exec, shutdown now"
      "Ctrl$mod2Shift, M, exec, reboot"
      "Ctrl,Period,exec,smile"
    ]

    # -- Utility Commands --
    [
      "$mod, G, exec, grim -g \"$(slurp -d)\" - | wl-copy -t image/png"
      "$mod SHIFT, G, exec, grim - | wl-copy -t image/png"
      "$mod, GRAVE, exec, hyprpicker | wl-copy"
    ]

    # -- Special Commands --
    [
      "$mod SHIFT, C, exec, killall swaybg; for monitor in $(hyprctl monitors -j | jq -r '.[].name'); do wall=$(find /home/y0usaf/DCIM/Wallpapers/32_9 -type f | shuf -n 1); swaybg -o $monitor -i $wall -m fill & done"
    ]
  ];

  ###########################################################################
  # Additional Mouse Bindings
  ###########################################################################
  bindm = [
    "$mod, mouse:272, movewindow"
    "$mod, mouse:273, resizewindow"
  ];
}
</file>

<file path="home/ui/hyprland/quickshell-integration.nix">
###############################################################################
# Hyprland Quickshell Integration Module (Maid Version)
# Contains Quickshell-specific configuration and keybindings
###############################################################################
{
  config,
  lib,
  ...
}: let
  # Safely check if Quickshell is enabled
  quickshellEnabled = config.home.ui.quickshell.enable or false;
in
  ###########################################################################
  # Quickshell Integration Configuration
  ###########################################################################
  {
    ###########################################################################
    # Quickshell Autostart Configuration
    ###########################################################################
    "exec-once" = lib.optionals quickshellEnabled [
      "exec quickshell"
    ];

    ###########################################################################
    # Quickshell Keybindings
    ###########################################################################
    bind = lib.optionals quickshellEnabled [
      # Alt+Tab to toggle workspace indicators
      "$mod2, TAB, exec, quickshell ipc call workspaces toggle"
    ];
  }
</file>

<file path="home/ui/default.nix">
###############################################################################
# UI Modules Collection (Maid)
# Imports all ui-related Home modules
###############################################################################
{...}: {
  imports = [
    ./ags.nix
    ./cursor.nix
    ./fonts.nix
    ./foot.nix
    ./gtk.nix
    ./hyprland
    ./mako.nix
    ./quickshell.nix
    ./wallust.nix
    ./wayland.nix
  ];
}
</file>

<file path="lib/flake/shared.nix">
###############################################################################
# Shared Flake Utilities
# Common functionality for discovering and importing unified host configurations
###############################################################################
{
  lib,
  pkgs,
  hostsDir ? ../../hosts,
  inputs ? null,
}: let
  # Explicit host list - no filesystem scanning
  hostNames = ["y0usaf-desktop"];

  # Import unified configurations for each host
  unifiedConfigs = builtins.listToAttrs (
    map
    (name: {
      inherit name;
      value = import (hostsDir + "/${name}/default.nix") {inherit lib pkgs inputs;};
    })
    hostNames
  );

  # Extract system configurations from unified configs
  systemConfigs = builtins.listToAttrs (
    map
    (name: {
      inherit name;
      value = {
        # Hardware configuration from system
        inherit (unifiedConfigs.${name}.system) hardware;
        # Service declarations from system
        inherit (unifiedConfigs.${name}.system) services;
        system = {
          # Move imports into system scope to avoid HM exposure
          imports = unifiedConfigs.${name}.system.imports or [];
        };
        users = unifiedConfigs.${name}.users or {};
      };
    })
    hostNames
  );

  # Extract home configurations from unified configs (disabled for migration)
  homeConfigs = builtins.listToAttrs (
    map
    (name: {
      inherit name;
      value = unifiedConfigs.${name}.home or {};
    })
    hostNames
  );

  # Common specialArgs builder
  mkSpecialArgs = commonSpecialArgs: hostname:
    commonSpecialArgs
    // {
      hostSystem = systemConfigs.${hostname};
      hostHome = homeConfigs.${hostname};
      inherit hostname;
    };
  # Simplified shared module function - just imports options and sets config
  mkSharedModule = {
    hostname,
    hostsDir ? hostsDir,
  }: {
    lib,
    config,
    pkgs,
    ...
  }: let
    # Read the host configuration directly
    hostConfig =
      if hostname != null
      then
        import (hostsDir + "/${hostname}/default.nix") {
          inherit pkgs;
          inputs = null;
        }
      else throw "hostname must be provided to shared core module";

    # Extract shared configuration from host config
    sharedConfig = hostConfig.shared;
  in {
    options.shared = {
      username = lib.mkOption {
        type = lib.types.str;
        description = "System username for the primary user account";
      };
      hostname = lib.mkOption {
        type = lib.types.str;
        description = "System hostname";
      };
      homeDirectory = lib.mkOption {
        type = lib.types.path;
        description = "Path to the user's home directory";
      };
      stateVersion = lib.mkOption {
        type = lib.types.str;
        description = "NixOS state version for compatibility";
      };
      timezone = lib.mkOption {
        type = lib.types.str;
        description = "System timezone";
      };
      config = lib.mkOption {
        type = lib.types.str;
        description = "Configuration profile identifier";
        default = "default";
      };
      tokenDir = lib.mkOption {
        type = lib.types.str;
        description = "Directory containing token files";
      };
      zsh = lib.mkOption {
        type = lib.types.submodule {
          options = {
            cat-fetch = lib.mkOption {
              type = lib.types.bool;
              default = true;
            };
            history-memory = lib.mkOption {
              type = lib.types.int;
              default = 1000;
            };
            history-storage = lib.mkOption {
              type = lib.types.int;
              default = 1000;
            };
            enableFancyPrompt = lib.mkOption {
              type = lib.types.bool;
              default = true;
            };
            zellij = lib.mkOption {
              type = lib.types.submodule {
                options = {
                  enable = lib.mkOption {
                    type = lib.types.bool;
                    default = false;
                  };
                };
              };
              default = {};
            };
          };
        };
        default = {};
      };
    };

    config = {
      shared = sharedConfig;
      assertions = [
        {
          assertion = config.shared.username != "";
          message = "Username cannot be empty";
        }
        {
          assertion = config.shared.hostname != "";
          message = "Hostname cannot be empty";
        }
      ];
    };
  };
in {
  inherit hostNames unifiedConfigs systemConfigs homeConfigs mkSpecialArgs mkSharedModule;
}
</file>

<file path="system/core/system.nix">
###############################################################################
# System Configuration
# Core system settings and options - no external dependencies
###############################################################################
{
  config,
  lib,
  ...
}: {
  # Define system-specific configuration options
  options.hostSystem = {
    # Core system identity
    username = lib.mkOption {
      type = lib.types.str;
      description = "Primary system username";
    };

    hostname = lib.mkOption {
      type = lib.types.str;
      description = "System hostname";
    };

    homeDirectory = lib.mkOption {
      type = lib.types.path;
      description = "Primary user home directory path";
    };

    # System settings
    stateVersion = lib.mkOption {
      type = lib.types.str;
      description = "NixOS state version for compatibility";
    };

    timezone = lib.mkOption {
      type = lib.types.str;
      description = "System timezone";
    };

    # Configuration metadata
    profile = lib.mkOption {
      type = lib.types.str;
      description = "Configuration profile identifier";
      default = "default";
    };

    # Hardware configuration options
    hardware = lib.mkOption {
      type = lib.types.attrs;
      description = "Hardware configuration options";
      default = {};
    };

    # Services configuration options
    services = lib.mkOption {
      type = lib.types.attrs;
      description = "System services configuration";
      default = {};
    };
  };

  config = {
    # Set core NixOS configuration based on system options
    system.stateVersion = config.hostSystem.stateVersion;
    time.timeZone = config.hostSystem.timezone;
    networking.hostName = config.hostSystem.hostname;

    # Allow unfree packages
    nixpkgs.config.allowUnfree = true;

    # Validation
    assertions = [
      {
        assertion = config.hostSystem.username != "";
        message = "System username cannot be empty";
      }
      {
        assertion = config.hostSystem.hostname != "";
        message = "System hostname cannot be empty";
      }
      {
        assertion = lib.hasPrefix "/" (toString config.hostSystem.homeDirectory);
        message = "Home directory must be an absolute path";
      }
    ];
  };
}
</file>

<file path="system/virtualization/containers.nix">
###############################################################################
# Container Virtualization Configuration
# Docker and Podman container engines:
# - Docker daemon
# - Podman container engine
# - LXD container hypervisor
###############################################################################
{
  lib,
  config,
  hostSystem,
  ...
}: {
  config = {
    ###########################################################################
    # Container Virtualization
    # Services enabled based on host capability declarations
    ###########################################################################
    virtualisation = {
      lxd.enable = true; # Enable LXD container hypervisor

      docker = lib.mkIf (hostSystem.services.docker.enable or false) {
        enable = true; # Enable Docker daemon
        enableOnBoot = true; # Start Docker on boot
      };

      podman = lib.mkIf (hostSystem.services.docker.enable or false) {
        enable = true; # Enable Podman as Docker alternative
      };
    };
  };
}
</file>

<file path="lib/flake/outputs/default.nix">
inputs: let
  inherit (inputs.nixpkgs) lib;

  ## Shared Configuration
  system = "x86_64-linux";

  ## Package Configuration
  pkgs = import inputs.nixpkgs {
    inherit system;
    overlays = [
      # Extend lib with custom utilities
      (final: prev: {
        lib = prev.lib.extend (libfinal: libprev: {
          importDirs = dir: let
            dirs =
              libprev.filterAttrs (n: v: v == "directory" && n != ".git")
              (builtins.readDir dir);
            dirPaths = libprev.mapAttrsToList (name: _: dir + "/${name}/default.nix") dirs;
          in
            libprev.filter (path: builtins.pathExists path) dirPaths;

          importModules = dir: let
            files =
              libprev.filterAttrs (n: v: v == "regular" && libprev.hasSuffix ".nix" n && n != "default.nix")
              (builtins.readDir dir);
          in
            map (name: dir + "/${name}") (builtins.attrNames files);

          # Module definition helpers
          t = libprev.types;
          mkOpt = type: description: libprev.mkOption {inherit type description;};
          mkBool = libprev.types.bool;
          mkStr = libprev.types.str;
          mkOptDef = type: default: description: libprev.mkOption {inherit type default description;};

          defaultAppModule = libprev.types.submodule {
            options = {
              command = libprev.mkOption {
                type = libprev.types.str;
                description = "Command to execute the application.";
              };
            };
          };

          dirModule = libprev.types.submodule {
            options = {
              path = libprev.mkOption {
                type = libprev.types.str;
                description = "Absolute path to the directory";
              };
              create = libprev.mkOption {
                type = libprev.types.bool;
                default = true;
                description = "Whether to create the directory if it doesn't exist";
              };
            };
          };
        });
      })
      # Custom packages
      (_final: _prev: {
        fastFonts = inputs.fast-fonts.packages.${system}.default;
      })
    ];
    config.allowUnfree = true;
    config.cudaSupport = true;
  };

  ## Import host utilities (new system without shared dependencies)
  hostUtils = import ../default.nix {
    inherit (pkgs) lib;
    inherit pkgs;
  };

  ## Common Special Arguments for Modules
  commonSpecialArgs = {
    inherit inputs;
    inherit (inputs) disko fast-fonts nix-minecraft;
  };
in {
  ## Formatter Setup
  formatter.${system} = pkgs.alejandra;

  ## NixOS Configurations
  nixosConfigurations = hostUtils.mkNixosConfigurations {
    inherit inputs system commonSpecialArgs;
  };
}
</file>

<file path="lib/flake/default.nix">
###############################################################################
# Flake Utilities
# Host configuration utilities and helper functions
###############################################################################
{
  lib,
  pkgs,
  ...
}: let
  # Import system configuration utilities (no shared dependencies)
  system = import ./system.nix {inherit lib pkgs;};
in {
  # Export configuration functions
  inherit (system) mkNixosConfigurations;
}
</file>

<file path="lib/flake/system.nix">
###############################################################################
# System Configuration Utilities
# Functions for generating NixOS system configurations without shared dependencies
###############################################################################
{
  lib,
  pkgs,
  hostsDir ? ../../hosts,
}: {
  # Helper function to generate nixosConfigurations
  mkNixosConfigurations = {
    inputs,
    system,
    commonSpecialArgs,
  }: let
    hostNames = ["y0usaf-desktop"];

    maidIntegration = import ./maid.nix {inherit hostsDir;};
  in
    builtins.listToAttrs (map
      (hostname: let
        # Import host configuration
        hostConfig = import (hostsDir + "/${hostname}/default.nix") {
          inherit pkgs inputs;
        };
      in {
        name = hostname;
        value = inputs.nixpkgs.lib.nixosSystem {
          inherit system;
          specialArgs =
            commonSpecialArgs
            // {
              inherit hostname hostsDir;
              inherit (pkgs) lib;
              # Make host configuration available to modules
              hostConfig = hostConfig;
              # Pass hostSystem for hardware modules (for backward compatibility)
              hostSystem = hostConfig.system;
            };
          modules = [
            # System configuration with direct values (no shared dependency)
            ({config, ...}: {
              # Import system modules from host config
              imports = hostConfig.system.imports;

              # Configure system options directly from host config
              hostSystem = {
                username = hostConfig.system.username;
                hostname = hostConfig.system.hostname;
                homeDirectory = hostConfig.system.homeDirectory;
                stateVersion = hostConfig.system.stateVersion;
                timezone = hostConfig.system.timezone;
                profile = hostConfig.system.profile or "default";
                hardware = hostConfig.system.hardware or {};
                services = hostConfig.system.services or {};
              };
            })

            # Integration modules
            (maidIntegration.mkNixosModule {inherit inputs hostname;})

            # Home modules (maid-based)
            ../../home

            # External modules
            inputs.chaotic.nixosModules.default
          ];
        };
      })
      hostNames);
}
</file>

<file path="system/default.nix">
{lib, ...}: {imports = lib.importDirs ./.;}
</file>

<file path="flake.lock">
{
  "nodes": {
    "alejandra": {
      "inputs": {
        "fenix": "fenix",
        "flakeCompat": "flakeCompat",
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1751513446,
        "narHash": "sha256-pnRh5ysSgMSOQxvL82sNJRwD/CiSYWplrGRU2WLoNKQ=",
        "owner": "kamadorueda",
        "repo": "alejandra",
        "rev": "c68bef57c1db3add865493d9cb741a14618bdc28",
        "type": "github"
      },
      "original": {
        "owner": "kamadorueda",
        "repo": "alejandra",
        "type": "github"
      }
    },
    "aquamarine": {
      "inputs": {
        "hyprutils": [
          "hyprland",
          "hyprutils"
        ],
        "hyprwayland-scanner": [
          "hyprland",
          "hyprwayland-scanner"
        ],
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1751740947,
        "narHash": "sha256-35040CHH7P3JGmhGVfEb2oJHL/A5mI2IXumhkxrBnao=",
        "owner": "hyprwm",
        "repo": "aquamarine",
        "rev": "dfc1db15a08c4cd234288f66e1199c653495301f",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "aquamarine",
        "type": "github"
      }
    },
    "chaotic": {
      "inputs": {
        "flake-schemas": "flake-schemas",
        "home-manager": "home-manager",
        "jovian": "jovian",
        "nixpkgs": "nixpkgs",
        "rust-overlay": "rust-overlay"
      },
      "locked": {
        "lastModified": 1752505131,
        "narHash": "sha256-qb2m56dnA8OyBQSFeLAjZBaY/9Lztuil3JLoui07osI=",
        "owner": "chaotic-cx",
        "repo": "nyx",
        "rev": "a8a612059be130e38398c63337a9f7358579535a",
        "type": "github"
      },
      "original": {
        "owner": "chaotic-cx",
        "ref": "nyxpkgs-unstable",
        "repo": "nyx",
        "type": "github"
      }
    },
    "deepin-dark-hyprcursor": {
      "inputs": {
        "flake-utils": "flake-utils",
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1747700524,
        "narHash": "sha256-vgiWUbfEl4JprHk80o8zj5Rzv9631a6fU5aclh0gQBw=",
        "owner": "y0usaf",
        "repo": "Deepin-Dark-hyprcursor",
        "rev": "9d7db0295c36bbe5325331048efd748b1fb2df90",
        "type": "github"
      },
      "original": {
        "owner": "y0usaf",
        "ref": "9d7db02",
        "repo": "Deepin-Dark-hyprcursor",
        "type": "github"
      }
    },
    "deepin-dark-xcursor": {
      "inputs": {
        "flake-utils": "flake-utils_2",
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1747700606,
        "narHash": "sha256-hUamIUMXPXpvW9JRjAITd7bDFWmDeZak9RCr+nyPpIg=",
        "owner": "y0usaf",
        "repo": "Deepin-Dark-xcursor",
        "rev": "b3df394dd67ab93ead5ba08db3b3bb46132e0d8c",
        "type": "github"
      },
      "original": {
        "owner": "y0usaf",
        "ref": "b3df394",
        "repo": "Deepin-Dark-xcursor",
        "type": "github"
      }
    },
    "disko": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1752113600,
        "narHash": "sha256-7LYDxKxZgBQ8LZUuolAQ8UkIB+jb4A2UmiR+kzY9CLI=",
        "owner": "nix-community",
        "repo": "disko",
        "rev": "79264292b7e3482e5702932949de9cbb69fedf6d",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "disko",
        "type": "github"
      }
    },
    "fast-fonts": {
      "inputs": {
        "nixpkgs": "nixpkgs_2"
      },
      "locked": {
        "lastModified": 1747663664,
        "narHash": "sha256-qifZ5qr2nwX0I3Oi0XlykcDkbj1XJgACS21Actsw3Oo=",
        "owner": "y0usaf",
        "repo": "Fast-Font",
        "rev": "0fedb4d14f298154489cab4163a0aae3dcc2c373",
        "type": "github"
      },
      "original": {
        "owner": "y0usaf",
        "repo": "Fast-Font",
        "type": "github"
      }
    },
    "fenix": {
      "inputs": {
        "nixpkgs": [
          "alejandra",
          "nixpkgs"
        ],
        "rust-analyzer-src": "rust-analyzer-src"
      },
      "locked": {
        "lastModified": 1730615655,
        "narHash": "sha256-2HBR3zLn57LXKNRtxBb+O+uDqHM4n0pz51rPayMl4cg=",
        "owner": "nix-community",
        "repo": "fenix",
        "rev": "efeb50e2535b17ffd4a135e6e3e5fd60a525180c",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "fenix",
        "type": "github"
      }
    },
    "flake-compat": {
      "flake": false,
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_2": {
      "flake": false,
      "locked": {
        "lastModified": 1747046372,
        "narHash": "sha256-CIVLLkVgvHYbgI2UpXvIIBJ12HWgX+fjA8Xf8PUmqCY=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "9100a0f413b0c601e0533d1d94ffd501ce2e7885",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-schemas": {
      "locked": {
        "lastModified": 1721999734,
        "narHash": "sha256-G5CxYeJVm4lcEtaO87LKzOsVnWeTcHGKbKxNamNWgOw=",
        "rev": "0a5c42297d870156d9c57d8f99e476b738dcd982",
        "revCount": 75,
        "type": "tarball",
        "url": "https://api.flakehub.com/f/pinned/DeterminateSystems/flake-schemas/0.1.5/0190ef2f-61e0-794b-ba14-e82f225e55e6/source.tar.gz"
      },
      "original": {
        "type": "tarball",
        "url": "https://flakehub.com/f/DeterminateSystems/flake-schemas/%3D0.1.5.tar.gz"
      }
    },
    "flake-utils": {
      "inputs": {
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_2": {
      "inputs": {
        "systems": "systems_2"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flake-utils_3": {
      "inputs": {
        "systems": "systems_5"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "flakeCompat": {
      "flake": false,
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "gitignore": {
      "inputs": {
        "nixpkgs": [
          "hyprland",
          "pre-commit-hooks",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1709087332,
        "narHash": "sha256-HG2cCnktfHsKV0s4XW83gU3F57gaTljL9KNSuG6bnQs=",
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "rev": "637db329424fd7e46cf4185293b9cc8c88c95394",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "type": "github"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "chaotic",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1752402455,
        "narHash": "sha256-mCHfZhQKdTj2JhCFcqfOfa3uKZbwUkPQbd0/zPnhOE8=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "bf893ad4cbf46610dd1b620c974f824e266cd1df",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "hy3": {
      "inputs": {
        "hyprland": [
          "hyprland"
        ]
      },
      "locked": {
        "lastModified": 1752485079,
        "narHash": "sha256-jkwKdbmPnL/mwJtGvBnWj8EonOni3+ZRUHsiiIJ/QZ8=",
        "owner": "outfoxxed",
        "repo": "hy3",
        "rev": "8b48645284a0be057ee198a3baf4288ab92ef6d1",
        "type": "github"
      },
      "original": {
        "owner": "outfoxxed",
        "repo": "hy3",
        "type": "github"
      }
    },
    "hyprcursor": {
      "inputs": {
        "hyprlang": [
          "hyprland",
          "hyprlang"
        ],
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1749155331,
        "narHash": "sha256-XR9fsI0zwLiFWfqi/pdS/VD+YNorKb3XIykgTg4l1nA=",
        "owner": "hyprwm",
        "repo": "hyprcursor",
        "rev": "45fcc10b4c282746d93ec406a740c43b48b4ef80",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprcursor",
        "type": "github"
      }
    },
    "hyprgraphics": {
      "inputs": {
        "hyprutils": [
          "hyprland",
          "hyprutils"
        ],
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1751808145,
        "narHash": "sha256-OXgL0XaKMmfX2rRQkt9SkJw+QNfv0jExlySt1D6O72g=",
        "owner": "hyprwm",
        "repo": "hyprgraphics",
        "rev": "b841473a0bd4a1a74a0b64f1ec2ab199035c349f",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprgraphics",
        "type": "github"
      }
    },
    "hyprgraphics_2": {
      "inputs": {
        "hyprutils": [
          "hyprpaper",
          "hyprutils"
        ],
        "nixpkgs": [
          "hyprpaper",
          "nixpkgs"
        ],
        "systems": [
          "hyprpaper",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1738018829,
        "narHash": "sha256-5Ol5iahMlELx3lWuChyZsqqLk6sP6aqaJCJFw92OZGo=",
        "owner": "hyprwm",
        "repo": "hyprgraphics",
        "rev": "12cd7034e441a5ebfdef1a090c0788413b4a635b",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprgraphics",
        "type": "github"
      }
    },
    "hyprland": {
      "inputs": {
        "aquamarine": "aquamarine",
        "hyprcursor": "hyprcursor",
        "hyprgraphics": "hyprgraphics",
        "hyprland-protocols": "hyprland-protocols",
        "hyprland-qtutils": "hyprland-qtutils",
        "hyprlang": "hyprlang",
        "hyprutils": "hyprutils",
        "hyprwayland-scanner": "hyprwayland-scanner",
        "nixpkgs": [
          "nixpkgs"
        ],
        "pre-commit-hooks": "pre-commit-hooks",
        "systems": "systems_3",
        "xdph": "xdph"
      },
      "locked": {
        "lastModified": 1752500930,
        "narHash": "sha256-Vr6XIBafMzYH0ExrTI8ijTTBnT+Ayew3UJxkIVJUygo=",
        "owner": "hyprwm",
        "repo": "Hyprland",
        "rev": "06fcdbd9c77c90fc9c3115b646f602a84c53a40e",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "Hyprland",
        "type": "github"
      }
    },
    "hyprland-protocols": {
      "inputs": {
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1749046714,
        "narHash": "sha256-kymV5FMnddYGI+UjwIw8ceDjdeg7ToDVjbHCvUlhn14=",
        "owner": "hyprwm",
        "repo": "hyprland-protocols",
        "rev": "613878cb6f459c5e323aaafe1e6f388ac8a36330",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprland-protocols",
        "type": "github"
      }
    },
    "hyprland-qt-support": {
      "inputs": {
        "hyprlang": [
          "hyprland",
          "hyprland-qtutils",
          "hyprlang"
        ],
        "nixpkgs": [
          "hyprland",
          "hyprland-qtutils",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "hyprland-qtutils",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1749154592,
        "narHash": "sha256-DO7z5CeT/ddSGDEnK9mAXm1qlGL47L3VAHLlLXoCjhE=",
        "owner": "hyprwm",
        "repo": "hyprland-qt-support",
        "rev": "4c8053c3c888138a30c3a6c45c2e45f5484f2074",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprland-qt-support",
        "type": "github"
      }
    },
    "hyprland-qtutils": {
      "inputs": {
        "hyprland-qt-support": "hyprland-qt-support",
        "hyprlang": [
          "hyprland",
          "hyprlang"
        ],
        "hyprutils": [
          "hyprland",
          "hyprland-qtutils",
          "hyprlang",
          "hyprutils"
        ],
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1750371812,
        "narHash": "sha256-D868K1dVEACw17elVxRgXC6hOxY+54wIEjURztDWLk8=",
        "owner": "hyprwm",
        "repo": "hyprland-qtutils",
        "rev": "b13c7481e37856f322177010bdf75fccacd1adc8",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprland-qtutils",
        "type": "github"
      }
    },
    "hyprlang": {
      "inputs": {
        "hyprutils": [
          "hyprland",
          "hyprutils"
        ],
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1750371198,
        "narHash": "sha256-/iuJ1paQOBoSLqHflRNNGyroqfF/yvPNurxzcCT0cAE=",
        "owner": "hyprwm",
        "repo": "hyprlang",
        "rev": "cee01452bca58d6cadb3224e21e370de8bc20f0b",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprlang",
        "type": "github"
      }
    },
    "hyprlang_2": {
      "inputs": {
        "hyprutils": [
          "hyprpaper",
          "hyprutils"
        ],
        "nixpkgs": [
          "hyprpaper",
          "nixpkgs"
        ],
        "systems": [
          "hyprpaper",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1737634606,
        "narHash": "sha256-W7W87Cv6wqZ9PHegI6rH1+ve3zJPiyevMFf0/HwdbCQ=",
        "owner": "hyprwm",
        "repo": "hyprlang",
        "rev": "f41271d35cc0f370d300413d756c2677f386af9d",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprlang",
        "type": "github"
      }
    },
    "hyprpaper": {
      "inputs": {
        "hyprgraphics": "hyprgraphics_2",
        "hyprlang": "hyprlang_2",
        "hyprutils": "hyprutils_2",
        "hyprwayland-scanner": "hyprwayland-scanner_2",
        "nixpkgs": [
          "nixpkgs"
        ],
        "systems": "systems_4"
      },
      "locked": {
        "lastModified": 1738846991,
        "narHash": "sha256-frdKuM73PW6Zch5Nc/PlLfW/6B2ZfA51RleljAOWzWE=",
        "owner": "y0usaf",
        "repo": "hyprpaper",
        "rev": "bf38a169400eed81b605f1f54ed9590c295b895f",
        "type": "github"
      },
      "original": {
        "owner": "y0usaf",
        "ref": "main",
        "repo": "hyprpaper",
        "type": "github"
      }
    },
    "hyprutils": {
      "inputs": {
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1751888065,
        "narHash": "sha256-F2SV9WGqgtRsXIdUrl3sRe0wXlQD+kRRZcSfbepjPJY=",
        "owner": "hyprwm",
        "repo": "hyprutils",
        "rev": "a8229739cf36d159001cfc203871917b83fdf917",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprutils",
        "type": "github"
      }
    },
    "hyprutils_2": {
      "inputs": {
        "nixpkgs": [
          "hyprpaper",
          "nixpkgs"
        ],
        "systems": [
          "hyprpaper",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1737978343,
        "narHash": "sha256-TfFS0HCEJh63Kahrkp1h9hVDMdLU8a37Zz+IFucxyfA=",
        "owner": "hyprwm",
        "repo": "hyprutils",
        "rev": "6a8bc9d2a4451df12f5179dc0b1d2d46518a90ab",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprutils",
        "type": "github"
      }
    },
    "hyprwayland-scanner": {
      "inputs": {
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1751881472,
        "narHash": "sha256-meB0SnXbwIe2trD041MLKEv6R7NZ759QwBcVIhlSBfE=",
        "owner": "hyprwm",
        "repo": "hyprwayland-scanner",
        "rev": "8fb426b3e5452fd9169453fd6c10f8c14ca37120",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprwayland-scanner",
        "type": "github"
      }
    },
    "hyprwayland-scanner_2": {
      "inputs": {
        "nixpkgs": [
          "hyprpaper",
          "nixpkgs"
        ],
        "systems": [
          "hyprpaper",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1735493474,
        "narHash": "sha256-fktzv4NaqKm94VAkAoVqO/nqQlw+X0/tJJNAeCSfzK4=",
        "owner": "hyprwm",
        "repo": "hyprwayland-scanner",
        "rev": "de913476b59ee88685fdc018e77b8f6637a2ae0b",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "hyprwayland-scanner",
        "type": "github"
      }
    },
    "jovian": {
      "inputs": {
        "nix-github-actions": "nix-github-actions",
        "nixpkgs": [
          "chaotic",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1752340638,
        "narHash": "sha256-9+vBdRt/jg8fAll1VD3NXBibkRq9F8Wq/mW45I5jlvc=",
        "owner": "Jovian-Experiments",
        "repo": "Jovian-NixOS",
        "rev": "1129c951dcc2a269a12cb74d64bd64e44e724ecb",
        "type": "github"
      },
      "original": {
        "owner": "Jovian-Experiments",
        "repo": "Jovian-NixOS",
        "type": "github"
      }
    },
    "mnw": {
      "locked": {
        "lastModified": 1748710831,
        "narHash": "sha256-eZu2yH3Y2eA9DD3naKWy/sTxYS5rPK2hO7vj8tvUCSU=",
        "owner": "Gerg-L",
        "repo": "mnw",
        "rev": "cff958a4e050f8d917a6ff3a5624bc4681c6187d",
        "type": "github"
      },
      "original": {
        "owner": "Gerg-L",
        "repo": "mnw",
        "type": "github"
      }
    },
    "nix-github-actions": {
      "inputs": {
        "nixpkgs": [
          "chaotic",
          "jovian",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1729697500,
        "narHash": "sha256-VFTWrbzDlZyFHHb1AlKRiD/qqCJIripXKiCSFS8fAOY=",
        "owner": "zhaofengli",
        "repo": "nix-github-actions",
        "rev": "e418aeb728b6aa5ca8c5c71974e7159c2df1d8cf",
        "type": "github"
      },
      "original": {
        "owner": "zhaofengli",
        "ref": "matrix-name",
        "repo": "nix-github-actions",
        "type": "github"
      }
    },
    "nix-maid": {
      "locked": {
        "lastModified": 1751546878,
        "narHash": "sha256-4SWI8Wn8FaXxsmVHF8Sx+aTxI2h4juieylWSklD83Ts=",
        "owner": "viperML",
        "repo": "nix-maid",
        "rev": "dfb47763ee7daaf2d7935844f21f9733f5b7ec9b",
        "type": "github"
      },
      "original": {
        "owner": "viperML",
        "repo": "nix-maid",
        "type": "github"
      }
    },
    "nix-minecraft": {
      "inputs": {
        "flake-compat": "flake-compat_2",
        "flake-utils": "flake-utils_3",
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1752373696,
        "narHash": "sha256-xdjUzHG3sPAs3U1wVnx5hf1NrspCN+qtaBmAks+wnsM=",
        "owner": "Infinidoge",
        "repo": "nix-minecraft",
        "rev": "93ca1ac26dc85d8c34f838a5afb7138ff445d2bc",
        "type": "github"
      },
      "original": {
        "owner": "Infinidoge",
        "repo": "nix-minecraft",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1751984180,
        "narHash": "sha256-LwWRsENAZJKUdD3SpLluwDmdXY9F45ZEgCb0X+xgOL0=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "9807714d6944a957c2e036f84b0ff8caf9930bc0",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_2": {
      "locked": {
        "lastModified": 1751984180,
        "narHash": "sha256-LwWRsENAZJKUdD3SpLluwDmdXY9F45ZEgCb0X+xgOL0=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "9807714d6944a957c2e036f84b0ff8caf9930bc0",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_3": {
      "locked": {
        "lastModified": 1751984180,
        "narHash": "sha256-LwWRsENAZJKUdD3SpLluwDmdXY9F45ZEgCb0X+xgOL0=",
        "ref": "nixos-unstable",
        "rev": "9807714d6944a957c2e036f84b0ff8caf9930bc0",
        "revCount": 826938,
        "type": "git",
        "url": "https://github.com/NixOS/nixpkgs"
      },
      "original": {
        "ref": "nixos-unstable",
        "type": "git",
        "url": "https://github.com/NixOS/nixpkgs"
      }
    },
    "nixpkgs_4": {
      "locked": {
        "lastModified": 1719223410,
        "narHash": "sha256-jtIo8xR0Zp4SalIwmD+OdCwHF4l7OU6PD63UUK4ckt4=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "efb39c6052f3ce51587cf19733f5f4e5d515aa13",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixpkgs-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "obs-image-reaction": {
      "inputs": {
        "nixpkgs": "nixpkgs_4"
      },
      "locked": {
        "lastModified": 1719314544,
        "narHash": "sha256-GZa3+2OELKp/9b2+EwwzaIMNvR9niCy/YZ5OERhG9Hg=",
        "owner": "L-Nafaryus",
        "repo": "obs-image-reaction",
        "rev": "0dcb3c27de5782dfdf95cb047ccceb3e65360e6b",
        "type": "github"
      },
      "original": {
        "owner": "L-Nafaryus",
        "repo": "obs-image-reaction",
        "type": "github"
      }
    },
    "pre-commit-hooks": {
      "inputs": {
        "flake-compat": "flake-compat",
        "gitignore": "gitignore",
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1750779888,
        "narHash": "sha256-wibppH3g/E2lxU43ZQHC5yA/7kIKLGxVEnsnVK1BtRg=",
        "owner": "cachix",
        "repo": "git-hooks.nix",
        "rev": "16ec914f6fb6f599ce988427d9d94efddf25fe6d",
        "type": "github"
      },
      "original": {
        "owner": "cachix",
        "repo": "git-hooks.nix",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "alejandra": "alejandra",
        "chaotic": "chaotic",
        "deepin-dark-hyprcursor": "deepin-dark-hyprcursor",
        "deepin-dark-xcursor": "deepin-dark-xcursor",
        "disko": "disko",
        "fast-fonts": "fast-fonts",
        "hy3": "hy3",
        "hyprland": "hyprland",
        "hyprpaper": "hyprpaper",
        "mnw": "mnw",
        "nix-maid": "nix-maid",
        "nix-minecraft": "nix-minecraft",
        "nixpkgs": "nixpkgs_3",
        "obs-image-reaction": "obs-image-reaction"
      }
    },
    "rust-analyzer-src": {
      "flake": false,
      "locked": {
        "lastModified": 1730555913,
        "narHash": "sha256-KNHZUlqsEibg3YtfUyOFQSofP8hp1HKoY+laoesBxRM=",
        "owner": "rust-lang",
        "repo": "rust-analyzer",
        "rev": "f17a5bbfd0969ba2e63a74505a80e55ecb174ed9",
        "type": "github"
      },
      "original": {
        "owner": "rust-lang",
        "ref": "nightly",
        "repo": "rust-analyzer",
        "type": "github"
      }
    },
    "rust-overlay": {
      "inputs": {
        "nixpkgs": [
          "chaotic",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1752374969,
        "narHash": "sha256-Ky3ynEkJXih7mvWyt9DWoiSiZGqPeHLU1tlBU4b0mcc=",
        "owner": "oxalica",
        "repo": "rust-overlay",
        "rev": "75fb000638e6d0f57cb1e8b7a4550cbdd8c76f1d",
        "type": "github"
      },
      "original": {
        "owner": "oxalica",
        "repo": "rust-overlay",
        "type": "github"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_2": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_3": {
      "locked": {
        "lastModified": 1689347949,
        "narHash": "sha256-12tWmuL2zgBgZkdoB6qXZsgJEH9LR3oUgpaQq2RbI80=",
        "owner": "nix-systems",
        "repo": "default-linux",
        "rev": "31732fcf5e8fea42e59c2488ad31a0e651500f68",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default-linux",
        "type": "github"
      }
    },
    "systems_4": {
      "locked": {
        "lastModified": 1689347949,
        "narHash": "sha256-12tWmuL2zgBgZkdoB6qXZsgJEH9LR3oUgpaQq2RbI80=",
        "owner": "nix-systems",
        "repo": "default-linux",
        "rev": "31732fcf5e8fea42e59c2488ad31a0e651500f68",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default-linux",
        "type": "github"
      }
    },
    "systems_5": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "xdph": {
      "inputs": {
        "hyprland-protocols": [
          "hyprland",
          "hyprland-protocols"
        ],
        "hyprlang": [
          "hyprland",
          "hyprlang"
        ],
        "hyprutils": [
          "hyprland",
          "hyprutils"
        ],
        "hyprwayland-scanner": [
          "hyprland",
          "hyprwayland-scanner"
        ],
        "nixpkgs": [
          "hyprland",
          "nixpkgs"
        ],
        "systems": [
          "hyprland",
          "systems"
        ]
      },
      "locked": {
        "lastModified": 1751300244,
        "narHash": "sha256-PFuv1TZVYvQhha0ac53E3YgdtmLShrN0t4T6xqHl0jE=",
        "owner": "hyprwm",
        "repo": "xdg-desktop-portal-hyprland",
        "rev": "6115f3fdcb2c1a57b4a80a69f3c797e47607b90a",
        "type": "github"
      },
      "original": {
        "owner": "hyprwm",
        "repo": "xdg-desktop-portal-hyprland",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}
</file>

<file path="home/dev/nvim/settings.nix">
{
  config,
  lib,
  ...
}: let
  cfg = config.home.dev.nvim;
  username = "y0usaf";
in {
  config = lib.mkIf cfg.enable {
    users.users.${username}.maid.file = {
      xdg_config."nvim/init.lua".text = ''

        vim.g.mapleader = " "
        vim.g.maplocalleader = "\\"


        vim.opt.number = true
        vim.opt.relativenumber = true
        vim.opt.signcolumn = "yes"
        vim.opt.wrap = true
        vim.opt.linebreak = true
        vim.opt.breakindent = true
        vim.opt.showbreak = "‚Ü™ "
        vim.opt.termguicolors = true
        vim.opt.scrolloff = 8
        vim.opt.sidescrolloff = 8
        vim.opt.cursorline = true
        vim.opt.pumheight = 15
        vim.opt.showmode = false
        vim.opt.laststatus = 2
        vim.opt.cmdheight = 1
        vim.opt.expandtab = true
        vim.opt.tabstop = 2
        vim.opt.shiftwidth = 2
        vim.opt.clipboard = "unnamedplus"
        vim.opt.ignorecase = true
        vim.opt.smartcase = true
        vim.opt.updatetime = 250
        vim.opt.timeoutlen = 300
        vim.opt.mouse = "a"
        vim.opt.splitbelow = true
        vim.opt.splitright = true
        vim.opt.splitkeep = "screen"
        vim.opt.shortmess:append({ W = true, I = true, c = true, C = true })
        vim.opt.fillchars = { eob = " ", fold = " ", foldsep = " ", diff = "/" }
        vim.opt.listchars = { tab = "¬ª ", trail = "¬∑", nbsp = "‚ê£" }


        local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
        if not vim.loop.fs_stat(lazypath) then
          vim.fn.system({
            "git",
            "clone",
            "--filter=blob:none",
            "https://github.com/folke/lazy.nvim.git",
            "--branch=stable",
            lazypath,
          })
        end
        vim.opt.rtp:prepend(lazypath)


        local plugins = require("plugins")
        local appearance_plugins = require("plugins_appearance")
        for _, plugin in ipairs(appearance_plugins) do
          table.insert(plugins, plugin)
        end

        require("lazy").setup(plugins, {
          ui = { border = "rounded" },
        })


        -- Keymaps
        local keymap = vim.keymap.set

        -- Telescope
        local builtin = require("telescope.builtin")
        keymap("n", "<leader>ff", builtin.find_files, { desc = "Find files" })
        keymap("n", "<leader>fg", builtin.live_grep, { desc = "Live grep" })
        keymap("n", "<leader>fb", builtin.buffers, { desc = "Find buffers" })
        keymap("n", "<leader>fr", builtin.oldfiles, { desc = "Recent files" })
        keymap("n", "<leader>fh", builtin.help_tags, { desc = "Help tags" })
        keymap("n", "<leader>fo", builtin.git_status, { desc = "Git status" })

        -- File explorer
        keymap("n", "<leader>e", "<cmd>Neotree toggle<cr>", { desc = "File explorer" })

        -- Buffer navigation
        keymap("n", "<S-h>", "<cmd>bprevious<cr>", { desc = "Previous buffer" })
        keymap("n", "<S-l>", "<cmd>bnext<cr>", { desc = "Next buffer" })
        keymap("n", "<leader>bd", "<cmd>bdelete<cr>", { desc = "Delete buffer" })

        -- Window navigation
        keymap("n", "<C-h>", "<C-w>h", { desc = "Go to left window" })
        keymap("n", "<C-j>", "<C-w>j", { desc = "Go to lower window" })
        keymap("n", "<C-k>", "<C-w>k", { desc = "Go to upper window" })
        keymap("n", "<C-l>", "<C-w>l", { desc = "Go to right window" })

        -- Utility
        keymap("n", "<leader>ut", "<cmd>Twilight<cr>", { desc = "Toggle twilight" })
        keymap("n", "<C-\\", "<cmd>ToggleTerm<cr>", { desc = "Toggle terminal" })
        keymap("t", "<C-\\", "<cmd>ToggleTerm<cr>", { desc = "Toggle terminal" })
        keymap("n", "zR", function() require("ufo").openAllFolds() end, { desc = "Open all folds" })
        keymap("n", "zM", function() require("ufo").closeAllFolds() end, { desc = "Close all folds" })
        keymap("n", "zr", function() require("ufo").openFoldsExceptKinds() end, { desc = "Open folds except kinds" })
        keymap("n", "zm", function() require("ufo").closeFoldsWith() end, { desc = "Close folds with" })
        keymap("n", "zp", function() require("ufo").peekFoldedLinesUnderCursor() end, { desc = "Peek folded lines" })

        -- Diagnostics
        keymap("n", "<leader>xx", builtin.diagnostics, { desc = "Diagnostics" })
        keymap("n", "<leader>xd", function() builtin.diagnostics({ bufnr = 0 }) end, { desc = "Buffer diagnostics" })

        -- Leetcode
        keymap("n", "<leader>lq", "<cmd>Leet<cr>", { desc = "Leetcode menu" })
        keymap("n", "<leader>ll", "<cmd>Leet list<cr>", { desc = "Leetcode list" })
        keymap("n", "<leader>lt", "<cmd>Leet test<cr>", { desc = "Leetcode test" })
        keymap("n", "<leader>ls", "<cmd>Leet submit<cr>", { desc = "Leetcode submit" })
        keymap("n", "<leader>ln", "<cmd>messages<cr>", { desc = "View messages" })

        -- Basic
        keymap("n", "<leader>w", "<cmd>w<cr>", { desc = "Save file" })
        keymap("n", "<leader>q", "<cmd>q<cr>", { desc = "Quit" })
        keymap("n", "<leader>/", function() require("Comment.api").toggle.linewise.current() end, { desc = "Toggle comment" })
        keymap("v", "<leader>/", "<esc><cmd>lua require('Comment.api').toggle.linewise(vim.fn.visualmode())<cr>", { desc = "Toggle comment" })

        -- Better movement
        keymap({ "n", "x" }, "j", "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })
        keymap({ "n", "x" }, "k", "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })

        -- Move lines
        keymap("n", "<A-j>", "<cmd>m .+1<cr>==", { desc = "Move down" })
        keymap("n", "<A-k>", "<cmd>m .-2<cr>==", { desc = "Move up" })
        keymap("i", "<A-j>", "<esc><cmd>m .+1<cr>==gi", { desc = "Move down" })
        keymap("i", "<A-k>", "<esc><cmd>m .-2<cr>==gi", { desc = "Move up" })
        keymap("v", "<A-j>", ":m '>+1<cr>gv=gv", { desc = "Move down" })
        keymap("v", "<A-k>", ":m '<-2<cr>gv=gv", { desc = "Move up" })

        -- Indenting
        keymap("v", "<", "<gv")
        keymap("v", ">", ">gv")

        keymap("n", "<Esc>", "<cmd>nohlsearch<CR>")

        -- Auto-install treesitter parsers
        vim.api.nvim_create_autocmd("FileType", {
          callback = function()
            local parsers = require("nvim-treesitter.parsers")
            local lang = parsers.get_buf_lang()
            if parsers.get_parser_configs()[lang] and not parsers.has_parser(lang) then
              vim.schedule(function()
                vim.cmd("TSInstall " .. lang)
              end)
            end
          end,
        })
      '';
    };
  };
}
</file>

<file path="home/dev/claude-code.nix">
###############################################################################
# Claude Code Development Module (Maid Version)
# Configures Claude Code and related tools using nix-maid
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.dev.claude-code;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.dev.claude-code = {
    enable = lib.mkEnableOption "Claude Code development tools";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = with pkgs; [
        claude-code
        gemini-cli
      ];

      ###########################################################################
      # Global Claude Configuration
      ###########################################################################
      file.home = {
        ".claude/CLAUDE.md".text = ''
          # Claude NixOS Config

          ## CORE PHILOSOPHY

          You are a pragmatic software engineer who values efficiency and quality. Your "laziness" drives you to:
          - Write minimal, bulletproof code that won't need fixing later
          - Use established patterns and tools correctly
          - Solve the actual problem, not what you think the user wants
          - Fail fast with clear error messages

          **Key Mantras:**
          - "Do it right the first time or you'll be doing it again"
          - "The best code is the code you don't have to write"
          - "If you can't explain it simply, you don't understand it well enough"

          ## TASK WORKFLOW

          ### 1. Planning (Required for 3+ step tasks)
          - Use TodoWrite for complex tasks
          - Mark in_progress BEFORE starting
          - Mark completed IMMEDIATELY after finishing
          - Only ONE in_progress at a time

          ### 2. Implementation
          - Understand context first: read files, check structure
          - Use appropriate MCP tools (see Tool Selection Guide)
          - Write clean, extensible code with proper error handling

          ### 3. Verification
          - Format code: `alejandra .`
          - Test build: `nh os switch --dry`
          - Run linting/type-checking if available
          - Review changes with git diff before committing

          ## MCP TOOL SELECTION GUIDE

          ### Filesystem Operations
          - **ALWAYS use** `mcp__Filesystem__*` tools for file operations
          - **NEVER use** Read/Write/Edit tools when MCP Filesystem tools are available
          - Use `mcp__Filesystem__read_file` to understand context first
          - Use `mcp__Filesystem__edit_file` for targeted changes
          - Use `mcp__Filesystem__write_file` for new files or complete rewrites

          ### When to Use Gemini MCP
          - **Large file analysis**: Use `@file.extension` syntax for files >500 lines
          - **Complex debugging**: When you need deeper analysis capabilities
          - **Research tasks**: When you need to understand unfamiliar patterns
          - **NOT for**: Simple file operations, basic text manipulation, or routine tasks

          ### When to Use Sequential Thinking
          - **Multi-step tasks**: Any task requiring >2 distinct operations
          - **Complex workflows**: Reading ‚Üí Modifying ‚Üí Verifying ‚Üí Committing
          - **Error-prone tasks**: When the failure cost is high
          - **Planning phase**: Break down complex requests into manageable steps

          ### When to Use GitHub Repo MCP
          - **Analyzing GitHub repositories**: Understanding remote repo structure and contents
          - **Reading files from GitHub repos**: Access files without cloning
          - **Exploring project structure**: Navigate directories in remote repositories
          - **NOT for**: Local git operations (use regular git commands via Bash tool)

          ## PROJECT-SPECIFIC RULES

          ### NixOS System
          - Uses nix-maid (NOT home-manager)
          - Check flake.nix for available inputs
          - Clone external repos to `tmp/` folder (in gitignore)
          - Rebuild with `nh os switch` after configuration changes

          ### Build Commands
          ```bash
          alejandra .           # Format Nix code
          nh os switch --dry    # Test build without applying
          nh os switch          # Apply changes
          ```

          ### Git Workflow
          - Check status: `git status`
          - Review changes: `git diff`
          - Commit with descriptive messages
          - Follow existing commit message patterns in the repo

          ## COMMUNICATION STYLE

          - **Direct and concise**: No corporate speak or unnecessary explanations
          - **Explain technical decisions briefly**: So you don't have to explain twice
          - **Ask clarifying questions**: When requirements are vague or seem overcomplicated
          - **Call out issues upfront**: Prevent problems before they happen

          ## CODE QUALITY STANDARDS

          - **Consistent naming**: Clear, concise variables (`user` not `currentUserObject`)
          - **Proper error handling**: Fail fast with clear messages
          - **Modular design**: Testable functions without complex dependencies
          - **Security by default**: Follow security best practices
          - **Performance aware**: Consider performance implications
          - **Self-documenting**: Code clarity > extensive comments
        '';
      };
    };
  };
}
</file>

<file path="home/ui/hyprland/config.nix">
###############################################################################
# Hyprland Configuration Implementation (Maid Version)
# Main configuration logic for packages, files, and Hyprland setup
###############################################################################
{
  config,
  pkgs,
  lib,
  inputs,
  hostSystem,
  ...
}: let
  cfg = config.home.ui.hyprland;
  inherit (config.home.core) defaults;
  generators = import ../../../lib/generators/toHyprconf.nix lib;

  # Import all module configurations directly
  coreConfig = import ./core.nix {inherit config lib hostSystem cfg;};
  keybindingsConfig = import ./keybindings.nix {inherit lib defaults cfg;};
  windowRulesConfig = import ./window-rules.nix {inherit config lib cfg;};
  monitorsConfig = import ./monitors.nix {inherit config lib cfg;};
  agsConfig = import ./ags-integration.nix {inherit config lib cfg;};
  quickshellConfig = import ./quickshell-integration.nix {inherit config lib cfg;};
in {
  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    users.users.y0usaf.maid = {
      ###########################################################################
      # Packages
      ###########################################################################
      packages = [
        pkgs.hyprwayland-scanner # Tool associated with Hyprland
        (
          if cfg.flake.enable
          then inputs.hyprland.packages.${pkgs.system}.hyprland
          else pkgs.hyprland
        )
        # Screenshot tools
        pkgs.grim
        pkgs.slurp
        pkgs.wl-clipboard
        # Wallpaper cycling dependencies
        pkgs.jq
        pkgs.swaybg
      ];

      ###########################################################################
      # Hyprland Configuration Files
      ###########################################################################
      file.xdg_config = {
        # Main Hyprland configuration
        "hypr/hyprland.conf" = {
          text = let
            # Merge all configuration from modules with proper list concatenation
            hyprlandConfig = let
              # Merge non-list attributes normally
              baseConfig = lib.foldl lib.recursiveUpdate {} [
                coreConfig
                windowRulesConfig
                monitorsConfig
              ];
              # Manually combine bind lists
              allBinds = (keybindingsConfig.bind or []) ++ (agsConfig.bind or []) ++ (quickshellConfig.bind or []);
              allBindm = (keybindingsConfig.bindm or []) ++ (agsConfig.bindm or []) ++ (quickshellConfig.bindm or []);
              allBindr = (keybindingsConfig.bindr or []) ++ (agsConfig.bindr or []) ++ (quickshellConfig.bindr or []);
              allBinds_hold = (keybindingsConfig.binds or []) ++ (agsConfig.binds or []) ++ (quickshellConfig.binds or []);
            in
              baseConfig
              // keybindingsConfig
              // agsConfig
              // quickshellConfig
              // {
                bind = allBinds;
                bindm = allBindm;
                bindr = allBindr;
                binds = allBinds_hold;
              };

            # Generate plugins configuration if hy3 is enabled
            pluginsConfig = lib.optionalString cfg.hy3.enable (
              generators.pluginsToHyprconf [
                (
                  if cfg.flake.enable
                  then inputs.hy3.packages.${pkgs.system}.hy3
                  else pkgs.hyprlandPlugins.hy3
                )
              ] ["$"]
            );

            # Generate main configuration
            mainConfig = generators.toHyprconf {
              attrs = hyprlandConfig;
              importantPrefixes = ["$" "exec" "source"];
            };
          in
            mainConfig + lib.optionalString (pluginsConfig != "") "\n${pluginsConfig}";
        };

        # Hyprpaper configuration (if needed)
        "hypr/hyprpaper.conf" = {
          text = ''
            preload = ${config.home.directories.wallpapers.static.path}
            wallpaper = ,${config.home.directories.wallpapers.static.path}
            splash = false
            ipc = on
          '';
        };
      };
    };
  };
}
</file>

<file path="home/dev/nvim/packages.nix">
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.dev.nvim;
  username = "y0usaf";
in {
  config = lib.mkIf cfg.enable {
    users.users.${username}.maid.packages = [
      pkgs.ripgrep
      pkgs.fd
      pkgs.tree-sitter
      (pkgs.tree-sitter.withPlugins (p:
        with p; [
          tree-sitter-nix
          tree-sitter-lua
          tree-sitter-python
          tree-sitter-markdown
          tree-sitter-json
        ]))
      pkgs.neovim

      pkgs.lua-language-server
      pkgs.nil
      pkgs.pyright

      pkgs.stylua
      pkgs.alejandra
      pkgs.black

      pkgs.curl
      pkgs.jq
    ];
  };
}
</file>

<file path="home/services/syncthing.nix">
###############################################################################
# Syncthing Configuration (Maid Version)
# Simple syncthing service enablement
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.services.syncthing;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.services.syncthing = {
    enable = lib.mkEnableOption "Syncthing service";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = with pkgs; [
        syncthing
      ];

      ###########################################################################
      # Syncthing Configuration Directory
      ###########################################################################
      file.xdg_config."syncthing/.keep".text = '''';
    };

    ###########################################################################
    # Enable system syncthing user service
    ###########################################################################
    systemd.user.services.syncthing = {
      enable = true;
      wantedBy = ["default.target"];
      after = ["network.target"];
      serviceConfig = {
        ExecStart = "${pkgs.syncthing}/bin/syncthing serve --no-browser --no-restart --logflags=0";
        Restart = "on-failure";
        RestartSec = "5s";
        # User/Group handled by systemd --user
        WorkingDirectory = "/home/y0usaf";
        StateDirectory = "syncthing";
        StateDirectoryMode = "0700";
        ProtectSystem = "strict";
        ProtectHome = "read-only";
        ReadWritePaths = ["/home/y0usaf"];
        NoNewPrivileges = true;
        PrivateTmp = true;
        ProtectKernelTunables = true;
        ProtectKernelModules = true;
        ProtectControlGroups = true;
        RestrictRealtime = true;
        RestrictSUIDSGID = true;
        LockPersonality = true;
        RestrictAddressFamilies = ["AF_UNIX" "AF_INET" "AF_INET6"];
        SystemCallFilter = "@system-service";
        SystemCallErrorNumber = "EPERM";
      };
    };
  };
}
</file>

<file path="home/dev/nvim/appearance.nix">
{
  config,
  lib,
  ...
}: let
  cfg = config.home.dev.nvim;
  username = "y0usaf";
in {
  config = lib.mkIf cfg.enable {
    users.users.${username}.maid.file.xdg_config."nvim/lua/plugins_appearance.lua".text = ''
      return {
        -- Theme
        {
          "scottmckendry/cyberdream.nvim",
          lazy = false,
          priority = 1000,
          config = function()
            require("cyberdream").setup({
              transparent = true,
              italic_comments = true,
              borderless_pickers = true,
              lualine_style = "default",
              theme = {
                variant = "default",
                highlights = {
                  CursorLine = { bg = "#1e1e2e" },
                  Visual = { bg = "#313244" },
                  Search = { bg = "#f9e2af", fg = "#11111b" },
                  IncSearch = { bg = "#fab387", fg = "#11111b" },
                },
              },
            })
            vim.cmd.colorscheme("cyberdream")
          end,
        },

        -- UI Components
        {
          "Bekaboo/dropbar.nvim",
          event = "UIEnter",
          opts = { menu = { preview = false } },
        },
        { "stevearc/dressing.nvim", event = "VeryLazy", opts = {} },
        {
          "anuvyklack/windows.nvim",
          event = "UIEnter",
          dependencies = { "anuvyklack/middleclass" },
          opts = {
            autowidth = { enable = true, winwidth = 5, filetype = { help = 2 } },
            ignore = {
              buftype = { "quickfix" },
              filetype = { "NvimTree", "neo-tree", "undotree", "gundo" },
            },
          },
        },
        {
          "nvim-neo-tree/neo-tree.nvim",
          cmd = "Neotree",
          dependencies = { "nvim-lua/plenary.nvim", "nvim-tree/nvim-web-devicons", "MunifTanjim/nui.nvim" },
          opts = {
            filesystem = { follow_current_file = { enabled = true }, hijack_netrw_behavior = "open_current" },
            window = { width = 35 },
          },
        },
        {
          "nvim-lualine/lualine.nvim",
          event = "VeryLazy",
          opts = {
            options = { theme = "cyberdream", globalstatus = true },
          },
        },
        {
          "lewis6991/gitsigns.nvim",
          event = { "BufReadPre", "BufNewFile" },
          opts = {
            signs = {
              add = { text = "‚îÉ" },
              change = { text = "‚îÉ" },
              delete = { text = " " },
              topdelete = { text = "‚ñî" },
              changedelete = { text = "~" },
              untracked = { text = "‚îÜ" },
            },
            current_line_blame = true,
          },
        },
        {
          "lukas-reineke/indent-blankline.nvim",
          main = "ibl",
          opts = {
            indent = { char = "‚ñè", tab_char = "‚ñè" },
            scope = { enabled = true, char = "‚îÄ", show_start = true, show_end = true },
          },
        },
        { "folke/flash.nvim", event = "VeryLazy", opts = {} },
        {
          "echasnovski/mini.hipatterns",
          event = "VeryLazy",
          opts = function()
            local hipatterns = require("mini.hipatterns")
            return {
              highlighters = {
                fixme = { pattern = "%f[%w]()FIXME()%f[%W]", group = "MiniHipatternsFixme" },
                hack = { pattern = "%f[%w]()HACK()%f[%W]", group = "MiniHipatternsHack" },
                todo = { pattern = "%f[%w]()TODO()%f[%W]", group = "MiniHipatternsTodo" },
                note = { pattern = "%f[%w]()NOTE()%f[%W]", group = "MiniHipatternsNote" },
                hex_color = hipatterns.gen_highlighter.hex_color(),
              },
            }
          end,
        },
        {
          "akinsho/toggleterm.nvim",
          keys = { "<C-\\>" },
          opts = { direction = "float", float_opts = { border = "curved" } },
        },
      }
    '';
  };
}
</file>

<file path="home/dev/nvim/neovide.nix">
# Simple Neovide package installation
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.dev.nvim;
  username = "y0usaf";
in {
  config = lib.mkIf (cfg.enable && cfg.neovide) {
    users.users.${username}.maid = {
      packages = with pkgs; [
        neovide
      ];

      file.xdg_config."neovide/config.toml".text = ''
        [font]
        normal = ["Fast_Mono"]
        size = 14.0

        [window]
        transparency = 0.9

        [input]
        ime = true
      '';
    };
  };
}
</file>

<file path="home/services/hyprland-config-watcher.nix">
###############################################################################
# Hyprland Configuration Watcher Service
# Watches for changes to Hyprland config symlinks and reloads Hyprland
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.services.hyprlandConfigWatcher;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.services.hyprlandConfigWatcher = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = config.home.ui.hyprland.enable or false;
      description = "Enable Hyprland configuration watcher service (auto-enabled when Hyprland is enabled)";
    };

    configPath = lib.mkOption {
      type = lib.types.str;
      default = "/home/y0usaf/.config/hypr";
      description = "Path to the Hyprland configuration directory to watch";
    };

    reloadDelay = lib.mkOption {
      type = lib.types.int;
      default = 3;
      description = "Delay in seconds before reloading Hyprland after detecting changes";
    };

    startupDelay = lib.mkOption {
      type = lib.types.int;
      default = 5;
      description = "Delay in seconds before starting to watch (wait for Hyprland to be ready)";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      systemd.services."hyprland-config-watcher" = {
        description = "Watch Hyprland config directory for symlink changes and reload";
        script = ''
          # Enable debug output for logging
          set -x

          # Wait for Hyprland to be ready
          echo "Waiting ${toString cfg.startupDelay} seconds for Hyprland to be ready..."
          sleep ${toString cfg.startupDelay}

          # Function to reload Hyprland
          reload_hyprland() {
            echo "Detected config change, reloading Hyprland in ${toString cfg.reloadDelay} seconds..."
            sleep ${toString cfg.reloadDelay}

            # Get Hyprland instance signature
            local instance_sig
            if [[ -n "$HYPRLAND_INSTANCE_SIGNATURE" ]]; then
              instance_sig="$HYPRLAND_INSTANCE_SIGNATURE"
            else
              # Try to auto-detect the instance
              instance_sig=$(ls /tmp/hypr/ 2>/dev/null | head -n 1)
            fi

            echo "Using Hyprland instance: $instance_sig"

            # Try to reload via hyprctl
            if command -v hyprctl >/dev/null 2>&1; then
              if [[ -n "$instance_sig" ]]; then
                export HYPRLAND_INSTANCE_SIGNATURE="$instance_sig"
              fi

              if hyprctl reload 2>&1; then
                echo "Hyprland reloaded successfully"
                return 0
              else
                echo "hyprctl reload failed"
              fi
            fi

            echo "Failed to reload Hyprland"
            return 1
          }

          # Ensure config directory exists and is readable
          if [[ ! -d "${cfg.configPath}" ]]; then
            echo "Config directory ${cfg.configPath} does not exist, creating it..."
            mkdir -p "${cfg.configPath}"
          fi

          # Watch for changes to the Hyprland config directory
          echo "Starting to watch ${cfg.configPath} for changes..."

          # Use inotifywait to monitor for file system events
          inotifywait -m -r \
            --event modify \
            --event create \
            --event delete \
            --event move \
            --event attrib \
            --event delete_self \
            --event move_self \
            --format '%w%f %e %T' \
            --timefmt '%Y-%m-%d %H:%M:%S' \
            "${cfg.configPath}" 2>/dev/null | \
          while read -r file event timestamp; do
            echo "[$timestamp] Event: $event on $file"

            # Debounce rapid changes (skip if another reload is already running)
            if pgrep -f "reload_hyprland" >/dev/null; then
              echo "Reload already in progress, skipping..."
              continue
            fi

            # Filter for relevant events and files
            case "$event" in
              *MODIFY*|*CREATE*|*DELETE*|*MOVED*|*ATTRIB*)
                # Check if it's a relevant config file
                if [[ "$file" =~ \.(conf|json|toml)$ ]] || \
                   [[ "$(basename "$file")" == "hyprland.conf" ]] || \
                   [[ -L "$file" ]] || \
                   [[ "$event" =~ (ATTRIB|DELETE_SELF|MOVE_SELF) ]]; then
                  echo "Triggering reload for: $file ($event)"
                  reload_hyprland &
                fi
                ;;
            esac
          done
        '';

        serviceConfig = {
          Type = "simple";
          Restart = "always";
          RestartSec = 5;
          Environment = [
            "XDG_RUNTIME_DIR=/run/user/1000"
            "WAYLAND_DISPLAY=wayland-1"
            "PATH=${lib.makeBinPath (with pkgs; [inotify-tools hyprland coreutils procps gnugrep util-linux])}:/run/current-system/sw/bin"
          ];
        };

        path = with pkgs; [
          inotify-tools
          hyprland
          coreutils
          procps
          gnugrep
          util-linux
        ];

        wantedBy = ["default.target"];
        after = ["default.target"];
        partOf = ["default.target"];
      };
    };
  };
}
</file>

<file path="home/shell/zsh.nix">
#===============================================================================
# üêö Zsh Shell Configuration Module for Maid üêö
# Configures the Z shell with custom settings and functionality
# - Shell history management
# - Hardware-specific profile settings
# - Custom functions and aliases
# - Prompt and completion configuration
#===============================================================================
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.shell.zsh;
  # User preferences (formerly from shared config)
  username = "y0usaf";
  homeDirectory = "/home/y0usaf";
  tokenDir = "/home/y0usaf/Tokens";
  xdgConfigHome = "${homeDirectory}/.config";

  # ZSH configuration options (formerly from shared.zsh)
  zshConfig = {
    cat-fetch = true;
    history-memory = 10000;
    history-storage = 10000;
    enableFancyPrompt = true;
    zellij = {
      enable = false;
    };
  };
in {
  #===========================================================================
  # Module Options
  #===========================================================================
  options.home.shell.zsh = {
    enable = lib.mkEnableOption "zsh shell configuration";
  };

  #===========================================================================
  # Module Configuration
  #===========================================================================
  config = lib.mkIf cfg.enable {
    #=========================================================================
    # System-level ZSH Configuration
    #=========================================================================
    # Set ZDOTDIR to point ZSH to XDG config directory
    environment.variables.ZDOTDIR = "$HOME/.config/zsh";

    # Enable system-level ZSH features
    programs.zsh.enable = true;

    #=========================================================================
    # User Configuration
    #=========================================================================
    users.users.${username}.maid = {
      # Packages
      packages = with pkgs; [
        zsh
        bat
        lsd
        tree
      ];

      # Configuration Files
      file.home = {
        "{{xdg_config_home}}/zsh/.zshenv".text = let
          # Token directory path
          inherit tokenDir;
          # Token management function (from original envExtra)
          tokenFunctionScript = ''
            # Token management function
            export_vars_from_files() {
                local dir_path=$1
                for file_path in "$dir_path"/*.txt; do
                    if [[ -f $file_path ]]; then
                        var_name=$(basename "$file_path" .txt)
                        export $var_name=$(cat "$file_path")
                    fi
                done
            }

            # Export tokens using the configured directory
            export_vars_from_files "${tokenDir}"
          '';
        in
          tokenFunctionScript;

        "{{xdg_config_home}}/zsh/.zprofile".text = ''
          # Hardware-specific settings based on hostname.
          # Only run for interactive shells
          if [[ $- == *i* ]]; then
            case "$(hostname)" in
              "y0usaf-desktop")
                sudo nvidia-smi -pl 150
                # Only launch Hyprland if we're in a TTY
                if [ "$(tty)" = "/dev/tty1" ]; then
                  Hyprland
                fi
                ;;
              "y0usaf-laptop")
                # Only launch Hyprland if we're in a TTY
                if [ "$(tty)" = "/dev/tty1" ]; then
                  Hyprland
                fi
                ;;
            esac
          fi
        '';

        # Combine all .zshrc content using lib.mkMerge
        "{{xdg_config_home}}/zsh/.zshrc".text = lib.mkMerge [
          # Base configuration
          ''
            # History configuration
            HISTSIZE=${toString zshConfig.history-memory}
            SAVEHIST=${toString zshConfig.history-storage}
            HISTFILE="$HOME/.local/state/zsh/history"
            setopt HIST_IGNORE_DUPS
            setopt HIST_IGNORE_ALL_DUPS
            setopt HIST_IGNORE_SPACE
            setopt HIST_EXPIRE_DUPS_FIRST
            setopt SHARE_HISTORY
            setopt EXTENDED_HISTORY



            ${lib.optionalString zshConfig.enableFancyPrompt ''
              # ----------------------------
              # Prompt Setup
              # ----------------------------
              PS1='%F{blue}%~ %(?.%F{green}.%F{red})%#%f '
            ''}

            # ----------------------------
            # Advanced Tab Completion
            # ----------------------------
            zstyle ':completion:*' menu select
            zstyle ':completion:*' matcher-list \
                'm:{a-zA-Z}={A-Za-z}' \
                'r:|[._-]=* r:|=*' \
                'l:|=* r:|=*'

            # ----------------------------
            # Host-specific Functions
            # ----------------------------
            # Define a "fanspeed" function only when running on the laptop.
            if [ "$(hostname)" = "y0usaf-laptop" ]; then
                fanspeed() {
                    if [ -z "$1" ]; then
                        echo "Usage: fanspeed <percentage>"
                        return 1
                    fi
                    local speed="$1"
                    # Configure fan curves for both GPU and CPU.
                    asusctl fan-curve -m quiet -D "30c:$speed,40c:$speed,50c:$speed,60c:$speed,70c:$speed,80c:$speed,90c:$speed,100c:$speed" -e true -f gpu
                    asusctl fan-curve -m quiet -D "30c:$speed,40c:$speed,50c:$speed,60c:$speed,70c:$speed,80c:$speed,90c:$speed,100c:$speed" -e true -f cpu
                }
            fi

            # ----------------------------
            # Function: temppkg
            # ----------------------------
            # Temporarily adds a Nix package to the shell.
            temppkg() {
                if [ -z "$1" ]; then
                    echo "Usage: temppkg package_name"
                    return 1
                fi
                nix-shell -p "$1" --run "exec $SHELL"
            }

            # ----------------------------
            # Function: temprun
            # ----------------------------
            # Temporarily runs a Nix package without installing it.
            temprun() {
                if [ -z "$1" ]; then
                    echo "Usage: temprun package_name [args...]"
                    return 1
                fi
                local pkg="$1"
                shift
                nix run "nixpkgs#$pkg" -- "$@"
            }
          ''

          # Aliases (added after base config)
          (lib.mkAfter (let
            baseAliases = {
              #----- XDG Compliance Shortcuts -----
              adb = "HOME=\"$XDG_DATA_HOME/android\" adb";
              wget = "wget --hsts-file=\"$XDG_DATA_HOME/wget-hsts\"";
              svn = "svn --config-dir \"$XDG_CONFIG_HOME/subversion\"";
              yarn = "yarn --use-yarnrc \"$XDG_CONFIG_HOME/yarn/config\"";
              mocp = "mocp -M \"$XDG_CONFIG_HOME/moc\" -O MOCDir=\"$XDG_CONFIG_HOME/moc\"";
              cat = "bat";

              #----- Custom Scripts -----
              cattree = "$HOME/nixos/lib/resources/scripts/cattree.sh";

              #----- System Management Shortcuts -----
              userctl = "systemctl --user";
              hmfail = "journalctl -u home-manager-y0usaf.service -n 20 --no-pager";
              pkgs = "nix-store --query --requisites /run/current-system | cut -d- -f2- | sort | uniq | grep -i";
              pkgcount = "nix-store --query --requisites /run/current-system | cut -d- -f2- | sort | uniq | wc -l";
              hwconfig = "sudo nixos-generate-config --show-hardware-config";

              #----- Media & Tools Shortcuts -----
              esrgan = "realesrgan-ncnn-vulkan -i ~/Pictures/Upscale/Input -o ~/Pictures/Upscale/Output";

              #----- Directory & Search Shortcuts -----
              "l." = "lsd -A | grep -E \"^\\.\"";
              la = "lsd -A --color=always --group-dirs=first --icon=always";
              ll = "lsd -l --color=always --group-dirs=first --icon=always";
              ls = "lsd -lA --color=always --group-dirs=first --icon=always";
              lt = "lsd -A --tree --color=always --group-dirs=first --icon=always";
              grep = "grep --color=auto";
              dir = "dir --color=auto";
              egrep = "grep -E --color=auto";
              fgrep = "grep -F --color=auto";

              #----- Home Manager Repo Aliases -----
              "hmpush" = "git -C ~/nixos push origin main --force";
              "hmpull" = "git -C ~/nixos fetch origin && git -C ~/nixos reset --hard origin/main";

              #----- Hardware Management Shortcut -----
              gpupower = "sudo nvidia-smi -pl";

              #----- Nix Linting Shortcuts -----
              lintcheck = "clear; statix check .; deadnix .";
              lintfix = "clear; statix fix .; deadnix .";
            };

            # Note: Kitty Panel aliases disabled until kittens module is available
            kittyAliases = {};

            allAliases = baseAliases // kittyAliases;

            aliasSection = ''

              # ----------------------------
              # Shell Aliases
              # ----------------------------
              ${lib.concatStringsSep "\n"
                (lib.mapAttrsToList (name: value: "alias ${name}='${value}'") allAliases)}
            '';
          in
            aliasSection))
        ];
      }; # end file.home
    }; # end maid
  };
}
</file>

<file path="home/tools/yt-dlp.nix">
###############################################################################
# YouTube-DLP Module
# Tools for downloading and converting media from YouTube and other sites
###############################################################################
{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.home.tools.yt-dlp;
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.tools.yt-dlp = {
    enable = lib.mkEnableOption "YouTube-DLP media conversion tools";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Packages
    ###########################################################################
    users.users.y0usaf.maid.packages = with pkgs; [
      yt-dlp-light # Lightweight tool for downloading videos
      ffmpeg # Required for media conversion
    ];

    ###########################################################################
    # Shell Aliases (added to .zshrc)
    ###########################################################################
    users.users.y0usaf.maid.file.home."{{xdg_config_home}}/zsh/.zshrc".text = lib.mkAfter ''

      # ----------------------------
      # YouTube-DLP Aliases
      # ----------------------------
      # YouTube-DLP aliases for various formats
      alias ytm4a="yt-dlp --extractor-args 'youtube:player_client=android' --no-check-certificate -x --audio-format m4a --embed-metadata --add-metadata -o '%(title)s.%(ext)s'"
      alias ytmp3="yt-dlp --extractor-args 'youtube:player_client=android' --no-check-certificate -x --audio-format mp3 --embed-metadata --add-metadata -o '%(title)s.%(ext)s'"
      # Discord-compatible MP4 (H.264/AAC, smaller size)
      alias ytmp4="yt-dlp --extractor-args 'youtube:player_client=android' --no-check-certificate -f 'bv*[height<=720]+ba/b[height<=720]' --recode-video mp4 --embed-metadata --add-metadata --postprocessor-args 'ffmpeg:-c:v libx264 -crf 23 -preset medium -c:a aac -b:a 128k -vf scale=-2:720' -o '%(title)s.%(ext)s'"
      # Discord-compatible smaller MP4 for larger videos
      alias ytmp4s="yt-dlp --extractor-args 'youtube:player_client=android' --no-check-certificate -f 'bv*[height<=480]+ba/b[height<=480]' --recode-video mp4 --embed-metadata --add-metadata --postprocessor-args 'ffmpeg:-c:v libx264 -crf 26 -preset faster -c:a aac -b:a 96k -vf scale=-2:480' -o '%(title)s.%(ext)s'"
      alias ytwebm="yt-dlp --extractor-args 'youtube:player_client=android' --no-check-certificate -f 'bv*[height<=720]+ba/b[height<=720]' --recode-video webm --embed-metadata --add-metadata --postprocessor-args 'ffmpeg:-c:v libvpx-vp9 -crf 30 -b:v 0 -c:a libopus -vf scale=-2:720' -o '%(title)s.%(ext)s'"
      # Discord-friendly - 8MB limit version
      alias ytdiscord="yt-dlp --extractor-args 'youtube:player_client=android' --no-check-certificate -f 'bv*[height<=720]+ba/b[height<=720]' --recode-video mp4 --embed-metadata --add-metadata --postprocessor-args 'ffmpeg:-c:v libx264 -crf 28 -preset faster -c:a aac -b:a 96k -vf scale=-2:min(720\\,ih) -fs 7.8M' -o '%(title)s_discord.%(ext)s'"
    '';
  };
}
</file>

<file path="home/dev/mcp.nix">
###############################################################################
# Model Context Protocol (MCP) Development Module (Maid Version)
# Configures MCP servers using nix-maid file management system
# - Creates the .cursor/mcp.json configuration file
# - Installs required packages (nodejs, uv)
# - Sets up environment variables
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.dev.mcp;

  # Shared MCP servers configuration
  mcpServersConfig = {
    mcpServers = {
      "Filesystem" = {
        type = "stdio";
        command = "npx";
        args = ["-y" "@modelcontextprotocol/server-filesystem" "/home/y0usaf"];
        env = {};
      };
      "Nixos MCP" = {
        type = "stdio";
        command = "uvx";
        args = ["mcp-nixos"];
        env = {};
      };
      "sequential-thinking" = {
        type = "stdio";
        command = "npx";
        args = ["-y" "@modelcontextprotocol/server-sequential-thinking"];
        env = {};
      };
      "GitHub Repo MCP" = {
        type = "stdio";
        command = "npx";
        args = ["-y" "github-repo-mcp"];
        env = {};
      };
      "Gemini MCP" = {
        type = "stdio";
        command = "npx";
        args = ["-y" "gemini-mcp-tool"];
        env = {};
      };
    };
  };

  # Claude Code specific format (just the servers, no wrapper)
  claudeCodeServers = {
    "Filesystem" = {
      type = "stdio";
      command = "npx";
      args = ["-y" "@modelcontextprotocol/server-filesystem" "/home/y0usaf"];
      env = {};
    };
    "Nixos MCP" = {
      type = "stdio";
      command = "uvx";
      args = ["mcp-nixos"];
      env = {};
    };
    "sequential-thinking" = {
      type = "stdio";
      command = "npx";
      args = ["-y" "@modelcontextprotocol/server-sequential-thinking"];
      env = {};
    };
    "GitHub Repo MCP" = {
      type = "stdio";
      command = "npx";
      args = ["-y" "github-repo-mcp"];
      env = {};
    };
    "Gemini MCP" = {
      type = "stdio";
      command = "npx";
      args = ["-y" "gemini-mcp-tool"];
      env = {};
    };
  };
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.dev.mcp = {
    enable = lib.mkEnableOption "Model Context Protocol configuration";
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.y0usaf.maid = {
      packages = with pkgs; [
        nodejs_20
        uv
      ];

      ###########################################################################
      # MCP Configuration Files
      ###########################################################################
      file.home = {
        ".cursor/mcp.json".text = builtins.toJSON mcpServersConfig;
        ".claude/mcp_config.json".text = builtins.toJSON mcpServersConfig;
        ".claude/mcp_servers.json".text = builtins.toJSON claudeCodeServers;
      };
    };

    ###########################################################################
    # Environment Variables (via systemd)
    ###########################################################################
    users.users.y0usaf.maid.systemd.tmpfiles.dynamicRules = [
      "d {{home}}/.local/share/npm/lib/node_modules 0755 {{user}} {{group}} - -"
    ];

    ###########################################################################
    # System Activation Script - Use Claude CLI to add MCP servers
    ###########################################################################
    system.activationScripts.setupClaudeMcp = {
      text = ''
        echo "Setting up Claude MCP servers via CLI..."

        # Function to add MCP server if not already present
        add_mcp_server() {
          local name="$1"
          local command="$2"
          shift 2
          local args="$@"

          # Check if server already exists
          if ! runuser -u y0usaf -- ${pkgs.claude-code}/bin/claude mcp list | grep -q "$name"; then
            echo "Adding MCP server: $name"
            runuser -u y0usaf -- ${pkgs.claude-code}/bin/claude mcp add --scope user "$name" "$command" $args
          else
            echo "MCP server already exists: $name"
          fi
        }

        # Add all MCP servers to user scope for global access
        add_mcp_server "Filesystem" "npx" "@modelcontextprotocol/server-filesystem" "/home/y0usaf"
        add_mcp_server "sequential-thinking" "npx" "@modelcontextprotocol/server-sequential-thinking"
        add_mcp_server "GitHub Repo MCP" "npx" "github-repo-mcp"
        add_mcp_server "Gemini MCP" "npx" "gemini-mcp-tool"

        echo "Claude MCP servers setup complete"
      '';
      deps = [];
    };
  };
}
</file>

<file path="home/ui/quickshell.nix">
###############################################################################
# Quickshell Module
# Qt-based desktop shell
###############################################################################
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.home.ui.quickshell;
  username = "y0usaf";
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.home.ui.quickshell = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Enable Quickshell desktop shell";
    };
  };

  ###########################################################################
  # Module Configuration
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # Maid Configuration
    ###########################################################################
    users.users.${username}.maid = {
      packages = with pkgs; [
        quickshell
        cava
      ];
    };
  };
}
</file>

<file path="hosts/y0usaf-desktop/default.nix">
# HOST CONFIGURATION for y0usaf-desktop
# Separated system and home configurations - no shared dependencies
{
  pkgs,
  inputs,
  ...
}: let
  username = "y0usaf";
  homeDir = "/home/${username}";
  hostname = "y0usaf-desktop";
  stateVersion = "24.11";
  timezone = "America/Toronto";
in {
  # SYSTEM CONFIGURATION - self-contained, no home dependencies
  system = {
    # Module imports for system-level configuration
    imports = [
      ../../system
      ./hardware-configuration.nix
      # ./disko.nix  # Temporarily disabled - partitions not created yet
    ];

    # Core system identity and settings
    username = username;
    hostname = hostname;
    homeDirectory = homeDir;
    stateVersion = stateVersion;
    timezone = timezone;
    profile = "default";

    # Hardware configuration - host-level options
    hardware = {
      bluetooth = {
        enable = true;
      };
      nvidia = {
        enable = true;
        cuda.enable = true;
      };
      amdgpu.enable = false;
      display.outputs = {
        "DP-4" = {
          mode = "5120x1440@239.76";
        };
        "DP-3" = {
          mode = "5120x1440@239.76";
        };
        "DP-2" = {
          mode = "5120x1440@239.76";
        };
        "DP-1" = {
          mode = "5120x1440@239.76";
        };
        "eDP-1" = {
          mode = "1920x1080@300.00";
        };
      };
    };

    # System-wide service declarations - what this host supports
    services = {
      docker.enable = true; # Container development
      waydroid.enable = false; # Android emulation (disabled - doesn't work with Nvidia)
      controllers.enable = true; # Gaming controller support
    };
  };

  # HOME CONFIGURATION - Keep existing structure for now
  # TODO: Update home modules to use systemValues instead of shared
  home = {
    core = {
      packages.enable = true;
      defaults = {
        browser = "firefox";
        editor = "nvim";
        ide = "cursor";
        terminal = "foot";
        fileManager = "pcmanfm";
        launcher = "foot -a 'launcher' ~/.config/scripts/sway-launcher-desktop.sh";
        discord = "discord-canary";
        archiveManager = "7z";
        imageViewer = "imv";
        mediaPlayer = "mpv";
      };
      appearance = {
        enable = true;
        dpi = 109;
        baseFontSize = 12;
        cursorSize = 36;
        fonts = {
          main = [
            {
              package = inputs.fast-fonts.packages.x86_64-linux.default;
              name = "Fast_Mono";
            }
          ];
          fallback = [
            {
              package = pkgs.noto-fonts-emoji;
              name = "Noto Color Emoji";
            }
            {
              package = pkgs.noto-fonts-cjk-sans;
              name = "Noto Sans CJK";
            }
            {
              package = pkgs.font-awesome;
              name = "Font Awesome";
            }
          ];
        };
      };
      user.enable = true;
    };
    directories = {
      flake.path = "${homeDir}/nixos";
      music.path = "${homeDir}/Music";
      dcim.path = "${homeDir}/DCIM";
      steam = {
        path = "${homeDir}/.local/share/Steam";
        create = false;
      };
      wallpapers = {
        static.path = "${homeDir}/DCIM/Wallpapers/32_9";
        video.path = "${homeDir}/DCIM/Wallpapers_Video";
      };
    };
    ui = {
      ags.enable = true;
      cursor.enable = true;
      fonts.enable = true;
      foot.enable = true;
      gtk.enable = true;
      hyprland = {
        enable = true;
        flake.enable = true;
        hy3.enable = false;
      };
      quickshell.enable = true;
      wallust.enable = true;
      wayland.enable = true;
    };
    programs = {
      vesktop.enable = true;
      webapps.enable = true;
      firefox.enable = true;
      discord.enable = true;
      obsidian.enable = true;
      creative.enable = true;
      media.enable = true;
      bluetooth.enable = true;
      obs.enable = true;
      bambu.enable = true;
      imv.enable = true;
      mpv.enable = true;
      pcmanfm.enable = true;
      qbittorrent.enable = true;
      sway-launcher-desktop.enable = true;
    };
    dev = {
      cursor-ide.enable = true;
      claude-code.enable = true;
      mcp.enable = true;
      docker.enable = true;
      nvim = {
        enable = true;
        neovide = false;
      };
      repomix.enable = true;
    };
    shell = {
      zsh.enable = true;
      cat-fetch.enable = true;
      zellij.enable = true;
    };
    tools = {
      git = {
        enable = true;
        name = "y0usaf";
        email = "OA99@Outlook.com";
        nixos-git-sync = {
          enable = true;
          nixosRepoUrl = "git@github.com:y0usaf/nixos.git";
          remoteBranch = "main";
        };
      };
      jujutsu = {
        enable = true;
        name = "y0usaf";
        email = "OA99@Outlook.com";
      };
      nh = {
        enable = true;
        flake = "${homeDir}/nixos";
      };
      "7z".enable = true;
      file-roller.enable = true;
      spotdl.enable = true;
      yt-dlp.enable = true;
    };
    services = {
      polkitAgent.enable = true;
      formatNix.enable = true;
      nixosGitSync = {
        enable = true;
        remoteBranch = "main";
      };
      syncthing.enable = true;
    };
    gaming = {
      core.enable = true;
      controllers.enable = true;
      emulation = {
        wii-u.enable = true;
        gcn-wii.enable = true;
      };
      marvel-rivals = {
        engine.enable = true;
        gameusersettings.enable = true;
        marvelusersettings.enable = true;
      };
      balatro = {
        enable = true;
        enableLovelyInjector = true;
        enabledMods = ["steamodded" "talisman" "morespeeds" "cardsleeves" "multiplayer" "jokerdisplay" "pokermon" "aura" "handybalatro" "stickersalwaysshown"];
      };
      wukong = {
        enable = true;
      };
    };
  };
}
</file>

<file path="home/dev/nvim/plugins.nix">
{
  config,
  lib,
  ...
}: let
  cfg = config.home.dev.nvim;
  username = "y0usaf";
in {
  config = lib.mkIf cfg.enable {
    users.users.${username}.maid.file.xdg_config."nvim/lua/plugins.lua".text = ''
      return {
        -- LSP
        {
          "neovim/nvim-lspconfig",
          event = { "BufReadPre", "BufNewFile" },
          dependencies = {
            "hrsh7th/cmp-nvim-lsp",
          },
          config = function()
            local lspconfig = require("lspconfig")
            local capabilities = require("cmp_nvim_lsp").default_capabilities()

            local on_attach = function(client, bufnr)
              local opts = { buffer = bufnr, silent = true }
              vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
              vim.keymap.set("n", "gr", vim.lsp.buf.references, opts)
              vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
              vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
              vim.keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, opts)
              vim.keymap.set("n", "[d", vim.diagnostic.goto_prev, opts)
              vim.keymap.set("n", "]d", vim.diagnostic.goto_next, opts)
            end


            local servers = { "lua_ls", "nil_ls", "pyright" }
            for _, server in ipairs(servers) do
              lspconfig[server].setup({
                capabilities = capabilities,
                on_attach = on_attach,
                settings = server == "lua_ls" and {
                  Lua = { diagnostics = { globals = { "vim" } } }
                } or {},
              })
            end
          end,
        },


        {
          "hrsh7th/nvim-cmp",
          event = "InsertEnter",
          dependencies = {
            "hrsh7th/cmp-nvim-lsp",
            "hrsh7th/cmp-buffer",
            "hrsh7th/cmp-path",
            "L3MON4D3/LuaSnip",
            "saadparwaiz1/cmp_luasnip",
            "onsails/lspkind.nvim",
          },
          config = function()
            local cmp = require("cmp")
            local luasnip = require("luasnip")
            local lspkind = require("lspkind")

            cmp.setup({
              snippet = {
                expand = function(args)
                  luasnip.lsp_expand(args.body)
                end,
              },
              mapping = cmp.mapping.preset.insert({
                ["<C-b>"] = cmp.mapping.scroll_docs(-4),
                ["<C-f>"] = cmp.mapping.scroll_docs(4),
                ["<C-Space>"] = cmp.mapping.complete(),
                ["<C-e>"] = cmp.mapping.abort(),
                ["<CR>"] = cmp.mapping.confirm({ select = true }),
                ["<Tab>"] = cmp.mapping(function(fallback)
                  if cmp.visible() then
                    cmp.select_next_item()
                  elseif luasnip.expand_or_jumpable() then
                    luasnip.expand_or_jump()
                  else
                    fallback()
                  end
                end, { "i", "s" }),
              }),
              sources = cmp.config.sources({
                { name = "nvim_lsp", priority = 1000 },
                { name = "luasnip", priority = 750 },
              }, {
                { name = "buffer", priority = 500, max_item_count = 5 },
                { name = "path", priority = 250, max_item_count = 3 },
              }),
              formatting = {
                format = lspkind.cmp_format({
                  mode = "symbol_text",
                  maxwidth = 50,
                  ellipsis_char = "...",
                }),
              },
            })
          end,
        },


        {
          "nvim-telescope/telescope.nvim",
          event = "VeryLazy",
          dependencies = {
            "nvim-lua/plenary.nvim",
            { "nvim-telescope/telescope-fzf-native.nvim", build = "make" },
          },
          config = function()
            require("telescope").setup({})
            require("telescope").load_extension("fzf")
          end,
        },


        {
          "nvim-treesitter/nvim-treesitter",
          build = ":TSUpdate",
          event = { "BufReadPost", "BufNewFile" },
          opts = {
            highlight = { enable = true },
            indent = { enable = true },
          },
        },


        { "numToStr/Comment.nvim", event = "VeryLazy", opts = {} },
        { "windwp/nvim-autopairs", event = "InsertEnter", opts = {} },



        {
          "kevinhwang91/nvim-ufo",
          event = "VeryLazy",
          dependencies = "kevinhwang91/promise-async",
          opts = {},
          init = function()
            vim.o.foldcolumn = "1"
            vim.o.foldlevel = 99
            vim.o.foldlevelstart = 99
            vim.o.foldenable = true
          end,
        },
        {
          "j-hui/fidget.nvim",
          event = "VeryLazy",
          opts = {
            notification = {
              window = {
                winblend = 0,
                border = "rounded",
                max_width = 0,
                max_height = 0,
              },
              view = {
                stack_upwards = true,
                icon_separator = " ",
                group_separator = "---",
                group_separator_hl = "Comment",
              },
              configs = {
                default = {
                  name = "Notification",
                  ttl = 5,
                  group_key = nil,
                  icon = "üí¨",
                  annote = nil,
                  priority = 30,
                  skip_history = false,
                  update_hook = nil,
                },
                error = {
                  name = "Error",
                  icon = "‚ùå",
                  ttl = 8,
                  priority = 100,
                },
                warn = {
                  name = "Warning",
                  icon = "‚ö†Ô∏è",
                  ttl = 6,
                  priority = 80,
                },
                info = {
                  name = "Info",
                  icon = "‚ÑπÔ∏è",
                  ttl = 4,
                  priority = 50,
                },
              },
            },
            progress = {
              display = {
                render_limit = 3,
                done_ttl = 2,
              },
            },
          },
          config = function(_, opts)
            require("fidget").setup(opts)

            vim.notify = require("fidget").notify
          end,
        },
        {
          "RRethy/vim-illuminate",
          event = "VeryLazy",
          config = function()
            require("illuminate").configure({
              delay = 100,
              large_file_cutoff = 2000,
              large_file_overrides = {
                providers = { "lsp" },
              },
            })
          end,
        },
        {
          "folke/twilight.nvim",
          cmd = "Twilight",
          opts = {
            dimming = {
              alpha = 0.25,
              color = { "Normal", "#ffffff" },
            },
            context = 15,
            treesitter = true,
          },
        },


        {
          "kawre/leetcode.nvim",
          cmd = "Leet",
          dependencies = {
            "nvim-telescope/telescope.nvim",
            "nvim-lua/plenary.nvim",
            "MunifTanjim/nui.nvim",
          },
          opts = {
            lang = "python3",
            storage = {
              home = "~/leetcode/",
            },
            logging = true,
            injector = {
              ["python3"] = {
                before = true,
              },
            },
          },
        },


      }
    '';
  };
}
</file>

</files>
