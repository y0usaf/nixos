###############################################################################
# Kitty Kittens Configuration  
# Desktop panels and widgets using kitty's panel kitten
# - System information display with nitch
# - Digital clock display with tty-clock
# - Configurable panel positioning and styling
###############################################################################
{
  config,
  pkgs,
  lib,
  hostSystem,
  hostHome,
  ...
}: let
  cfg = config.cfg.ui.kittens;

  # Create a script that displays tty-clock and nitch together
  panelScript = pkgs.writeShellScript "kitty-panel-script" ''
    #!/bin/bash
    
    # Clear the screen
    clear
    
    # Set terminal size for optimal display
    printf '\e[8;20;80t'
    
    # Function to display both programs
    display_panel() {
      # Clear screen and position cursor at top
      printf '\033[2J\033[H'
      
      # Run tty-clock in the background and capture its output
      timeout 1 ${pkgs.tty-clock}/bin/tty-clock -c -s -n -t > /tmp/tty-clock-output 2>/dev/null &
      sleep 0.5
      
      # Display tty-clock output centered
      if [[ -f /tmp/tty-clock-output ]]; then
        cat /tmp/tty-clock-output
        rm -f /tmp/tty-clock-output
      fi
      
      # Add some spacing
      printf '\n\n'
      
      # Run nitch for system info
      ${pkgs.nitch}/bin/nitch
      
      # Add some bottom padding
      printf '\n\n'
    }
    
    # Initial display
    display_panel
    
    # Update every second
    while true; do
      sleep 1
      display_panel
    done
  '';

  # Alternative static script for better performance
  staticPanelScript = pkgs.writeShellScript "kitty-static-panel-script" ''
    #!/bin/bash
    
    # Clear the screen and set up
    clear
    printf '\e[8;25;80t'  # Set window size
    
    # Display header
    printf '\033[2J\033[H'
    printf '\033[1;36m╭─────────────────────────────────────────────────────────────────────────────╮\033[0m\n'
    printf '\033[1;36m│                               System Panel                                │\033[0m\n'  
    printf '\033[1;36m╰─────────────────────────────────────────────────────────────────────────────╯\033[0m\n\n'
    
    # Start tty-clock in background mode with centering and seconds
    ${pkgs.tty-clock}/bin/tty-clock -c -s &
    CLOCK_PID=$!
    
    # Wait a moment then show nitch below  
    sleep 2
    printf '\n\n'
    ${pkgs.nitch}/bin/nitch
    
    # Keep the clock running
    wait $CLOCK_PID
  '';

  # Simple combined display script
  simplePanelScript = pkgs.writeShellScript "kitty-simple-panel" ''
    #!/bin/bash
    
    # Set up the terminal
    clear
    printf '\e[8;30;100t'  # Larger window for better display
    
    # Function to show current time and system info
    show_info() {
      printf '\033[2J\033[H'  # Clear and home
      
      # Show clock
      printf '\033[1;33m'  # Yellow color
      printf '\n   '
      date '+%H:%M:%S'
      printf '\033[0m\n'  # Reset color
      
      # Separator  
      printf '\033[1;90m   ────────────────\033[0m\n\n'
      
      # Show system info
      ${pkgs.nitch}/bin/nitch
      
      printf '\n\n'
    }
    
    # Show initial info
    show_info
    
    # Update every second
    while true; do
      sleep 1
      show_info
    done
  '';
in {
  ###########################################################################
  # Module Options
  ###########################################################################
  options.cfg.ui.kittens = {
    enable = lib.mkEnableOption "kitty kittens desktop panels";
    
    panel = {
      edge = lib.mkOption {
        type = lib.types.enum ["top" "bottom" "left" "right" "background" "center"];
        default = "top";
        description = "Which edge of the screen to place the panel on";
      };
      
      style = lib.mkOption {
        type = lib.types.enum ["combined" "static" "simple"];
        default = "simple";
        description = "Panel display style - combined (dynamic), static (tty-clock focused), or simple (minimal)";
      };
      
      lines = lib.mkOption {
        type = lib.types.int;
        default = 30;
        description = "Number of lines for the panel";
      };
      
      columns = lib.mkOption {
        type = lib.types.int;
        default = 100;
        description = "Number of columns for the panel";
      };
    };
  };

  ###########################################################################
  # Module Configuration  
  ###########################################################################
  config = lib.mkIf cfg.enable {
    ###########################################################################
    # User Packages
    ###########################################################################
    home.packages = with pkgs; [
      tty-clock  # Digital clock in ncurses
      nitch      # Fast system fetch written in nim
    ];

    ###########################################################################
    # Scripts and Aliases
    ###########################################################################
    home.file = {
      # Panel launcher script
      ".config/scripts/kitty-panel" = {
        source = let
          selectedScript = 
            if cfg.panel.style == "combined" then panelScript
            else if cfg.panel.style == "static" then staticPanelScript  
            else simplePanelScript;
        in selectedScript;
        executable = true;
      };
    };

    ###########################################################################
    # Shell Aliases
    ###########################################################################  
    programs.zsh.shellAliases = lib.mkIf config.programs.zsh.enable {
      # Panel commands
      "kpanel" = "kitty +kitten panel --edge=${cfg.panel.edge} --lines=${toString cfg.panel.lines} --columns=${toString cfg.panel.columns} ~/.config/scripts/kitty-panel";
      "kpanel-bg" = "kitty +kitten panel --edge=background --lines=${toString cfg.panel.lines} --columns=${toString cfg.panel.columns} ~/.config/scripts/kitty-panel";
      "kpanel-center" = "kitty +kitten panel --edge=center --lines=${toString cfg.panel.lines} --columns=${toString cfg.panel.columns} ~/.config/scripts/kitty-panel";
      
      # Individual component commands  
      "kclock" = "${pkgs.tty-clock}/bin/tty-clock -c -s";
      "kinfo" = "${pkgs.nitch}/bin/nitch";
    };

    ###########################################################################
    # Desktop Entry (for easy launching)
    ###########################################################################
    xdg.desktopEntries.kitty-panel = lib.mkIf config.xdg.enable {
      name = "Kitty Panel";
      comment = "System information panel using kitty";
      exec = "kitty +kitten panel --edge=${cfg.panel.edge} --lines=${toString cfg.panel.lines} --columns=${toString cfg.panel.columns} ~/.config/scripts/kitty-panel";
      icon = "kitty";
      categories = ["System" "Monitor"];
      type = "Application";
    };
  };
}