---
description: Rules for migrating Home Manager modules to Hjem (hjome) modules
globs: 
alwaysApply: false
---

# HJEM MIGRATION RULE

## Overview
This rule explains how to migrate Home Manager modules to Hjem (hjome) modules. Hjem is a simplified alternative to Home Manager that focuses on package management and simple file configurations without the complexity of Home Manager's declarative program configurations.

## Key Differences Between Home Manager and Hjem

### Option Namespacing
- **Home Manager**: `config.cfg.{category}.{module}`
- **Hjem**: `config.cfg.hjome.{category}.{module}`

### Package Installation
- **Home Manager**: `home.packages = with pkgs; [package-list];`
- **Hjem**: `packages = with pkgs; [package-list];`

### Module Structure
Both use the same basic structure with options and config sections, but Hjem avoids Home Manager-specific features.

## Migration Process

### 1. File Location
- **From**: `nixos/home/{category}/{module}.nix`
- **To**: `nixos/hjem/{category}/{module}.nix`

### 2. Option Namespace Change
```nix
# Before (Home Manager)
options.cfg.programs.example = {
  enable = lib.mkEnableOption "example program";
};
config = lib.mkIf config.cfg.programs.example.enable {
  # ...
};

# After (Hjem)
options.cfg.hjome.programs.example = {
  enable = lib.mkEnableOption "example program";
};
config = lib.mkIf config.cfg.hjome.programs.example.enable {
  # ...
};
```

### 3. Package Installation Change
```nix
# Before (Home Manager)
config = lib.mkIf cfg.enable {
  home.packages = with pkgs; [
    example-package
  ];
};

# After (Hjem)
config = lib.mkIf cfg.enable {
  packages = with pkgs; [
    example-package
  ];
};
```

### 4. What to Migrate vs What to Keep in Home Manager

#### ✅ Suitable for Hjem Migration:
- Simple package installations (`home.packages`)
- Basic file configurations using `{file}.text`
- Simple shell aliases (can be converted to script files)
- Modules that don't use Home Manager's declarative program configurations

#### ❌ Keep in Home Manager:
- Complex Home Manager program configurations (`programs.git`, `programs.zsh`, etc.)
- XDG configurations with complex MIME handling
- Systemd user services
- Complex environment variable setups
- Desktop entries with dynamic content
- Font configurations with XML generation
- Modules requiring Home Manager's activation scripts

### 5. Configuration File Handling
```nix
# Home Manager approach (complex)
xdg.configFile."app/config".text = ''
  setting = value
'';

# Hjem approach (when suitable)
# Convert to simple package installation or avoid if too complex
```

## Example Migration

### Before: Home Manager Module
```nix
# nixos/home/programs/example.nix
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.cfg.programs.example;
in {
  options.cfg.programs.example = {
    enable = lib.mkEnableOption "example program";
  };

  config = lib.mkIf cfg.enable {
    home.packages = with pkgs; [
      example-package
    ];
  };
}
```

### After: Hjem Module
```nix
# nixos/hjem/programs/example.nix
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.cfg.hjome.programs.example;
in {
  options.cfg.hjome.programs.example = {
    enable = lib.mkEnableOption "example program";
  };

  config = lib.mkIf cfg.enable {
    packages = with pkgs; [
      example-package
    ];
  };
}
```

## Post-Migration Steps

### 1. Update Module Imports
The default.nix files in hjem directories automatically import modules using `helpers.importModules`, so no manual import changes needed.

### 2. Update Configuration References
Change any host configurations that reference the old Home Manager options:
```nix
# Before
cfg.programs.example.enable = true;

# After  
cfg.hjome.programs.example.enable = true;
```

### 3. Remove Old Home Manager Module
Delete the original file from the `nixos/home/` directory after migration.

# DO NOT FORGET TO GIT ADD THE NEW FILES, OR THEY WILL NOT COMPILE.

### 4. Test the Migration
Run the system build to ensure the migration works correctly:
```bash
nh os switch --dry
```

